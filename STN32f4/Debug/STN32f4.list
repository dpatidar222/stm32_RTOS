
STN32f4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c48  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08005de8  08005de8  00015de8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e84  08005e84  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08005e84  08005e84  00015e84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005e8c  08005e8c  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e8c  08005e8c  00015e8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e90  08005e90  00015e90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08005e94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004be0  20000060  08005ef4  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004c40  08005ef4  00024c40  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018de2  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003842  00000000  00000000  00038eb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001498  00000000  00000000  0003c6f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ff9  00000000  00000000  0003db90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003acb  00000000  00000000  0003eb89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017357  00000000  00000000  00042654  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000974cb  00000000  00000000  000599ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000058e8  00000000  00000000  000f0e78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  000f6760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005dd0 	.word	0x08005dd0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	08005dd0 	.word	0x08005dd0

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001f4:	f000 b970 	b.w	80004d8 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	460d      	mov	r5, r1
 8000218:	4604      	mov	r4, r0
 800021a:	460f      	mov	r7, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14a      	bne.n	80002b6 <__udivmoddi4+0xa6>
 8000220:	428a      	cmp	r2, r1
 8000222:	4694      	mov	ip, r2
 8000224:	d965      	bls.n	80002f2 <__udivmoddi4+0xe2>
 8000226:	fab2 f382 	clz	r3, r2
 800022a:	b143      	cbz	r3, 800023e <__udivmoddi4+0x2e>
 800022c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000230:	f1c3 0220 	rsb	r2, r3, #32
 8000234:	409f      	lsls	r7, r3
 8000236:	fa20 f202 	lsr.w	r2, r0, r2
 800023a:	4317      	orrs	r7, r2
 800023c:	409c      	lsls	r4, r3
 800023e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000242:	fa1f f58c 	uxth.w	r5, ip
 8000246:	fbb7 f1fe 	udiv	r1, r7, lr
 800024a:	0c22      	lsrs	r2, r4, #16
 800024c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000250:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000254:	fb01 f005 	mul.w	r0, r1, r5
 8000258:	4290      	cmp	r0, r2
 800025a:	d90a      	bls.n	8000272 <__udivmoddi4+0x62>
 800025c:	eb1c 0202 	adds.w	r2, ip, r2
 8000260:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000264:	f080 811c 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000268:	4290      	cmp	r0, r2
 800026a:	f240 8119 	bls.w	80004a0 <__udivmoddi4+0x290>
 800026e:	3902      	subs	r1, #2
 8000270:	4462      	add	r2, ip
 8000272:	1a12      	subs	r2, r2, r0
 8000274:	b2a4      	uxth	r4, r4
 8000276:	fbb2 f0fe 	udiv	r0, r2, lr
 800027a:	fb0e 2210 	mls	r2, lr, r0, r2
 800027e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000282:	fb00 f505 	mul.w	r5, r0, r5
 8000286:	42a5      	cmp	r5, r4
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x90>
 800028a:	eb1c 0404 	adds.w	r4, ip, r4
 800028e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000292:	f080 8107 	bcs.w	80004a4 <__udivmoddi4+0x294>
 8000296:	42a5      	cmp	r5, r4
 8000298:	f240 8104 	bls.w	80004a4 <__udivmoddi4+0x294>
 800029c:	4464      	add	r4, ip
 800029e:	3802      	subs	r0, #2
 80002a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a4:	1b64      	subs	r4, r4, r5
 80002a6:	2100      	movs	r1, #0
 80002a8:	b11e      	cbz	r6, 80002b2 <__udivmoddi4+0xa2>
 80002aa:	40dc      	lsrs	r4, r3
 80002ac:	2300      	movs	r3, #0
 80002ae:	e9c6 4300 	strd	r4, r3, [r6]
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d908      	bls.n	80002cc <__udivmoddi4+0xbc>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80ed 	beq.w	800049a <__udivmoddi4+0x28a>
 80002c0:	2100      	movs	r1, #0
 80002c2:	e9c6 0500 	strd	r0, r5, [r6]
 80002c6:	4608      	mov	r0, r1
 80002c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002cc:	fab3 f183 	clz	r1, r3
 80002d0:	2900      	cmp	r1, #0
 80002d2:	d149      	bne.n	8000368 <__udivmoddi4+0x158>
 80002d4:	42ab      	cmp	r3, r5
 80002d6:	d302      	bcc.n	80002de <__udivmoddi4+0xce>
 80002d8:	4282      	cmp	r2, r0
 80002da:	f200 80f8 	bhi.w	80004ce <__udivmoddi4+0x2be>
 80002de:	1a84      	subs	r4, r0, r2
 80002e0:	eb65 0203 	sbc.w	r2, r5, r3
 80002e4:	2001      	movs	r0, #1
 80002e6:	4617      	mov	r7, r2
 80002e8:	2e00      	cmp	r6, #0
 80002ea:	d0e2      	beq.n	80002b2 <__udivmoddi4+0xa2>
 80002ec:	e9c6 4700 	strd	r4, r7, [r6]
 80002f0:	e7df      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002f2:	b902      	cbnz	r2, 80002f6 <__udivmoddi4+0xe6>
 80002f4:	deff      	udf	#255	; 0xff
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x210>
 8000300:	1a8a      	subs	r2, r1, r2
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2101      	movs	r1, #1
 800030c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000310:	fb07 2015 	mls	r0, r7, r5, r2
 8000314:	0c22      	lsrs	r2, r4, #16
 8000316:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800031a:	fb0e f005 	mul.w	r0, lr, r5
 800031e:	4290      	cmp	r0, r2
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x124>
 8000322:	eb1c 0202 	adds.w	r2, ip, r2
 8000326:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4290      	cmp	r0, r2
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2b8>
 8000332:	4645      	mov	r5, r8
 8000334:	1a12      	subs	r2, r2, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb2 f0f7 	udiv	r0, r2, r7
 800033c:	fb07 2210 	mls	r2, r7, r0, r2
 8000340:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x14e>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x14c>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2c2>
 800035c:	4610      	mov	r0, r2
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000366:	e79f      	b.n	80002a8 <__udivmoddi4+0x98>
 8000368:	f1c1 0720 	rsb	r7, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa05 f401 	lsl.w	r4, r5, r1
 800037a:	fa20 f307 	lsr.w	r3, r0, r7
 800037e:	40fd      	lsrs	r5, r7
 8000380:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000384:	4323      	orrs	r3, r4
 8000386:	fbb5 f8f9 	udiv	r8, r5, r9
 800038a:	fa1f fe8c 	uxth.w	lr, ip
 800038e:	fb09 5518 	mls	r5, r9, r8, r5
 8000392:	0c1c      	lsrs	r4, r3, #16
 8000394:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000398:	fb08 f50e 	mul.w	r5, r8, lr
 800039c:	42a5      	cmp	r5, r4
 800039e:	fa02 f201 	lsl.w	r2, r2, r1
 80003a2:	fa00 f001 	lsl.w	r0, r0, r1
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2b4>
 80003b4:	42a5      	cmp	r5, r4
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2b4>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4464      	add	r4, ip
 80003c0:	1b64      	subs	r4, r4, r5
 80003c2:	b29d      	uxth	r5, r3
 80003c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c8:	fb09 4413 	mls	r4, r9, r3, r4
 80003cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2ac>
 80003e2:	45a6      	cmp	lr, r4
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2ac>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	4464      	add	r4, ip
 80003ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003ee:	fba3 9502 	umull	r9, r5, r3, r2
 80003f2:	eba4 040e 	sub.w	r4, r4, lr
 80003f6:	42ac      	cmp	r4, r5
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46ae      	mov	lr, r5
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x29c>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x298>
 8000400:	b156      	cbz	r6, 8000418 <__udivmoddi4+0x208>
 8000402:	ebb0 0208 	subs.w	r2, r0, r8
 8000406:	eb64 040e 	sbc.w	r4, r4, lr
 800040a:	fa04 f707 	lsl.w	r7, r4, r7
 800040e:	40ca      	lsrs	r2, r1
 8000410:	40cc      	lsrs	r4, r1
 8000412:	4317      	orrs	r7, r2
 8000414:	e9c6 7400 	strd	r7, r4, [r6]
 8000418:	4618      	mov	r0, r3
 800041a:	2100      	movs	r1, #0
 800041c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000420:	f1c3 0120 	rsb	r1, r3, #32
 8000424:	fa02 fc03 	lsl.w	ip, r2, r3
 8000428:	fa20 f201 	lsr.w	r2, r0, r1
 800042c:	fa25 f101 	lsr.w	r1, r5, r1
 8000430:	409d      	lsls	r5, r3
 8000432:	432a      	orrs	r2, r5
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000440:	fb07 1510 	mls	r5, r7, r0, r1
 8000444:	0c11      	lsrs	r1, r2, #16
 8000446:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800044a:	fb00 f50e 	mul.w	r5, r0, lr
 800044e:	428d      	cmp	r5, r1
 8000450:	fa04 f403 	lsl.w	r4, r4, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x258>
 8000456:	eb1c 0101 	adds.w	r1, ip, r1
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000460:	428d      	cmp	r5, r1
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000464:	3802      	subs	r0, #2
 8000466:	4461      	add	r1, ip
 8000468:	1b49      	subs	r1, r1, r5
 800046a:	b292      	uxth	r2, r2
 800046c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000470:	fb07 1115 	mls	r1, r7, r5, r1
 8000474:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000478:	fb05 f10e 	mul.w	r1, r5, lr
 800047c:	4291      	cmp	r1, r2
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x282>
 8000480:	eb1c 0202 	adds.w	r2, ip, r2
 8000484:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 800048a:	4291      	cmp	r1, r2
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800048e:	3d02      	subs	r5, #2
 8000490:	4462      	add	r2, ip
 8000492:	1a52      	subs	r2, r2, r1
 8000494:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0xfc>
 800049a:	4631      	mov	r1, r6
 800049c:	4630      	mov	r0, r6
 800049e:	e708      	b.n	80002b2 <__udivmoddi4+0xa2>
 80004a0:	4639      	mov	r1, r7
 80004a2:	e6e6      	b.n	8000272 <__udivmoddi4+0x62>
 80004a4:	4610      	mov	r0, r2
 80004a6:	e6fb      	b.n	80002a0 <__udivmoddi4+0x90>
 80004a8:	4548      	cmp	r0, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004b4:	3b01      	subs	r3, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b8:	4645      	mov	r5, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x282>
 80004bc:	462b      	mov	r3, r5
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1da>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x258>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c8:	3d02      	subs	r5, #2
 80004ca:	4462      	add	r2, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x124>
 80004ce:	4608      	mov	r0, r1
 80004d0:	e70a      	b.n	80002e8 <__udivmoddi4+0xd8>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x14e>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e2:	f000 fb6d 	bl	8000bc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e6:	f000 f849 	bl	800057c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ea:	f000 f8dd 	bl	80006a8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80004ee:	f000 f8b1 	bl	8000654 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit_IT(&huart1, (uint8_t *)"HELLO\n", 6);
 80004f2:	2206      	movs	r2, #6
 80004f4:	4917      	ldr	r1, [pc, #92]	; (8000554 <main+0x78>)
 80004f6:	4818      	ldr	r0, [pc, #96]	; (8000558 <main+0x7c>)
 80004f8:	f001 fe7d 	bl	80021f6 <HAL_UART_Transmit_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004fc:	f002 fdca 	bl	8003094 <osKernelInitialize>
  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  xQueue_serial_com_tx = xQueueCreate( 100 , 10);
 8000500:	2200      	movs	r2, #0
 8000502:	210a      	movs	r1, #10
 8000504:	2064      	movs	r0, #100	; 0x64
 8000506:	f003 f885 	bl	8003614 <xQueueGenericCreate>
 800050a:	4603      	mov	r3, r0
 800050c:	4a13      	ldr	r2, [pc, #76]	; (800055c <main+0x80>)
 800050e:	6013      	str	r3, [r2, #0]
  }
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000510:	4a13      	ldr	r2, [pc, #76]	; (8000560 <main+0x84>)
 8000512:	2100      	movs	r1, #0
 8000514:	4813      	ldr	r0, [pc, #76]	; (8000564 <main+0x88>)
 8000516:	f002 fe07 	bl	8003128 <osThreadNew>
 800051a:	4603      	mov	r3, r0
 800051c:	4a12      	ldr	r2, [pc, #72]	; (8000568 <main+0x8c>)
 800051e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  xTaskCreate( led_task, "LED TASK", 400, NULL, 0, NULL );
 8000520:	2300      	movs	r3, #0
 8000522:	9301      	str	r3, [sp, #4]
 8000524:	2300      	movs	r3, #0
 8000526:	9300      	str	r3, [sp, #0]
 8000528:	2300      	movs	r3, #0
 800052a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800052e:	490f      	ldr	r1, [pc, #60]	; (800056c <main+0x90>)
 8000530:	480f      	ldr	r0, [pc, #60]	; (8000570 <main+0x94>)
 8000532:	f003 fd12 	bl	8003f5a <xTaskCreate>
  xTaskCreate( task_serial_com, "SERIAL COM TASK", 400, NULL, 0, NULL );
 8000536:	2300      	movs	r3, #0
 8000538:	9301      	str	r3, [sp, #4]
 800053a:	2300      	movs	r3, #0
 800053c:	9300      	str	r3, [sp, #0]
 800053e:	2300      	movs	r3, #0
 8000540:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000544:	490b      	ldr	r1, [pc, #44]	; (8000574 <main+0x98>)
 8000546:	480c      	ldr	r0, [pc, #48]	; (8000578 <main+0x9c>)
 8000548:	f003 fd07 	bl	8003f5a <xTaskCreate>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800054c:	f002 fdc6 	bl	80030dc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000550:	e7fe      	b.n	8000550 <main+0x74>
 8000552:	bf00      	nop
 8000554:	08005df4 	.word	0x08005df4
 8000558:	20000080 	.word	0x20000080
 800055c:	2000007c 	.word	0x2000007c
 8000560:	08005e48 	.word	0x08005e48
 8000564:	080007b5 	.word	0x080007b5
 8000568:	200000c4 	.word	0x200000c4
 800056c:	08005dfc 	.word	0x08005dfc
 8000570:	08000a9d 	.word	0x08000a9d
 8000574:	08005e08 	.word	0x08005e08
 8000578:	08000b25 	.word	0x08000b25

0800057c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b094      	sub	sp, #80	; 0x50
 8000580:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000582:	f107 0320 	add.w	r3, r7, #32
 8000586:	2230      	movs	r2, #48	; 0x30
 8000588:	2100      	movs	r1, #0
 800058a:	4618      	mov	r0, r3
 800058c:	f005 fb36 	bl	8005bfc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000590:	f107 030c 	add.w	r3, r7, #12
 8000594:	2200      	movs	r2, #0
 8000596:	601a      	str	r2, [r3, #0]
 8000598:	605a      	str	r2, [r3, #4]
 800059a:	609a      	str	r2, [r3, #8]
 800059c:	60da      	str	r2, [r3, #12]
 800059e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005a0:	2300      	movs	r3, #0
 80005a2:	60bb      	str	r3, [r7, #8]
 80005a4:	4b29      	ldr	r3, [pc, #164]	; (800064c <SystemClock_Config+0xd0>)
 80005a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a8:	4a28      	ldr	r2, [pc, #160]	; (800064c <SystemClock_Config+0xd0>)
 80005aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ae:	6413      	str	r3, [r2, #64]	; 0x40
 80005b0:	4b26      	ldr	r3, [pc, #152]	; (800064c <SystemClock_Config+0xd0>)
 80005b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005b8:	60bb      	str	r3, [r7, #8]
 80005ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80005bc:	2300      	movs	r3, #0
 80005be:	607b      	str	r3, [r7, #4]
 80005c0:	4b23      	ldr	r3, [pc, #140]	; (8000650 <SystemClock_Config+0xd4>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005c8:	4a21      	ldr	r2, [pc, #132]	; (8000650 <SystemClock_Config+0xd4>)
 80005ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80005ce:	6013      	str	r3, [r2, #0]
 80005d0:	4b1f      	ldr	r3, [pc, #124]	; (8000650 <SystemClock_Config+0xd4>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005d8:	607b      	str	r3, [r7, #4]
 80005da:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005dc:	2302      	movs	r3, #2
 80005de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005e0:	2301      	movs	r3, #1
 80005e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005e4:	2310      	movs	r3, #16
 80005e6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005e8:	2302      	movs	r3, #2
 80005ea:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005ec:	2300      	movs	r3, #0
 80005ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80005f0:	2310      	movs	r3, #16
 80005f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005f4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005f8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005fa:	2304      	movs	r3, #4
 80005fc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005fe:	2307      	movs	r3, #7
 8000600:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000602:	f107 0320 	add.w	r3, r7, #32
 8000606:	4618      	mov	r0, r3
 8000608:	f000 fe5e 	bl	80012c8 <HAL_RCC_OscConfig>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000612:	f000 f8e9 	bl	80007e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000616:	230f      	movs	r3, #15
 8000618:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800061a:	2302      	movs	r3, #2
 800061c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800061e:	2300      	movs	r3, #0
 8000620:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000622:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000626:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000628:	2300      	movs	r3, #0
 800062a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800062c:	f107 030c 	add.w	r3, r7, #12
 8000630:	2102      	movs	r1, #2
 8000632:	4618      	mov	r0, r3
 8000634:	f001 f8c0 	bl	80017b8 <HAL_RCC_ClockConfig>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800063e:	f000 f8d3 	bl	80007e8 <Error_Handler>
  }
}
 8000642:	bf00      	nop
 8000644:	3750      	adds	r7, #80	; 0x50
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	40023800 	.word	0x40023800
 8000650:	40007000 	.word	0x40007000

08000654 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000658:	4b11      	ldr	r3, [pc, #68]	; (80006a0 <MX_USART1_UART_Init+0x4c>)
 800065a:	4a12      	ldr	r2, [pc, #72]	; (80006a4 <MX_USART1_UART_Init+0x50>)
 800065c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800065e:	4b10      	ldr	r3, [pc, #64]	; (80006a0 <MX_USART1_UART_Init+0x4c>)
 8000660:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000664:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000666:	4b0e      	ldr	r3, [pc, #56]	; (80006a0 <MX_USART1_UART_Init+0x4c>)
 8000668:	2200      	movs	r2, #0
 800066a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800066c:	4b0c      	ldr	r3, [pc, #48]	; (80006a0 <MX_USART1_UART_Init+0x4c>)
 800066e:	2200      	movs	r2, #0
 8000670:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000672:	4b0b      	ldr	r3, [pc, #44]	; (80006a0 <MX_USART1_UART_Init+0x4c>)
 8000674:	2200      	movs	r2, #0
 8000676:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000678:	4b09      	ldr	r3, [pc, #36]	; (80006a0 <MX_USART1_UART_Init+0x4c>)
 800067a:	220c      	movs	r2, #12
 800067c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800067e:	4b08      	ldr	r3, [pc, #32]	; (80006a0 <MX_USART1_UART_Init+0x4c>)
 8000680:	2200      	movs	r2, #0
 8000682:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000684:	4b06      	ldr	r3, [pc, #24]	; (80006a0 <MX_USART1_UART_Init+0x4c>)
 8000686:	2200      	movs	r2, #0
 8000688:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800068a:	4805      	ldr	r0, [pc, #20]	; (80006a0 <MX_USART1_UART_Init+0x4c>)
 800068c:	f001 fd66 	bl	800215c <HAL_UART_Init>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000696:	f000 f8a7 	bl	80007e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800069a:	bf00      	nop
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	20000080 	.word	0x20000080
 80006a4:	40011000 	.word	0x40011000

080006a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b08a      	sub	sp, #40	; 0x28
 80006ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ae:	f107 0314 	add.w	r3, r7, #20
 80006b2:	2200      	movs	r2, #0
 80006b4:	601a      	str	r2, [r3, #0]
 80006b6:	605a      	str	r2, [r3, #4]
 80006b8:	609a      	str	r2, [r3, #8]
 80006ba:	60da      	str	r2, [r3, #12]
 80006bc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006be:	2300      	movs	r3, #0
 80006c0:	613b      	str	r3, [r7, #16]
 80006c2:	4b39      	ldr	r3, [pc, #228]	; (80007a8 <MX_GPIO_Init+0x100>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c6:	4a38      	ldr	r2, [pc, #224]	; (80007a8 <MX_GPIO_Init+0x100>)
 80006c8:	f043 0304 	orr.w	r3, r3, #4
 80006cc:	6313      	str	r3, [r2, #48]	; 0x30
 80006ce:	4b36      	ldr	r3, [pc, #216]	; (80007a8 <MX_GPIO_Init+0x100>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d2:	f003 0304 	and.w	r3, r3, #4
 80006d6:	613b      	str	r3, [r7, #16]
 80006d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006da:	2300      	movs	r3, #0
 80006dc:	60fb      	str	r3, [r7, #12]
 80006de:	4b32      	ldr	r3, [pc, #200]	; (80007a8 <MX_GPIO_Init+0x100>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e2:	4a31      	ldr	r2, [pc, #196]	; (80007a8 <MX_GPIO_Init+0x100>)
 80006e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006e8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ea:	4b2f      	ldr	r3, [pc, #188]	; (80007a8 <MX_GPIO_Init+0x100>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006f2:	60fb      	str	r3, [r7, #12]
 80006f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f6:	2300      	movs	r3, #0
 80006f8:	60bb      	str	r3, [r7, #8]
 80006fa:	4b2b      	ldr	r3, [pc, #172]	; (80007a8 <MX_GPIO_Init+0x100>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	4a2a      	ldr	r2, [pc, #168]	; (80007a8 <MX_GPIO_Init+0x100>)
 8000700:	f043 0301 	orr.w	r3, r3, #1
 8000704:	6313      	str	r3, [r2, #48]	; 0x30
 8000706:	4b28      	ldr	r3, [pc, #160]	; (80007a8 <MX_GPIO_Init+0x100>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	f003 0301 	and.w	r3, r3, #1
 800070e:	60bb      	str	r3, [r7, #8]
 8000710:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000712:	2300      	movs	r3, #0
 8000714:	607b      	str	r3, [r7, #4]
 8000716:	4b24      	ldr	r3, [pc, #144]	; (80007a8 <MX_GPIO_Init+0x100>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	4a23      	ldr	r2, [pc, #140]	; (80007a8 <MX_GPIO_Init+0x100>)
 800071c:	f043 0302 	orr.w	r3, r3, #2
 8000720:	6313      	str	r3, [r2, #48]	; 0x30
 8000722:	4b21      	ldr	r3, [pc, #132]	; (80007a8 <MX_GPIO_Init+0x100>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	f003 0302 	and.w	r3, r3, #2
 800072a:	607b      	str	r3, [r7, #4]
 800072c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800072e:	2200      	movs	r2, #0
 8000730:	2120      	movs	r1, #32
 8000732:	481e      	ldr	r0, [pc, #120]	; (80007ac <MX_GPIO_Init+0x104>)
 8000734:	f000 fd96 	bl	8001264 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000738:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800073c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800073e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000742:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000744:	2300      	movs	r3, #0
 8000746:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000748:	f107 0314 	add.w	r3, r7, #20
 800074c:	4619      	mov	r1, r3
 800074e:	4818      	ldr	r0, [pc, #96]	; (80007b0 <MX_GPIO_Init+0x108>)
 8000750:	f000 fbec 	bl	8000f2c <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000754:	230c      	movs	r3, #12
 8000756:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000758:	2302      	movs	r3, #2
 800075a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075c:	2300      	movs	r3, #0
 800075e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000760:	2300      	movs	r3, #0
 8000762:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000764:	2307      	movs	r3, #7
 8000766:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000768:	f107 0314 	add.w	r3, r7, #20
 800076c:	4619      	mov	r1, r3
 800076e:	480f      	ldr	r0, [pc, #60]	; (80007ac <MX_GPIO_Init+0x104>)
 8000770:	f000 fbdc 	bl	8000f2c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000774:	2320      	movs	r3, #32
 8000776:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000778:	2301      	movs	r3, #1
 800077a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077c:	2300      	movs	r3, #0
 800077e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000780:	2300      	movs	r3, #0
 8000782:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000784:	f107 0314 	add.w	r3, r7, #20
 8000788:	4619      	mov	r1, r3
 800078a:	4808      	ldr	r0, [pc, #32]	; (80007ac <MX_GPIO_Init+0x104>)
 800078c:	f000 fbce 	bl	8000f2c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000790:	2200      	movs	r2, #0
 8000792:	2105      	movs	r1, #5
 8000794:	2028      	movs	r0, #40	; 0x28
 8000796:	f000 fb0d 	bl	8000db4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800079a:	2028      	movs	r0, #40	; 0x28
 800079c:	f000 fb26 	bl	8000dec <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007a0:	bf00      	nop
 80007a2:	3728      	adds	r7, #40	; 0x28
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	40023800 	.word	0x40023800
 80007ac:	40020000 	.word	0x40020000
 80007b0:	40020800 	.word	0x40020800

080007b4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80007bc:	2001      	movs	r0, #1
 80007be:	f002 fd45 	bl	800324c <osDelay>
 80007c2:	e7fb      	b.n	80007bc <StartDefaultTask+0x8>

080007c4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4a04      	ldr	r2, [pc, #16]	; (80007e4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007d2:	4293      	cmp	r3, r2
 80007d4:	d101      	bne.n	80007da <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007d6:	f000 fa15 	bl	8000c04 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007da:	bf00      	nop
 80007dc:	3708      	adds	r7, #8
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	40010000 	.word	0x40010000

080007e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007ec:	b672      	cpsid	i
}
 80007ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007f0:	e7fe      	b.n	80007f0 <Error_Handler+0x8>
	...

080007f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	607b      	str	r3, [r7, #4]
 80007fe:	4b12      	ldr	r3, [pc, #72]	; (8000848 <HAL_MspInit+0x54>)
 8000800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000802:	4a11      	ldr	r2, [pc, #68]	; (8000848 <HAL_MspInit+0x54>)
 8000804:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000808:	6453      	str	r3, [r2, #68]	; 0x44
 800080a:	4b0f      	ldr	r3, [pc, #60]	; (8000848 <HAL_MspInit+0x54>)
 800080c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800080e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000812:	607b      	str	r3, [r7, #4]
 8000814:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	603b      	str	r3, [r7, #0]
 800081a:	4b0b      	ldr	r3, [pc, #44]	; (8000848 <HAL_MspInit+0x54>)
 800081c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800081e:	4a0a      	ldr	r2, [pc, #40]	; (8000848 <HAL_MspInit+0x54>)
 8000820:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000824:	6413      	str	r3, [r2, #64]	; 0x40
 8000826:	4b08      	ldr	r3, [pc, #32]	; (8000848 <HAL_MspInit+0x54>)
 8000828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800082e:	603b      	str	r3, [r7, #0]
 8000830:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000832:	2200      	movs	r2, #0
 8000834:	210f      	movs	r1, #15
 8000836:	f06f 0001 	mvn.w	r0, #1
 800083a:	f000 fabb 	bl	8000db4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800083e:	bf00      	nop
 8000840:	3708      	adds	r7, #8
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	40023800 	.word	0x40023800

0800084c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b08a      	sub	sp, #40	; 0x28
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000854:	f107 0314 	add.w	r3, r7, #20
 8000858:	2200      	movs	r2, #0
 800085a:	601a      	str	r2, [r3, #0]
 800085c:	605a      	str	r2, [r3, #4]
 800085e:	609a      	str	r2, [r3, #8]
 8000860:	60da      	str	r2, [r3, #12]
 8000862:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a1d      	ldr	r2, [pc, #116]	; (80008e0 <HAL_UART_MspInit+0x94>)
 800086a:	4293      	cmp	r3, r2
 800086c:	d134      	bne.n	80008d8 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800086e:	2300      	movs	r3, #0
 8000870:	613b      	str	r3, [r7, #16]
 8000872:	4b1c      	ldr	r3, [pc, #112]	; (80008e4 <HAL_UART_MspInit+0x98>)
 8000874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000876:	4a1b      	ldr	r2, [pc, #108]	; (80008e4 <HAL_UART_MspInit+0x98>)
 8000878:	f043 0310 	orr.w	r3, r3, #16
 800087c:	6453      	str	r3, [r2, #68]	; 0x44
 800087e:	4b19      	ldr	r3, [pc, #100]	; (80008e4 <HAL_UART_MspInit+0x98>)
 8000880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000882:	f003 0310 	and.w	r3, r3, #16
 8000886:	613b      	str	r3, [r7, #16]
 8000888:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	60fb      	str	r3, [r7, #12]
 800088e:	4b15      	ldr	r3, [pc, #84]	; (80008e4 <HAL_UART_MspInit+0x98>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	4a14      	ldr	r2, [pc, #80]	; (80008e4 <HAL_UART_MspInit+0x98>)
 8000894:	f043 0301 	orr.w	r3, r3, #1
 8000898:	6313      	str	r3, [r2, #48]	; 0x30
 800089a:	4b12      	ldr	r3, [pc, #72]	; (80008e4 <HAL_UART_MspInit+0x98>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	f003 0301 	and.w	r3, r3, #1
 80008a2:	60fb      	str	r3, [r7, #12]
 80008a4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80008a6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80008aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ac:	2302      	movs	r3, #2
 80008ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b0:	2300      	movs	r3, #0
 80008b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008b4:	2303      	movs	r3, #3
 80008b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80008b8:	2307      	movs	r3, #7
 80008ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008bc:	f107 0314 	add.w	r3, r7, #20
 80008c0:	4619      	mov	r1, r3
 80008c2:	4809      	ldr	r0, [pc, #36]	; (80008e8 <HAL_UART_MspInit+0x9c>)
 80008c4:	f000 fb32 	bl	8000f2c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80008c8:	2200      	movs	r2, #0
 80008ca:	2105      	movs	r1, #5
 80008cc:	2025      	movs	r0, #37	; 0x25
 80008ce:	f000 fa71 	bl	8000db4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80008d2:	2025      	movs	r0, #37	; 0x25
 80008d4:	f000 fa8a 	bl	8000dec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80008d8:	bf00      	nop
 80008da:	3728      	adds	r7, #40	; 0x28
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	40011000 	.word	0x40011000
 80008e4:	40023800 	.word	0x40023800
 80008e8:	40020000 	.word	0x40020000

080008ec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b08c      	sub	sp, #48	; 0x30
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80008f4:	2300      	movs	r3, #0
 80008f6:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80008f8:	2300      	movs	r3, #0
 80008fa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80008fc:	2300      	movs	r3, #0
 80008fe:	60bb      	str	r3, [r7, #8]
 8000900:	4b2e      	ldr	r3, [pc, #184]	; (80009bc <HAL_InitTick+0xd0>)
 8000902:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000904:	4a2d      	ldr	r2, [pc, #180]	; (80009bc <HAL_InitTick+0xd0>)
 8000906:	f043 0301 	orr.w	r3, r3, #1
 800090a:	6453      	str	r3, [r2, #68]	; 0x44
 800090c:	4b2b      	ldr	r3, [pc, #172]	; (80009bc <HAL_InitTick+0xd0>)
 800090e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000910:	f003 0301 	and.w	r3, r3, #1
 8000914:	60bb      	str	r3, [r7, #8]
 8000916:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000918:	f107 020c 	add.w	r2, r7, #12
 800091c:	f107 0310 	add.w	r3, r7, #16
 8000920:	4611      	mov	r1, r2
 8000922:	4618      	mov	r0, r3
 8000924:	f001 f968 	bl	8001bf8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000928:	f001 f952 	bl	8001bd0 <HAL_RCC_GetPCLK2Freq>
 800092c:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800092e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000930:	4a23      	ldr	r2, [pc, #140]	; (80009c0 <HAL_InitTick+0xd4>)
 8000932:	fba2 2303 	umull	r2, r3, r2, r3
 8000936:	0c9b      	lsrs	r3, r3, #18
 8000938:	3b01      	subs	r3, #1
 800093a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800093c:	4b21      	ldr	r3, [pc, #132]	; (80009c4 <HAL_InitTick+0xd8>)
 800093e:	4a22      	ldr	r2, [pc, #136]	; (80009c8 <HAL_InitTick+0xdc>)
 8000940:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000942:	4b20      	ldr	r3, [pc, #128]	; (80009c4 <HAL_InitTick+0xd8>)
 8000944:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000948:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800094a:	4a1e      	ldr	r2, [pc, #120]	; (80009c4 <HAL_InitTick+0xd8>)
 800094c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800094e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000950:	4b1c      	ldr	r3, [pc, #112]	; (80009c4 <HAL_InitTick+0xd8>)
 8000952:	2200      	movs	r2, #0
 8000954:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000956:	4b1b      	ldr	r3, [pc, #108]	; (80009c4 <HAL_InitTick+0xd8>)
 8000958:	2200      	movs	r2, #0
 800095a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800095c:	4b19      	ldr	r3, [pc, #100]	; (80009c4 <HAL_InitTick+0xd8>)
 800095e:	2200      	movs	r2, #0
 8000960:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000962:	4818      	ldr	r0, [pc, #96]	; (80009c4 <HAL_InitTick+0xd8>)
 8000964:	f001 f97a 	bl	8001c5c <HAL_TIM_Base_Init>
 8000968:	4603      	mov	r3, r0
 800096a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800096e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000972:	2b00      	cmp	r3, #0
 8000974:	d11b      	bne.n	80009ae <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000976:	4813      	ldr	r0, [pc, #76]	; (80009c4 <HAL_InitTick+0xd8>)
 8000978:	f001 f9ca 	bl	8001d10 <HAL_TIM_Base_Start_IT>
 800097c:	4603      	mov	r3, r0
 800097e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000982:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000986:	2b00      	cmp	r3, #0
 8000988:	d111      	bne.n	80009ae <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800098a:	2019      	movs	r0, #25
 800098c:	f000 fa2e 	bl	8000dec <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	2b0f      	cmp	r3, #15
 8000994:	d808      	bhi.n	80009a8 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000996:	2200      	movs	r2, #0
 8000998:	6879      	ldr	r1, [r7, #4]
 800099a:	2019      	movs	r0, #25
 800099c:	f000 fa0a 	bl	8000db4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009a0:	4a0a      	ldr	r2, [pc, #40]	; (80009cc <HAL_InitTick+0xe0>)
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	6013      	str	r3, [r2, #0]
 80009a6:	e002      	b.n	80009ae <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80009a8:	2301      	movs	r3, #1
 80009aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80009ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	3730      	adds	r7, #48	; 0x30
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	40023800 	.word	0x40023800
 80009c0:	431bde83 	.word	0x431bde83
 80009c4:	200000c8 	.word	0x200000c8
 80009c8:	40010000 	.word	0x40010000
 80009cc:	20000004 	.word	0x20000004

080009d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009d4:	e7fe      	b.n	80009d4 <NMI_Handler+0x4>

080009d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009d6:	b480      	push	{r7}
 80009d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009da:	e7fe      	b.n	80009da <HardFault_Handler+0x4>

080009dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009e0:	e7fe      	b.n	80009e0 <MemManage_Handler+0x4>

080009e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009e2:	b480      	push	{r7}
 80009e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009e6:	e7fe      	b.n	80009e6 <BusFault_Handler+0x4>

080009e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009ec:	e7fe      	b.n	80009ec <UsageFault_Handler+0x4>

080009ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009ee:	b480      	push	{r7}
 80009f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009f2:	bf00      	nop
 80009f4:	46bd      	mov	sp, r7
 80009f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fa:	4770      	bx	lr

080009fc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a00:	4802      	ldr	r0, [pc, #8]	; (8000a0c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000a02:	f001 f9e7 	bl	8001dd4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000a06:	bf00      	nop
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	200000c8 	.word	0x200000c8

08000a10 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000a14:	4802      	ldr	r0, [pc, #8]	; (8000a20 <USART1_IRQHandler+0x10>)
 8000a16:	f001 fc33 	bl	8002280 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000a1a:	bf00      	nop
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	20000080 	.word	0x20000080

08000a24 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000a28:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000a2c:	f000 fc34 	bl	8001298 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000a30:	bf00      	nop
 8000a32:	bd80      	pop	{r7, pc}

08000a34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a38:	4b06      	ldr	r3, [pc, #24]	; (8000a54 <SystemInit+0x20>)
 8000a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a3e:	4a05      	ldr	r2, [pc, #20]	; (8000a54 <SystemInit+0x20>)
 8000a40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a48:	bf00      	nop
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	e000ed00 	.word	0xe000ed00

08000a58 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b084      	sub	sp, #16
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	4603      	mov	r3, r0
 8000a60:	80fb      	strh	r3, [r7, #6]
	static uint8_t count;
	GPIO_PinState bitstatus;
	if(GPIO_Pin == GPIO_PIN_13){
 8000a62:	88fb      	ldrh	r3, [r7, #6]
 8000a64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a68:	d10f      	bne.n	8000a8a <HAL_GPIO_EXTI_Callback+0x32>

		bitstatus = HAL_GPIO_ReadPin(TMS_GPIO_Port, GPIO_PIN_13);
 8000a6a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a6e:	4809      	ldr	r0, [pc, #36]	; (8000a94 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000a70:	f000 fbe0 	bl	8001234 <HAL_GPIO_ReadPin>
 8000a74:	4603      	mov	r3, r0
 8000a76:	73fb      	strb	r3, [r7, #15]

		  if( bitstatus == GPIO_PIN_SET){
 8000a78:	7bfb      	ldrb	r3, [r7, #15]
 8000a7a:	2b01      	cmp	r3, #1
 8000a7c:	d105      	bne.n	8000a8a <HAL_GPIO_EXTI_Callback+0x32>
			  count++;
 8000a7e:	4b06      	ldr	r3, [pc, #24]	; (8000a98 <HAL_GPIO_EXTI_Callback+0x40>)
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	3301      	adds	r3, #1
 8000a84:	b2da      	uxtb	r2, r3
 8000a86:	4b04      	ldr	r3, [pc, #16]	; (8000a98 <HAL_GPIO_EXTI_Callback+0x40>)
 8000a88:	701a      	strb	r2, [r3, #0]

	}else{

	}

}
 8000a8a:	bf00      	nop
 8000a8c:	3710      	adds	r7, #16
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	40020000 	.word	0x40020000
 8000a98:	20000110 	.word	0x20000110

08000a9c <led_task>:
#include "task_led.h"
#include "queue.h"

extern QueueHandle_t xQueue_serial_com_tx;

void led_task(void * pvParameters){
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]

	while(1){
		LED(ON);
 8000aa4:	2000      	movs	r0, #0
 8000aa6:	f000 f821 	bl	8000aec <LED>
		xQueueSend(xQueue_serial_com_tx, "LED ON\n\r", 1 );
 8000aaa:	4b0d      	ldr	r3, [pc, #52]	; (8000ae0 <led_task+0x44>)
 8000aac:	6818      	ldr	r0, [r3, #0]
 8000aae:	2300      	movs	r3, #0
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	490c      	ldr	r1, [pc, #48]	; (8000ae4 <led_task+0x48>)
 8000ab4:	f002 fe0c 	bl	80036d0 <xQueueGenericSend>
		vTaskDelay( 1000 );
 8000ab8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000abc:	f003 fba8 	bl	8004210 <vTaskDelay>
		LED(OFF);
 8000ac0:	2001      	movs	r0, #1
 8000ac2:	f000 f813 	bl	8000aec <LED>
		xQueueSend(xQueue_serial_com_tx, "LED OFF\n\r", 1 );
 8000ac6:	4b06      	ldr	r3, [pc, #24]	; (8000ae0 <led_task+0x44>)
 8000ac8:	6818      	ldr	r0, [r3, #0]
 8000aca:	2300      	movs	r3, #0
 8000acc:	2201      	movs	r2, #1
 8000ace:	4906      	ldr	r1, [pc, #24]	; (8000ae8 <led_task+0x4c>)
 8000ad0:	f002 fdfe 	bl	80036d0 <xQueueGenericSend>
		vTaskDelay( 1000 );
 8000ad4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ad8:	f003 fb9a 	bl	8004210 <vTaskDelay>
		LED(ON);
 8000adc:	e7e2      	b.n	8000aa4 <led_task+0x8>
 8000ade:	bf00      	nop
 8000ae0:	2000007c 	.word	0x2000007c
 8000ae4:	08005e18 	.word	0x08005e18
 8000ae8:	08005e24 	.word	0x08005e24

08000aec <LED>:
	}

}

void LED(led_state state){
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	4603      	mov	r3, r0
 8000af4:	71fb      	strb	r3, [r7, #7]
	if(state == ON) HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000af6:	79fb      	ldrb	r3, [r7, #7]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d105      	bne.n	8000b08 <LED+0x1c>
 8000afc:	2201      	movs	r2, #1
 8000afe:	2120      	movs	r1, #32
 8000b00:	4807      	ldr	r0, [pc, #28]	; (8000b20 <LED+0x34>)
 8000b02:	f000 fbaf 	bl	8001264 <HAL_GPIO_WritePin>
	else if(state == OFF)  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
	else{}
}
 8000b06:	e007      	b.n	8000b18 <LED+0x2c>
	else if(state == OFF)  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b08:	79fb      	ldrb	r3, [r7, #7]
 8000b0a:	2b01      	cmp	r3, #1
 8000b0c:	d104      	bne.n	8000b18 <LED+0x2c>
 8000b0e:	2200      	movs	r2, #0
 8000b10:	2120      	movs	r1, #32
 8000b12:	4803      	ldr	r0, [pc, #12]	; (8000b20 <LED+0x34>)
 8000b14:	f000 fba6 	bl	8001264 <HAL_GPIO_WritePin>
}
 8000b18:	bf00      	nop
 8000b1a:	3708      	adds	r7, #8
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	40020000 	.word	0x40020000

08000b24 <task_serial_com>:
#include "queue.h"

extern QueueHandle_t xQueue_serial_com_tx;
extern UART_HandleTypeDef huart1;

void task_serial_com(void * pvParameters){
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b086      	sub	sp, #24
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
	BaseType_t status;
	uint8_t data[10] = {0};
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	60bb      	str	r3, [r7, #8]
 8000b30:	f107 030c 	add.w	r3, r7, #12
 8000b34:	2200      	movs	r2, #0
 8000b36:	601a      	str	r2, [r3, #0]
 8000b38:	809a      	strh	r2, [r3, #4]
	while(1){
		status = xQueueReceive( xQueue_serial_com_tx, data, 1 );
 8000b3a:	4b0a      	ldr	r3, [pc, #40]	; (8000b64 <task_serial_com+0x40>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	f107 0108 	add.w	r1, r7, #8
 8000b42:	2201      	movs	r2, #1
 8000b44:	4618      	mov	r0, r3
 8000b46:	f002 ff5d 	bl	8003a04 <xQueueReceive>
 8000b4a:	6178      	str	r0, [r7, #20]
		if(status == pdPASS) HAL_UART_Transmit_IT(&huart1, data, 10);
 8000b4c:	697b      	ldr	r3, [r7, #20]
 8000b4e:	2b01      	cmp	r3, #1
 8000b50:	d1f3      	bne.n	8000b3a <task_serial_com+0x16>
 8000b52:	f107 0308 	add.w	r3, r7, #8
 8000b56:	220a      	movs	r2, #10
 8000b58:	4619      	mov	r1, r3
 8000b5a:	4803      	ldr	r0, [pc, #12]	; (8000b68 <task_serial_com+0x44>)
 8000b5c:	f001 fb4b 	bl	80021f6 <HAL_UART_Transmit_IT>
		status = xQueueReceive( xQueue_serial_com_tx, data, 1 );
 8000b60:	e7eb      	b.n	8000b3a <task_serial_com+0x16>
 8000b62:	bf00      	nop
 8000b64:	2000007c 	.word	0x2000007c
 8000b68:	20000080 	.word	0x20000080

08000b6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ba4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b70:	480d      	ldr	r0, [pc, #52]	; (8000ba8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b72:	490e      	ldr	r1, [pc, #56]	; (8000bac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b74:	4a0e      	ldr	r2, [pc, #56]	; (8000bb0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b78:	e002      	b.n	8000b80 <LoopCopyDataInit>

08000b7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b7e:	3304      	adds	r3, #4

08000b80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b84:	d3f9      	bcc.n	8000b7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b86:	4a0b      	ldr	r2, [pc, #44]	; (8000bb4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b88:	4c0b      	ldr	r4, [pc, #44]	; (8000bb8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b8c:	e001      	b.n	8000b92 <LoopFillZerobss>

08000b8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b90:	3204      	adds	r2, #4

08000b92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b94:	d3fb      	bcc.n	8000b8e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b96:	f7ff ff4d 	bl	8000a34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b9a:	f005 f88d 	bl	8005cb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b9e:	f7ff fc9d 	bl	80004dc <main>
  bx  lr    
 8000ba2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ba4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000ba8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bac:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000bb0:	08005e94 	.word	0x08005e94
  ldr r2, =_sbss
 8000bb4:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000bb8:	20004c40 	.word	0x20004c40

08000bbc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bbc:	e7fe      	b.n	8000bbc <ADC_IRQHandler>
	...

08000bc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bc4:	4b0e      	ldr	r3, [pc, #56]	; (8000c00 <HAL_Init+0x40>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a0d      	ldr	r2, [pc, #52]	; (8000c00 <HAL_Init+0x40>)
 8000bca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bd0:	4b0b      	ldr	r3, [pc, #44]	; (8000c00 <HAL_Init+0x40>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a0a      	ldr	r2, [pc, #40]	; (8000c00 <HAL_Init+0x40>)
 8000bd6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bda:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bdc:	4b08      	ldr	r3, [pc, #32]	; (8000c00 <HAL_Init+0x40>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a07      	ldr	r2, [pc, #28]	; (8000c00 <HAL_Init+0x40>)
 8000be2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000be6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000be8:	2003      	movs	r0, #3
 8000bea:	f000 f8d8 	bl	8000d9e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bee:	200f      	movs	r0, #15
 8000bf0:	f7ff fe7c 	bl	80008ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bf4:	f7ff fdfe 	bl	80007f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bf8:	2300      	movs	r3, #0
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	40023c00 	.word	0x40023c00

08000c04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c08:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <HAL_IncTick+0x20>)
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	461a      	mov	r2, r3
 8000c0e:	4b06      	ldr	r3, [pc, #24]	; (8000c28 <HAL_IncTick+0x24>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4413      	add	r3, r2
 8000c14:	4a04      	ldr	r2, [pc, #16]	; (8000c28 <HAL_IncTick+0x24>)
 8000c16:	6013      	str	r3, [r2, #0]
}
 8000c18:	bf00      	nop
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	20000008 	.word	0x20000008
 8000c28:	20000114 	.word	0x20000114

08000c2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c30:	4b03      	ldr	r3, [pc, #12]	; (8000c40 <HAL_GetTick+0x14>)
 8000c32:	681b      	ldr	r3, [r3, #0]
}
 8000c34:	4618      	mov	r0, r3
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	20000114 	.word	0x20000114

08000c44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b085      	sub	sp, #20
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	f003 0307 	and.w	r3, r3, #7
 8000c52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c54:	4b0c      	ldr	r3, [pc, #48]	; (8000c88 <__NVIC_SetPriorityGrouping+0x44>)
 8000c56:	68db      	ldr	r3, [r3, #12]
 8000c58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c5a:	68ba      	ldr	r2, [r7, #8]
 8000c5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c60:	4013      	ands	r3, r2
 8000c62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c76:	4a04      	ldr	r2, [pc, #16]	; (8000c88 <__NVIC_SetPriorityGrouping+0x44>)
 8000c78:	68bb      	ldr	r3, [r7, #8]
 8000c7a:	60d3      	str	r3, [r2, #12]
}
 8000c7c:	bf00      	nop
 8000c7e:	3714      	adds	r7, #20
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr
 8000c88:	e000ed00 	.word	0xe000ed00

08000c8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c90:	4b04      	ldr	r3, [pc, #16]	; (8000ca4 <__NVIC_GetPriorityGrouping+0x18>)
 8000c92:	68db      	ldr	r3, [r3, #12]
 8000c94:	0a1b      	lsrs	r3, r3, #8
 8000c96:	f003 0307 	and.w	r3, r3, #7
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr
 8000ca4:	e000ed00 	.word	0xe000ed00

08000ca8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b083      	sub	sp, #12
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	4603      	mov	r3, r0
 8000cb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	db0b      	blt.n	8000cd2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cba:	79fb      	ldrb	r3, [r7, #7]
 8000cbc:	f003 021f 	and.w	r2, r3, #31
 8000cc0:	4907      	ldr	r1, [pc, #28]	; (8000ce0 <__NVIC_EnableIRQ+0x38>)
 8000cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc6:	095b      	lsrs	r3, r3, #5
 8000cc8:	2001      	movs	r0, #1
 8000cca:	fa00 f202 	lsl.w	r2, r0, r2
 8000cce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cd2:	bf00      	nop
 8000cd4:	370c      	adds	r7, #12
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	e000e100 	.word	0xe000e100

08000ce4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b083      	sub	sp, #12
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	4603      	mov	r3, r0
 8000cec:	6039      	str	r1, [r7, #0]
 8000cee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	db0a      	blt.n	8000d0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	b2da      	uxtb	r2, r3
 8000cfc:	490c      	ldr	r1, [pc, #48]	; (8000d30 <__NVIC_SetPriority+0x4c>)
 8000cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d02:	0112      	lsls	r2, r2, #4
 8000d04:	b2d2      	uxtb	r2, r2
 8000d06:	440b      	add	r3, r1
 8000d08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d0c:	e00a      	b.n	8000d24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	b2da      	uxtb	r2, r3
 8000d12:	4908      	ldr	r1, [pc, #32]	; (8000d34 <__NVIC_SetPriority+0x50>)
 8000d14:	79fb      	ldrb	r3, [r7, #7]
 8000d16:	f003 030f 	and.w	r3, r3, #15
 8000d1a:	3b04      	subs	r3, #4
 8000d1c:	0112      	lsls	r2, r2, #4
 8000d1e:	b2d2      	uxtb	r2, r2
 8000d20:	440b      	add	r3, r1
 8000d22:	761a      	strb	r2, [r3, #24]
}
 8000d24:	bf00      	nop
 8000d26:	370c      	adds	r7, #12
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr
 8000d30:	e000e100 	.word	0xe000e100
 8000d34:	e000ed00 	.word	0xe000ed00

08000d38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b089      	sub	sp, #36	; 0x24
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	60f8      	str	r0, [r7, #12]
 8000d40:	60b9      	str	r1, [r7, #8]
 8000d42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	f003 0307 	and.w	r3, r3, #7
 8000d4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d4c:	69fb      	ldr	r3, [r7, #28]
 8000d4e:	f1c3 0307 	rsb	r3, r3, #7
 8000d52:	2b04      	cmp	r3, #4
 8000d54:	bf28      	it	cs
 8000d56:	2304      	movcs	r3, #4
 8000d58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d5a:	69fb      	ldr	r3, [r7, #28]
 8000d5c:	3304      	adds	r3, #4
 8000d5e:	2b06      	cmp	r3, #6
 8000d60:	d902      	bls.n	8000d68 <NVIC_EncodePriority+0x30>
 8000d62:	69fb      	ldr	r3, [r7, #28]
 8000d64:	3b03      	subs	r3, #3
 8000d66:	e000      	b.n	8000d6a <NVIC_EncodePriority+0x32>
 8000d68:	2300      	movs	r3, #0
 8000d6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d70:	69bb      	ldr	r3, [r7, #24]
 8000d72:	fa02 f303 	lsl.w	r3, r2, r3
 8000d76:	43da      	mvns	r2, r3
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	401a      	ands	r2, r3
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d80:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	fa01 f303 	lsl.w	r3, r1, r3
 8000d8a:	43d9      	mvns	r1, r3
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d90:	4313      	orrs	r3, r2
         );
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	3724      	adds	r7, #36	; 0x24
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr

08000d9e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d9e:	b580      	push	{r7, lr}
 8000da0:	b082      	sub	sp, #8
 8000da2:	af00      	add	r7, sp, #0
 8000da4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000da6:	6878      	ldr	r0, [r7, #4]
 8000da8:	f7ff ff4c 	bl	8000c44 <__NVIC_SetPriorityGrouping>
}
 8000dac:	bf00      	nop
 8000dae:	3708      	adds	r7, #8
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}

08000db4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b086      	sub	sp, #24
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	4603      	mov	r3, r0
 8000dbc:	60b9      	str	r1, [r7, #8]
 8000dbe:	607a      	str	r2, [r7, #4]
 8000dc0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dc6:	f7ff ff61 	bl	8000c8c <__NVIC_GetPriorityGrouping>
 8000dca:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dcc:	687a      	ldr	r2, [r7, #4]
 8000dce:	68b9      	ldr	r1, [r7, #8]
 8000dd0:	6978      	ldr	r0, [r7, #20]
 8000dd2:	f7ff ffb1 	bl	8000d38 <NVIC_EncodePriority>
 8000dd6:	4602      	mov	r2, r0
 8000dd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ddc:	4611      	mov	r1, r2
 8000dde:	4618      	mov	r0, r3
 8000de0:	f7ff ff80 	bl	8000ce4 <__NVIC_SetPriority>
}
 8000de4:	bf00      	nop
 8000de6:	3718      	adds	r7, #24
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}

08000dec <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	4603      	mov	r3, r0
 8000df4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f7ff ff54 	bl	8000ca8 <__NVIC_EnableIRQ>
}
 8000e00:	bf00      	nop
 8000e02:	3708      	adds	r7, #8
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}

08000e08 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b084      	sub	sp, #16
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e14:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000e16:	f7ff ff09 	bl	8000c2c <HAL_GetTick>
 8000e1a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000e22:	b2db      	uxtb	r3, r3
 8000e24:	2b02      	cmp	r3, #2
 8000e26:	d008      	beq.n	8000e3a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	2280      	movs	r2, #128	; 0x80
 8000e2c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	2200      	movs	r2, #0
 8000e32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000e36:	2301      	movs	r3, #1
 8000e38:	e052      	b.n	8000ee0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	681a      	ldr	r2, [r3, #0]
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	f022 0216 	bic.w	r2, r2, #22
 8000e48:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	695a      	ldr	r2, [r3, #20]
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000e58:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d103      	bne.n	8000e6a <HAL_DMA_Abort+0x62>
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d007      	beq.n	8000e7a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	681a      	ldr	r2, [r3, #0]
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f022 0208 	bic.w	r2, r2, #8
 8000e78:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	681a      	ldr	r2, [r3, #0]
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f022 0201 	bic.w	r2, r2, #1
 8000e88:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e8a:	e013      	b.n	8000eb4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000e8c:	f7ff fece 	bl	8000c2c <HAL_GetTick>
 8000e90:	4602      	mov	r2, r0
 8000e92:	68bb      	ldr	r3, [r7, #8]
 8000e94:	1ad3      	subs	r3, r2, r3
 8000e96:	2b05      	cmp	r3, #5
 8000e98:	d90c      	bls.n	8000eb4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	2220      	movs	r2, #32
 8000e9e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	2203      	movs	r2, #3
 8000ea4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2200      	movs	r2, #0
 8000eac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000eb0:	2303      	movs	r3, #3
 8000eb2:	e015      	b.n	8000ee0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f003 0301 	and.w	r3, r3, #1
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d1e4      	bne.n	8000e8c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ec6:	223f      	movs	r2, #63	; 0x3f
 8000ec8:	409a      	lsls	r2, r3
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	2200      	movs	r2, #0
 8000eda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8000ede:	2300      	movs	r3, #0
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	3710      	adds	r7, #16
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}

08000ee8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000ef6:	b2db      	uxtb	r3, r3
 8000ef8:	2b02      	cmp	r3, #2
 8000efa:	d004      	beq.n	8000f06 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2280      	movs	r2, #128	; 0x80
 8000f00:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000f02:	2301      	movs	r3, #1
 8000f04:	e00c      	b.n	8000f20 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	2205      	movs	r2, #5
 8000f0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	681a      	ldr	r2, [r3, #0]
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f022 0201 	bic.w	r2, r2, #1
 8000f1c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000f1e:	2300      	movs	r3, #0
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	370c      	adds	r7, #12
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr

08000f2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b089      	sub	sp, #36	; 0x24
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
 8000f34:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f36:	2300      	movs	r3, #0
 8000f38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f42:	2300      	movs	r3, #0
 8000f44:	61fb      	str	r3, [r7, #28]
 8000f46:	e159      	b.n	80011fc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f48:	2201      	movs	r2, #1
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f50:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	697a      	ldr	r2, [r7, #20]
 8000f58:	4013      	ands	r3, r2
 8000f5a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f5c:	693a      	ldr	r2, [r7, #16]
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	429a      	cmp	r2, r3
 8000f62:	f040 8148 	bne.w	80011f6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	f003 0303 	and.w	r3, r3, #3
 8000f6e:	2b01      	cmp	r3, #1
 8000f70:	d005      	beq.n	8000f7e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f7a:	2b02      	cmp	r3, #2
 8000f7c:	d130      	bne.n	8000fe0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	689b      	ldr	r3, [r3, #8]
 8000f82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f84:	69fb      	ldr	r3, [r7, #28]
 8000f86:	005b      	lsls	r3, r3, #1
 8000f88:	2203      	movs	r2, #3
 8000f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8e:	43db      	mvns	r3, r3
 8000f90:	69ba      	ldr	r2, [r7, #24]
 8000f92:	4013      	ands	r3, r2
 8000f94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	68da      	ldr	r2, [r3, #12]
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	005b      	lsls	r3, r3, #1
 8000f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa2:	69ba      	ldr	r2, [r7, #24]
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	69ba      	ldr	r2, [r7, #24]
 8000fac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbc:	43db      	mvns	r3, r3
 8000fbe:	69ba      	ldr	r2, [r7, #24]
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	091b      	lsrs	r3, r3, #4
 8000fca:	f003 0201 	and.w	r2, r3, #1
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	69ba      	ldr	r2, [r7, #24]
 8000fde:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	f003 0303 	and.w	r3, r3, #3
 8000fe8:	2b03      	cmp	r3, #3
 8000fea:	d017      	beq.n	800101c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	68db      	ldr	r3, [r3, #12]
 8000ff0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	005b      	lsls	r3, r3, #1
 8000ff6:	2203      	movs	r2, #3
 8000ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffc:	43db      	mvns	r3, r3
 8000ffe:	69ba      	ldr	r2, [r7, #24]
 8001000:	4013      	ands	r3, r2
 8001002:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	689a      	ldr	r2, [r3, #8]
 8001008:	69fb      	ldr	r3, [r7, #28]
 800100a:	005b      	lsls	r3, r3, #1
 800100c:	fa02 f303 	lsl.w	r3, r2, r3
 8001010:	69ba      	ldr	r2, [r7, #24]
 8001012:	4313      	orrs	r3, r2
 8001014:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	69ba      	ldr	r2, [r7, #24]
 800101a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	f003 0303 	and.w	r3, r3, #3
 8001024:	2b02      	cmp	r3, #2
 8001026:	d123      	bne.n	8001070 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	08da      	lsrs	r2, r3, #3
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	3208      	adds	r2, #8
 8001030:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001034:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	f003 0307 	and.w	r3, r3, #7
 800103c:	009b      	lsls	r3, r3, #2
 800103e:	220f      	movs	r2, #15
 8001040:	fa02 f303 	lsl.w	r3, r2, r3
 8001044:	43db      	mvns	r3, r3
 8001046:	69ba      	ldr	r2, [r7, #24]
 8001048:	4013      	ands	r3, r2
 800104a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	691a      	ldr	r2, [r3, #16]
 8001050:	69fb      	ldr	r3, [r7, #28]
 8001052:	f003 0307 	and.w	r3, r3, #7
 8001056:	009b      	lsls	r3, r3, #2
 8001058:	fa02 f303 	lsl.w	r3, r2, r3
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	4313      	orrs	r3, r2
 8001060:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	08da      	lsrs	r2, r3, #3
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	3208      	adds	r2, #8
 800106a:	69b9      	ldr	r1, [r7, #24]
 800106c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	005b      	lsls	r3, r3, #1
 800107a:	2203      	movs	r2, #3
 800107c:	fa02 f303 	lsl.w	r3, r2, r3
 8001080:	43db      	mvns	r3, r3
 8001082:	69ba      	ldr	r2, [r7, #24]
 8001084:	4013      	ands	r3, r2
 8001086:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	f003 0203 	and.w	r2, r3, #3
 8001090:	69fb      	ldr	r3, [r7, #28]
 8001092:	005b      	lsls	r3, r3, #1
 8001094:	fa02 f303 	lsl.w	r3, r2, r3
 8001098:	69ba      	ldr	r2, [r7, #24]
 800109a:	4313      	orrs	r3, r2
 800109c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	69ba      	ldr	r2, [r7, #24]
 80010a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	f000 80a2 	beq.w	80011f6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010b2:	2300      	movs	r3, #0
 80010b4:	60fb      	str	r3, [r7, #12]
 80010b6:	4b57      	ldr	r3, [pc, #348]	; (8001214 <HAL_GPIO_Init+0x2e8>)
 80010b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ba:	4a56      	ldr	r2, [pc, #344]	; (8001214 <HAL_GPIO_Init+0x2e8>)
 80010bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010c0:	6453      	str	r3, [r2, #68]	; 0x44
 80010c2:	4b54      	ldr	r3, [pc, #336]	; (8001214 <HAL_GPIO_Init+0x2e8>)
 80010c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010ca:	60fb      	str	r3, [r7, #12]
 80010cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010ce:	4a52      	ldr	r2, [pc, #328]	; (8001218 <HAL_GPIO_Init+0x2ec>)
 80010d0:	69fb      	ldr	r3, [r7, #28]
 80010d2:	089b      	lsrs	r3, r3, #2
 80010d4:	3302      	adds	r3, #2
 80010d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	f003 0303 	and.w	r3, r3, #3
 80010e2:	009b      	lsls	r3, r3, #2
 80010e4:	220f      	movs	r2, #15
 80010e6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ea:	43db      	mvns	r3, r3
 80010ec:	69ba      	ldr	r2, [r7, #24]
 80010ee:	4013      	ands	r3, r2
 80010f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4a49      	ldr	r2, [pc, #292]	; (800121c <HAL_GPIO_Init+0x2f0>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d019      	beq.n	800112e <HAL_GPIO_Init+0x202>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4a48      	ldr	r2, [pc, #288]	; (8001220 <HAL_GPIO_Init+0x2f4>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d013      	beq.n	800112a <HAL_GPIO_Init+0x1fe>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4a47      	ldr	r2, [pc, #284]	; (8001224 <HAL_GPIO_Init+0x2f8>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d00d      	beq.n	8001126 <HAL_GPIO_Init+0x1fa>
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4a46      	ldr	r2, [pc, #280]	; (8001228 <HAL_GPIO_Init+0x2fc>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d007      	beq.n	8001122 <HAL_GPIO_Init+0x1f6>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	4a45      	ldr	r2, [pc, #276]	; (800122c <HAL_GPIO_Init+0x300>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d101      	bne.n	800111e <HAL_GPIO_Init+0x1f2>
 800111a:	2304      	movs	r3, #4
 800111c:	e008      	b.n	8001130 <HAL_GPIO_Init+0x204>
 800111e:	2307      	movs	r3, #7
 8001120:	e006      	b.n	8001130 <HAL_GPIO_Init+0x204>
 8001122:	2303      	movs	r3, #3
 8001124:	e004      	b.n	8001130 <HAL_GPIO_Init+0x204>
 8001126:	2302      	movs	r3, #2
 8001128:	e002      	b.n	8001130 <HAL_GPIO_Init+0x204>
 800112a:	2301      	movs	r3, #1
 800112c:	e000      	b.n	8001130 <HAL_GPIO_Init+0x204>
 800112e:	2300      	movs	r3, #0
 8001130:	69fa      	ldr	r2, [r7, #28]
 8001132:	f002 0203 	and.w	r2, r2, #3
 8001136:	0092      	lsls	r2, r2, #2
 8001138:	4093      	lsls	r3, r2
 800113a:	69ba      	ldr	r2, [r7, #24]
 800113c:	4313      	orrs	r3, r2
 800113e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001140:	4935      	ldr	r1, [pc, #212]	; (8001218 <HAL_GPIO_Init+0x2ec>)
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	089b      	lsrs	r3, r3, #2
 8001146:	3302      	adds	r3, #2
 8001148:	69ba      	ldr	r2, [r7, #24]
 800114a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800114e:	4b38      	ldr	r3, [pc, #224]	; (8001230 <HAL_GPIO_Init+0x304>)
 8001150:	689b      	ldr	r3, [r3, #8]
 8001152:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001154:	693b      	ldr	r3, [r7, #16]
 8001156:	43db      	mvns	r3, r3
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	4013      	ands	r3, r2
 800115c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001166:	2b00      	cmp	r3, #0
 8001168:	d003      	beq.n	8001172 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800116a:	69ba      	ldr	r2, [r7, #24]
 800116c:	693b      	ldr	r3, [r7, #16]
 800116e:	4313      	orrs	r3, r2
 8001170:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001172:	4a2f      	ldr	r2, [pc, #188]	; (8001230 <HAL_GPIO_Init+0x304>)
 8001174:	69bb      	ldr	r3, [r7, #24]
 8001176:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001178:	4b2d      	ldr	r3, [pc, #180]	; (8001230 <HAL_GPIO_Init+0x304>)
 800117a:	68db      	ldr	r3, [r3, #12]
 800117c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800117e:	693b      	ldr	r3, [r7, #16]
 8001180:	43db      	mvns	r3, r3
 8001182:	69ba      	ldr	r2, [r7, #24]
 8001184:	4013      	ands	r3, r2
 8001186:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001190:	2b00      	cmp	r3, #0
 8001192:	d003      	beq.n	800119c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001194:	69ba      	ldr	r2, [r7, #24]
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	4313      	orrs	r3, r2
 800119a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800119c:	4a24      	ldr	r2, [pc, #144]	; (8001230 <HAL_GPIO_Init+0x304>)
 800119e:	69bb      	ldr	r3, [r7, #24]
 80011a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011a2:	4b23      	ldr	r3, [pc, #140]	; (8001230 <HAL_GPIO_Init+0x304>)
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	43db      	mvns	r3, r3
 80011ac:	69ba      	ldr	r2, [r7, #24]
 80011ae:	4013      	ands	r3, r2
 80011b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d003      	beq.n	80011c6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80011be:	69ba      	ldr	r2, [r7, #24]
 80011c0:	693b      	ldr	r3, [r7, #16]
 80011c2:	4313      	orrs	r3, r2
 80011c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011c6:	4a1a      	ldr	r2, [pc, #104]	; (8001230 <HAL_GPIO_Init+0x304>)
 80011c8:	69bb      	ldr	r3, [r7, #24]
 80011ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011cc:	4b18      	ldr	r3, [pc, #96]	; (8001230 <HAL_GPIO_Init+0x304>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011d2:	693b      	ldr	r3, [r7, #16]
 80011d4:	43db      	mvns	r3, r3
 80011d6:	69ba      	ldr	r2, [r7, #24]
 80011d8:	4013      	ands	r3, r2
 80011da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d003      	beq.n	80011f0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	693b      	ldr	r3, [r7, #16]
 80011ec:	4313      	orrs	r3, r2
 80011ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011f0:	4a0f      	ldr	r2, [pc, #60]	; (8001230 <HAL_GPIO_Init+0x304>)
 80011f2:	69bb      	ldr	r3, [r7, #24]
 80011f4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	3301      	adds	r3, #1
 80011fa:	61fb      	str	r3, [r7, #28]
 80011fc:	69fb      	ldr	r3, [r7, #28]
 80011fe:	2b0f      	cmp	r3, #15
 8001200:	f67f aea2 	bls.w	8000f48 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001204:	bf00      	nop
 8001206:	bf00      	nop
 8001208:	3724      	adds	r7, #36	; 0x24
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	40023800 	.word	0x40023800
 8001218:	40013800 	.word	0x40013800
 800121c:	40020000 	.word	0x40020000
 8001220:	40020400 	.word	0x40020400
 8001224:	40020800 	.word	0x40020800
 8001228:	40020c00 	.word	0x40020c00
 800122c:	40021000 	.word	0x40021000
 8001230:	40013c00 	.word	0x40013c00

08001234 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001234:	b480      	push	{r7}
 8001236:	b085      	sub	sp, #20
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
 800123c:	460b      	mov	r3, r1
 800123e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	691a      	ldr	r2, [r3, #16]
 8001244:	887b      	ldrh	r3, [r7, #2]
 8001246:	4013      	ands	r3, r2
 8001248:	2b00      	cmp	r3, #0
 800124a:	d002      	beq.n	8001252 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800124c:	2301      	movs	r3, #1
 800124e:	73fb      	strb	r3, [r7, #15]
 8001250:	e001      	b.n	8001256 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001252:	2300      	movs	r3, #0
 8001254:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001256:	7bfb      	ldrb	r3, [r7, #15]
}
 8001258:	4618      	mov	r0, r3
 800125a:	3714      	adds	r7, #20
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr

08001264 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
 800126c:	460b      	mov	r3, r1
 800126e:	807b      	strh	r3, [r7, #2]
 8001270:	4613      	mov	r3, r2
 8001272:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001274:	787b      	ldrb	r3, [r7, #1]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d003      	beq.n	8001282 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800127a:	887a      	ldrh	r2, [r7, #2]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001280:	e003      	b.n	800128a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001282:	887b      	ldrh	r3, [r7, #2]
 8001284:	041a      	lsls	r2, r3, #16
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	619a      	str	r2, [r3, #24]
}
 800128a:	bf00      	nop
 800128c:	370c      	adds	r7, #12
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
	...

08001298 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	4603      	mov	r3, r0
 80012a0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80012a2:	4b08      	ldr	r3, [pc, #32]	; (80012c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012a4:	695a      	ldr	r2, [r3, #20]
 80012a6:	88fb      	ldrh	r3, [r7, #6]
 80012a8:	4013      	ands	r3, r2
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d006      	beq.n	80012bc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80012ae:	4a05      	ldr	r2, [pc, #20]	; (80012c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012b0:	88fb      	ldrh	r3, [r7, #6]
 80012b2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80012b4:	88fb      	ldrh	r3, [r7, #6]
 80012b6:	4618      	mov	r0, r3
 80012b8:	f7ff fbce 	bl	8000a58 <HAL_GPIO_EXTI_Callback>
  }
}
 80012bc:	bf00      	nop
 80012be:	3708      	adds	r7, #8
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	40013c00 	.word	0x40013c00

080012c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b086      	sub	sp, #24
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d101      	bne.n	80012da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012d6:	2301      	movs	r3, #1
 80012d8:	e267      	b.n	80017aa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f003 0301 	and.w	r3, r3, #1
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d075      	beq.n	80013d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012e6:	4b88      	ldr	r3, [pc, #544]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 80012e8:	689b      	ldr	r3, [r3, #8]
 80012ea:	f003 030c 	and.w	r3, r3, #12
 80012ee:	2b04      	cmp	r3, #4
 80012f0:	d00c      	beq.n	800130c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012f2:	4b85      	ldr	r3, [pc, #532]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 80012f4:	689b      	ldr	r3, [r3, #8]
 80012f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012fa:	2b08      	cmp	r3, #8
 80012fc:	d112      	bne.n	8001324 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012fe:	4b82      	ldr	r3, [pc, #520]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001306:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800130a:	d10b      	bne.n	8001324 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800130c:	4b7e      	ldr	r3, [pc, #504]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001314:	2b00      	cmp	r3, #0
 8001316:	d05b      	beq.n	80013d0 <HAL_RCC_OscConfig+0x108>
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d157      	bne.n	80013d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001320:	2301      	movs	r3, #1
 8001322:	e242      	b.n	80017aa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800132c:	d106      	bne.n	800133c <HAL_RCC_OscConfig+0x74>
 800132e:	4b76      	ldr	r3, [pc, #472]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a75      	ldr	r2, [pc, #468]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 8001334:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001338:	6013      	str	r3, [r2, #0]
 800133a:	e01d      	b.n	8001378 <HAL_RCC_OscConfig+0xb0>
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001344:	d10c      	bne.n	8001360 <HAL_RCC_OscConfig+0x98>
 8001346:	4b70      	ldr	r3, [pc, #448]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a6f      	ldr	r2, [pc, #444]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 800134c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001350:	6013      	str	r3, [r2, #0]
 8001352:	4b6d      	ldr	r3, [pc, #436]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a6c      	ldr	r2, [pc, #432]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 8001358:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800135c:	6013      	str	r3, [r2, #0]
 800135e:	e00b      	b.n	8001378 <HAL_RCC_OscConfig+0xb0>
 8001360:	4b69      	ldr	r3, [pc, #420]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a68      	ldr	r2, [pc, #416]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 8001366:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800136a:	6013      	str	r3, [r2, #0]
 800136c:	4b66      	ldr	r3, [pc, #408]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a65      	ldr	r2, [pc, #404]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 8001372:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001376:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d013      	beq.n	80013a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001380:	f7ff fc54 	bl	8000c2c <HAL_GetTick>
 8001384:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001386:	e008      	b.n	800139a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001388:	f7ff fc50 	bl	8000c2c <HAL_GetTick>
 800138c:	4602      	mov	r2, r0
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	2b64      	cmp	r3, #100	; 0x64
 8001394:	d901      	bls.n	800139a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001396:	2303      	movs	r3, #3
 8001398:	e207      	b.n	80017aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800139a:	4b5b      	ldr	r3, [pc, #364]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d0f0      	beq.n	8001388 <HAL_RCC_OscConfig+0xc0>
 80013a6:	e014      	b.n	80013d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013a8:	f7ff fc40 	bl	8000c2c <HAL_GetTick>
 80013ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013ae:	e008      	b.n	80013c2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013b0:	f7ff fc3c 	bl	8000c2c <HAL_GetTick>
 80013b4:	4602      	mov	r2, r0
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	2b64      	cmp	r3, #100	; 0x64
 80013bc:	d901      	bls.n	80013c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013be:	2303      	movs	r3, #3
 80013c0:	e1f3      	b.n	80017aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013c2:	4b51      	ldr	r3, [pc, #324]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d1f0      	bne.n	80013b0 <HAL_RCC_OscConfig+0xe8>
 80013ce:	e000      	b.n	80013d2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f003 0302 	and.w	r3, r3, #2
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d063      	beq.n	80014a6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013de:	4b4a      	ldr	r3, [pc, #296]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 80013e0:	689b      	ldr	r3, [r3, #8]
 80013e2:	f003 030c 	and.w	r3, r3, #12
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d00b      	beq.n	8001402 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013ea:	4b47      	ldr	r3, [pc, #284]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013f2:	2b08      	cmp	r3, #8
 80013f4:	d11c      	bne.n	8001430 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013f6:	4b44      	ldr	r3, [pc, #272]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d116      	bne.n	8001430 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001402:	4b41      	ldr	r3, [pc, #260]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f003 0302 	and.w	r3, r3, #2
 800140a:	2b00      	cmp	r3, #0
 800140c:	d005      	beq.n	800141a <HAL_RCC_OscConfig+0x152>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	68db      	ldr	r3, [r3, #12]
 8001412:	2b01      	cmp	r3, #1
 8001414:	d001      	beq.n	800141a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001416:	2301      	movs	r3, #1
 8001418:	e1c7      	b.n	80017aa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800141a:	4b3b      	ldr	r3, [pc, #236]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	691b      	ldr	r3, [r3, #16]
 8001426:	00db      	lsls	r3, r3, #3
 8001428:	4937      	ldr	r1, [pc, #220]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 800142a:	4313      	orrs	r3, r2
 800142c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800142e:	e03a      	b.n	80014a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	68db      	ldr	r3, [r3, #12]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d020      	beq.n	800147a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001438:	4b34      	ldr	r3, [pc, #208]	; (800150c <HAL_RCC_OscConfig+0x244>)
 800143a:	2201      	movs	r2, #1
 800143c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800143e:	f7ff fbf5 	bl	8000c2c <HAL_GetTick>
 8001442:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001444:	e008      	b.n	8001458 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001446:	f7ff fbf1 	bl	8000c2c <HAL_GetTick>
 800144a:	4602      	mov	r2, r0
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	1ad3      	subs	r3, r2, r3
 8001450:	2b02      	cmp	r3, #2
 8001452:	d901      	bls.n	8001458 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001454:	2303      	movs	r3, #3
 8001456:	e1a8      	b.n	80017aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001458:	4b2b      	ldr	r3, [pc, #172]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f003 0302 	and.w	r3, r3, #2
 8001460:	2b00      	cmp	r3, #0
 8001462:	d0f0      	beq.n	8001446 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001464:	4b28      	ldr	r3, [pc, #160]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	691b      	ldr	r3, [r3, #16]
 8001470:	00db      	lsls	r3, r3, #3
 8001472:	4925      	ldr	r1, [pc, #148]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 8001474:	4313      	orrs	r3, r2
 8001476:	600b      	str	r3, [r1, #0]
 8001478:	e015      	b.n	80014a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800147a:	4b24      	ldr	r3, [pc, #144]	; (800150c <HAL_RCC_OscConfig+0x244>)
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001480:	f7ff fbd4 	bl	8000c2c <HAL_GetTick>
 8001484:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001486:	e008      	b.n	800149a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001488:	f7ff fbd0 	bl	8000c2c <HAL_GetTick>
 800148c:	4602      	mov	r2, r0
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	1ad3      	subs	r3, r2, r3
 8001492:	2b02      	cmp	r3, #2
 8001494:	d901      	bls.n	800149a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001496:	2303      	movs	r3, #3
 8001498:	e187      	b.n	80017aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800149a:	4b1b      	ldr	r3, [pc, #108]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f003 0302 	and.w	r3, r3, #2
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d1f0      	bne.n	8001488 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f003 0308 	and.w	r3, r3, #8
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d036      	beq.n	8001520 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	695b      	ldr	r3, [r3, #20]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d016      	beq.n	80014e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014ba:	4b15      	ldr	r3, [pc, #84]	; (8001510 <HAL_RCC_OscConfig+0x248>)
 80014bc:	2201      	movs	r2, #1
 80014be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014c0:	f7ff fbb4 	bl	8000c2c <HAL_GetTick>
 80014c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014c6:	e008      	b.n	80014da <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014c8:	f7ff fbb0 	bl	8000c2c <HAL_GetTick>
 80014cc:	4602      	mov	r2, r0
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	2b02      	cmp	r3, #2
 80014d4:	d901      	bls.n	80014da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80014d6:	2303      	movs	r3, #3
 80014d8:	e167      	b.n	80017aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014da:	4b0b      	ldr	r3, [pc, #44]	; (8001508 <HAL_RCC_OscConfig+0x240>)
 80014dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014de:	f003 0302 	and.w	r3, r3, #2
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d0f0      	beq.n	80014c8 <HAL_RCC_OscConfig+0x200>
 80014e6:	e01b      	b.n	8001520 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014e8:	4b09      	ldr	r3, [pc, #36]	; (8001510 <HAL_RCC_OscConfig+0x248>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014ee:	f7ff fb9d 	bl	8000c2c <HAL_GetTick>
 80014f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014f4:	e00e      	b.n	8001514 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014f6:	f7ff fb99 	bl	8000c2c <HAL_GetTick>
 80014fa:	4602      	mov	r2, r0
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	1ad3      	subs	r3, r2, r3
 8001500:	2b02      	cmp	r3, #2
 8001502:	d907      	bls.n	8001514 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001504:	2303      	movs	r3, #3
 8001506:	e150      	b.n	80017aa <HAL_RCC_OscConfig+0x4e2>
 8001508:	40023800 	.word	0x40023800
 800150c:	42470000 	.word	0x42470000
 8001510:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001514:	4b88      	ldr	r3, [pc, #544]	; (8001738 <HAL_RCC_OscConfig+0x470>)
 8001516:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001518:	f003 0302 	and.w	r3, r3, #2
 800151c:	2b00      	cmp	r3, #0
 800151e:	d1ea      	bne.n	80014f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f003 0304 	and.w	r3, r3, #4
 8001528:	2b00      	cmp	r3, #0
 800152a:	f000 8097 	beq.w	800165c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800152e:	2300      	movs	r3, #0
 8001530:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001532:	4b81      	ldr	r3, [pc, #516]	; (8001738 <HAL_RCC_OscConfig+0x470>)
 8001534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001536:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800153a:	2b00      	cmp	r3, #0
 800153c:	d10f      	bne.n	800155e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800153e:	2300      	movs	r3, #0
 8001540:	60bb      	str	r3, [r7, #8]
 8001542:	4b7d      	ldr	r3, [pc, #500]	; (8001738 <HAL_RCC_OscConfig+0x470>)
 8001544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001546:	4a7c      	ldr	r2, [pc, #496]	; (8001738 <HAL_RCC_OscConfig+0x470>)
 8001548:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800154c:	6413      	str	r3, [r2, #64]	; 0x40
 800154e:	4b7a      	ldr	r3, [pc, #488]	; (8001738 <HAL_RCC_OscConfig+0x470>)
 8001550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001552:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001556:	60bb      	str	r3, [r7, #8]
 8001558:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800155a:	2301      	movs	r3, #1
 800155c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800155e:	4b77      	ldr	r3, [pc, #476]	; (800173c <HAL_RCC_OscConfig+0x474>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001566:	2b00      	cmp	r3, #0
 8001568:	d118      	bne.n	800159c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800156a:	4b74      	ldr	r3, [pc, #464]	; (800173c <HAL_RCC_OscConfig+0x474>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a73      	ldr	r2, [pc, #460]	; (800173c <HAL_RCC_OscConfig+0x474>)
 8001570:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001574:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001576:	f7ff fb59 	bl	8000c2c <HAL_GetTick>
 800157a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800157c:	e008      	b.n	8001590 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800157e:	f7ff fb55 	bl	8000c2c <HAL_GetTick>
 8001582:	4602      	mov	r2, r0
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	1ad3      	subs	r3, r2, r3
 8001588:	2b02      	cmp	r3, #2
 800158a:	d901      	bls.n	8001590 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800158c:	2303      	movs	r3, #3
 800158e:	e10c      	b.n	80017aa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001590:	4b6a      	ldr	r3, [pc, #424]	; (800173c <HAL_RCC_OscConfig+0x474>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001598:	2b00      	cmp	r3, #0
 800159a:	d0f0      	beq.n	800157e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	d106      	bne.n	80015b2 <HAL_RCC_OscConfig+0x2ea>
 80015a4:	4b64      	ldr	r3, [pc, #400]	; (8001738 <HAL_RCC_OscConfig+0x470>)
 80015a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015a8:	4a63      	ldr	r2, [pc, #396]	; (8001738 <HAL_RCC_OscConfig+0x470>)
 80015aa:	f043 0301 	orr.w	r3, r3, #1
 80015ae:	6713      	str	r3, [r2, #112]	; 0x70
 80015b0:	e01c      	b.n	80015ec <HAL_RCC_OscConfig+0x324>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	2b05      	cmp	r3, #5
 80015b8:	d10c      	bne.n	80015d4 <HAL_RCC_OscConfig+0x30c>
 80015ba:	4b5f      	ldr	r3, [pc, #380]	; (8001738 <HAL_RCC_OscConfig+0x470>)
 80015bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015be:	4a5e      	ldr	r2, [pc, #376]	; (8001738 <HAL_RCC_OscConfig+0x470>)
 80015c0:	f043 0304 	orr.w	r3, r3, #4
 80015c4:	6713      	str	r3, [r2, #112]	; 0x70
 80015c6:	4b5c      	ldr	r3, [pc, #368]	; (8001738 <HAL_RCC_OscConfig+0x470>)
 80015c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015ca:	4a5b      	ldr	r2, [pc, #364]	; (8001738 <HAL_RCC_OscConfig+0x470>)
 80015cc:	f043 0301 	orr.w	r3, r3, #1
 80015d0:	6713      	str	r3, [r2, #112]	; 0x70
 80015d2:	e00b      	b.n	80015ec <HAL_RCC_OscConfig+0x324>
 80015d4:	4b58      	ldr	r3, [pc, #352]	; (8001738 <HAL_RCC_OscConfig+0x470>)
 80015d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015d8:	4a57      	ldr	r2, [pc, #348]	; (8001738 <HAL_RCC_OscConfig+0x470>)
 80015da:	f023 0301 	bic.w	r3, r3, #1
 80015de:	6713      	str	r3, [r2, #112]	; 0x70
 80015e0:	4b55      	ldr	r3, [pc, #340]	; (8001738 <HAL_RCC_OscConfig+0x470>)
 80015e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015e4:	4a54      	ldr	r2, [pc, #336]	; (8001738 <HAL_RCC_OscConfig+0x470>)
 80015e6:	f023 0304 	bic.w	r3, r3, #4
 80015ea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d015      	beq.n	8001620 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015f4:	f7ff fb1a 	bl	8000c2c <HAL_GetTick>
 80015f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015fa:	e00a      	b.n	8001612 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015fc:	f7ff fb16 	bl	8000c2c <HAL_GetTick>
 8001600:	4602      	mov	r2, r0
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	f241 3288 	movw	r2, #5000	; 0x1388
 800160a:	4293      	cmp	r3, r2
 800160c:	d901      	bls.n	8001612 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800160e:	2303      	movs	r3, #3
 8001610:	e0cb      	b.n	80017aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001612:	4b49      	ldr	r3, [pc, #292]	; (8001738 <HAL_RCC_OscConfig+0x470>)
 8001614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001616:	f003 0302 	and.w	r3, r3, #2
 800161a:	2b00      	cmp	r3, #0
 800161c:	d0ee      	beq.n	80015fc <HAL_RCC_OscConfig+0x334>
 800161e:	e014      	b.n	800164a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001620:	f7ff fb04 	bl	8000c2c <HAL_GetTick>
 8001624:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001626:	e00a      	b.n	800163e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001628:	f7ff fb00 	bl	8000c2c <HAL_GetTick>
 800162c:	4602      	mov	r2, r0
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	f241 3288 	movw	r2, #5000	; 0x1388
 8001636:	4293      	cmp	r3, r2
 8001638:	d901      	bls.n	800163e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800163a:	2303      	movs	r3, #3
 800163c:	e0b5      	b.n	80017aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800163e:	4b3e      	ldr	r3, [pc, #248]	; (8001738 <HAL_RCC_OscConfig+0x470>)
 8001640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001642:	f003 0302 	and.w	r3, r3, #2
 8001646:	2b00      	cmp	r3, #0
 8001648:	d1ee      	bne.n	8001628 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800164a:	7dfb      	ldrb	r3, [r7, #23]
 800164c:	2b01      	cmp	r3, #1
 800164e:	d105      	bne.n	800165c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001650:	4b39      	ldr	r3, [pc, #228]	; (8001738 <HAL_RCC_OscConfig+0x470>)
 8001652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001654:	4a38      	ldr	r2, [pc, #224]	; (8001738 <HAL_RCC_OscConfig+0x470>)
 8001656:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800165a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	699b      	ldr	r3, [r3, #24]
 8001660:	2b00      	cmp	r3, #0
 8001662:	f000 80a1 	beq.w	80017a8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001666:	4b34      	ldr	r3, [pc, #208]	; (8001738 <HAL_RCC_OscConfig+0x470>)
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	f003 030c 	and.w	r3, r3, #12
 800166e:	2b08      	cmp	r3, #8
 8001670:	d05c      	beq.n	800172c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	699b      	ldr	r3, [r3, #24]
 8001676:	2b02      	cmp	r3, #2
 8001678:	d141      	bne.n	80016fe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800167a:	4b31      	ldr	r3, [pc, #196]	; (8001740 <HAL_RCC_OscConfig+0x478>)
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001680:	f7ff fad4 	bl	8000c2c <HAL_GetTick>
 8001684:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001686:	e008      	b.n	800169a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001688:	f7ff fad0 	bl	8000c2c <HAL_GetTick>
 800168c:	4602      	mov	r2, r0
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	2b02      	cmp	r3, #2
 8001694:	d901      	bls.n	800169a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001696:	2303      	movs	r3, #3
 8001698:	e087      	b.n	80017aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800169a:	4b27      	ldr	r3, [pc, #156]	; (8001738 <HAL_RCC_OscConfig+0x470>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d1f0      	bne.n	8001688 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	69da      	ldr	r2, [r3, #28]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6a1b      	ldr	r3, [r3, #32]
 80016ae:	431a      	orrs	r2, r3
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b4:	019b      	lsls	r3, r3, #6
 80016b6:	431a      	orrs	r2, r3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016bc:	085b      	lsrs	r3, r3, #1
 80016be:	3b01      	subs	r3, #1
 80016c0:	041b      	lsls	r3, r3, #16
 80016c2:	431a      	orrs	r2, r3
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016c8:	061b      	lsls	r3, r3, #24
 80016ca:	491b      	ldr	r1, [pc, #108]	; (8001738 <HAL_RCC_OscConfig+0x470>)
 80016cc:	4313      	orrs	r3, r2
 80016ce:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016d0:	4b1b      	ldr	r3, [pc, #108]	; (8001740 <HAL_RCC_OscConfig+0x478>)
 80016d2:	2201      	movs	r2, #1
 80016d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d6:	f7ff faa9 	bl	8000c2c <HAL_GetTick>
 80016da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016dc:	e008      	b.n	80016f0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016de:	f7ff faa5 	bl	8000c2c <HAL_GetTick>
 80016e2:	4602      	mov	r2, r0
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	1ad3      	subs	r3, r2, r3
 80016e8:	2b02      	cmp	r3, #2
 80016ea:	d901      	bls.n	80016f0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80016ec:	2303      	movs	r3, #3
 80016ee:	e05c      	b.n	80017aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016f0:	4b11      	ldr	r3, [pc, #68]	; (8001738 <HAL_RCC_OscConfig+0x470>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d0f0      	beq.n	80016de <HAL_RCC_OscConfig+0x416>
 80016fc:	e054      	b.n	80017a8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016fe:	4b10      	ldr	r3, [pc, #64]	; (8001740 <HAL_RCC_OscConfig+0x478>)
 8001700:	2200      	movs	r2, #0
 8001702:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001704:	f7ff fa92 	bl	8000c2c <HAL_GetTick>
 8001708:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800170a:	e008      	b.n	800171e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800170c:	f7ff fa8e 	bl	8000c2c <HAL_GetTick>
 8001710:	4602      	mov	r2, r0
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	2b02      	cmp	r3, #2
 8001718:	d901      	bls.n	800171e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800171a:	2303      	movs	r3, #3
 800171c:	e045      	b.n	80017aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800171e:	4b06      	ldr	r3, [pc, #24]	; (8001738 <HAL_RCC_OscConfig+0x470>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d1f0      	bne.n	800170c <HAL_RCC_OscConfig+0x444>
 800172a:	e03d      	b.n	80017a8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	699b      	ldr	r3, [r3, #24]
 8001730:	2b01      	cmp	r3, #1
 8001732:	d107      	bne.n	8001744 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001734:	2301      	movs	r3, #1
 8001736:	e038      	b.n	80017aa <HAL_RCC_OscConfig+0x4e2>
 8001738:	40023800 	.word	0x40023800
 800173c:	40007000 	.word	0x40007000
 8001740:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001744:	4b1b      	ldr	r3, [pc, #108]	; (80017b4 <HAL_RCC_OscConfig+0x4ec>)
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	699b      	ldr	r3, [r3, #24]
 800174e:	2b01      	cmp	r3, #1
 8001750:	d028      	beq.n	80017a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800175c:	429a      	cmp	r2, r3
 800175e:	d121      	bne.n	80017a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800176a:	429a      	cmp	r2, r3
 800176c:	d11a      	bne.n	80017a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800176e:	68fa      	ldr	r2, [r7, #12]
 8001770:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001774:	4013      	ands	r3, r2
 8001776:	687a      	ldr	r2, [r7, #4]
 8001778:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800177a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800177c:	4293      	cmp	r3, r2
 800177e:	d111      	bne.n	80017a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800178a:	085b      	lsrs	r3, r3, #1
 800178c:	3b01      	subs	r3, #1
 800178e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001790:	429a      	cmp	r2, r3
 8001792:	d107      	bne.n	80017a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800179e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d001      	beq.n	80017a8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	e000      	b.n	80017aa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80017a8:	2300      	movs	r3, #0
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3718      	adds	r7, #24
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	40023800 	.word	0x40023800

080017b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b084      	sub	sp, #16
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
 80017c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d101      	bne.n	80017cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017c8:	2301      	movs	r3, #1
 80017ca:	e0cc      	b.n	8001966 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017cc:	4b68      	ldr	r3, [pc, #416]	; (8001970 <HAL_RCC_ClockConfig+0x1b8>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f003 0307 	and.w	r3, r3, #7
 80017d4:	683a      	ldr	r2, [r7, #0]
 80017d6:	429a      	cmp	r2, r3
 80017d8:	d90c      	bls.n	80017f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017da:	4b65      	ldr	r3, [pc, #404]	; (8001970 <HAL_RCC_ClockConfig+0x1b8>)
 80017dc:	683a      	ldr	r2, [r7, #0]
 80017de:	b2d2      	uxtb	r2, r2
 80017e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017e2:	4b63      	ldr	r3, [pc, #396]	; (8001970 <HAL_RCC_ClockConfig+0x1b8>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 0307 	and.w	r3, r3, #7
 80017ea:	683a      	ldr	r2, [r7, #0]
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d001      	beq.n	80017f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	e0b8      	b.n	8001966 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f003 0302 	and.w	r3, r3, #2
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d020      	beq.n	8001842 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f003 0304 	and.w	r3, r3, #4
 8001808:	2b00      	cmp	r3, #0
 800180a:	d005      	beq.n	8001818 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800180c:	4b59      	ldr	r3, [pc, #356]	; (8001974 <HAL_RCC_ClockConfig+0x1bc>)
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	4a58      	ldr	r2, [pc, #352]	; (8001974 <HAL_RCC_ClockConfig+0x1bc>)
 8001812:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001816:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f003 0308 	and.w	r3, r3, #8
 8001820:	2b00      	cmp	r3, #0
 8001822:	d005      	beq.n	8001830 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001824:	4b53      	ldr	r3, [pc, #332]	; (8001974 <HAL_RCC_ClockConfig+0x1bc>)
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	4a52      	ldr	r2, [pc, #328]	; (8001974 <HAL_RCC_ClockConfig+0x1bc>)
 800182a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800182e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001830:	4b50      	ldr	r3, [pc, #320]	; (8001974 <HAL_RCC_ClockConfig+0x1bc>)
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	494d      	ldr	r1, [pc, #308]	; (8001974 <HAL_RCC_ClockConfig+0x1bc>)
 800183e:	4313      	orrs	r3, r2
 8001840:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 0301 	and.w	r3, r3, #1
 800184a:	2b00      	cmp	r3, #0
 800184c:	d044      	beq.n	80018d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	2b01      	cmp	r3, #1
 8001854:	d107      	bne.n	8001866 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001856:	4b47      	ldr	r3, [pc, #284]	; (8001974 <HAL_RCC_ClockConfig+0x1bc>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800185e:	2b00      	cmp	r3, #0
 8001860:	d119      	bne.n	8001896 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	e07f      	b.n	8001966 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	2b02      	cmp	r3, #2
 800186c:	d003      	beq.n	8001876 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001872:	2b03      	cmp	r3, #3
 8001874:	d107      	bne.n	8001886 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001876:	4b3f      	ldr	r3, [pc, #252]	; (8001974 <HAL_RCC_ClockConfig+0x1bc>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800187e:	2b00      	cmp	r3, #0
 8001880:	d109      	bne.n	8001896 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e06f      	b.n	8001966 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001886:	4b3b      	ldr	r3, [pc, #236]	; (8001974 <HAL_RCC_ClockConfig+0x1bc>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 0302 	and.w	r3, r3, #2
 800188e:	2b00      	cmp	r3, #0
 8001890:	d101      	bne.n	8001896 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	e067      	b.n	8001966 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001896:	4b37      	ldr	r3, [pc, #220]	; (8001974 <HAL_RCC_ClockConfig+0x1bc>)
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	f023 0203 	bic.w	r2, r3, #3
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	4934      	ldr	r1, [pc, #208]	; (8001974 <HAL_RCC_ClockConfig+0x1bc>)
 80018a4:	4313      	orrs	r3, r2
 80018a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018a8:	f7ff f9c0 	bl	8000c2c <HAL_GetTick>
 80018ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018ae:	e00a      	b.n	80018c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018b0:	f7ff f9bc 	bl	8000c2c <HAL_GetTick>
 80018b4:	4602      	mov	r2, r0
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80018be:	4293      	cmp	r3, r2
 80018c0:	d901      	bls.n	80018c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018c2:	2303      	movs	r3, #3
 80018c4:	e04f      	b.n	8001966 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018c6:	4b2b      	ldr	r3, [pc, #172]	; (8001974 <HAL_RCC_ClockConfig+0x1bc>)
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	f003 020c 	and.w	r2, r3, #12
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d1eb      	bne.n	80018b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018d8:	4b25      	ldr	r3, [pc, #148]	; (8001970 <HAL_RCC_ClockConfig+0x1b8>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f003 0307 	and.w	r3, r3, #7
 80018e0:	683a      	ldr	r2, [r7, #0]
 80018e2:	429a      	cmp	r2, r3
 80018e4:	d20c      	bcs.n	8001900 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018e6:	4b22      	ldr	r3, [pc, #136]	; (8001970 <HAL_RCC_ClockConfig+0x1b8>)
 80018e8:	683a      	ldr	r2, [r7, #0]
 80018ea:	b2d2      	uxtb	r2, r2
 80018ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018ee:	4b20      	ldr	r3, [pc, #128]	; (8001970 <HAL_RCC_ClockConfig+0x1b8>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 0307 	and.w	r3, r3, #7
 80018f6:	683a      	ldr	r2, [r7, #0]
 80018f8:	429a      	cmp	r2, r3
 80018fa:	d001      	beq.n	8001900 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018fc:	2301      	movs	r3, #1
 80018fe:	e032      	b.n	8001966 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f003 0304 	and.w	r3, r3, #4
 8001908:	2b00      	cmp	r3, #0
 800190a:	d008      	beq.n	800191e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800190c:	4b19      	ldr	r3, [pc, #100]	; (8001974 <HAL_RCC_ClockConfig+0x1bc>)
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	4916      	ldr	r1, [pc, #88]	; (8001974 <HAL_RCC_ClockConfig+0x1bc>)
 800191a:	4313      	orrs	r3, r2
 800191c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 0308 	and.w	r3, r3, #8
 8001926:	2b00      	cmp	r3, #0
 8001928:	d009      	beq.n	800193e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800192a:	4b12      	ldr	r3, [pc, #72]	; (8001974 <HAL_RCC_ClockConfig+0x1bc>)
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	691b      	ldr	r3, [r3, #16]
 8001936:	00db      	lsls	r3, r3, #3
 8001938:	490e      	ldr	r1, [pc, #56]	; (8001974 <HAL_RCC_ClockConfig+0x1bc>)
 800193a:	4313      	orrs	r3, r2
 800193c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800193e:	f000 f821 	bl	8001984 <HAL_RCC_GetSysClockFreq>
 8001942:	4602      	mov	r2, r0
 8001944:	4b0b      	ldr	r3, [pc, #44]	; (8001974 <HAL_RCC_ClockConfig+0x1bc>)
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	091b      	lsrs	r3, r3, #4
 800194a:	f003 030f 	and.w	r3, r3, #15
 800194e:	490a      	ldr	r1, [pc, #40]	; (8001978 <HAL_RCC_ClockConfig+0x1c0>)
 8001950:	5ccb      	ldrb	r3, [r1, r3]
 8001952:	fa22 f303 	lsr.w	r3, r2, r3
 8001956:	4a09      	ldr	r2, [pc, #36]	; (800197c <HAL_RCC_ClockConfig+0x1c4>)
 8001958:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800195a:	4b09      	ldr	r3, [pc, #36]	; (8001980 <HAL_RCC_ClockConfig+0x1c8>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4618      	mov	r0, r3
 8001960:	f7fe ffc4 	bl	80008ec <HAL_InitTick>

  return HAL_OK;
 8001964:	2300      	movs	r3, #0
}
 8001966:	4618      	mov	r0, r3
 8001968:	3710      	adds	r7, #16
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	40023c00 	.word	0x40023c00
 8001974:	40023800 	.word	0x40023800
 8001978:	08005e6c 	.word	0x08005e6c
 800197c:	20000000 	.word	0x20000000
 8001980:	20000004 	.word	0x20000004

08001984 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001984:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001988:	b094      	sub	sp, #80	; 0x50
 800198a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800198c:	2300      	movs	r3, #0
 800198e:	647b      	str	r3, [r7, #68]	; 0x44
 8001990:	2300      	movs	r3, #0
 8001992:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001994:	2300      	movs	r3, #0
 8001996:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001998:	2300      	movs	r3, #0
 800199a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800199c:	4b79      	ldr	r3, [pc, #484]	; (8001b84 <HAL_RCC_GetSysClockFreq+0x200>)
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	f003 030c 	and.w	r3, r3, #12
 80019a4:	2b08      	cmp	r3, #8
 80019a6:	d00d      	beq.n	80019c4 <HAL_RCC_GetSysClockFreq+0x40>
 80019a8:	2b08      	cmp	r3, #8
 80019aa:	f200 80e1 	bhi.w	8001b70 <HAL_RCC_GetSysClockFreq+0x1ec>
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d002      	beq.n	80019b8 <HAL_RCC_GetSysClockFreq+0x34>
 80019b2:	2b04      	cmp	r3, #4
 80019b4:	d003      	beq.n	80019be <HAL_RCC_GetSysClockFreq+0x3a>
 80019b6:	e0db      	b.n	8001b70 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019b8:	4b73      	ldr	r3, [pc, #460]	; (8001b88 <HAL_RCC_GetSysClockFreq+0x204>)
 80019ba:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80019bc:	e0db      	b.n	8001b76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80019be:	4b73      	ldr	r3, [pc, #460]	; (8001b8c <HAL_RCC_GetSysClockFreq+0x208>)
 80019c0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80019c2:	e0d8      	b.n	8001b76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019c4:	4b6f      	ldr	r3, [pc, #444]	; (8001b84 <HAL_RCC_GetSysClockFreq+0x200>)
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019cc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019ce:	4b6d      	ldr	r3, [pc, #436]	; (8001b84 <HAL_RCC_GetSysClockFreq+0x200>)
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d063      	beq.n	8001aa2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019da:	4b6a      	ldr	r3, [pc, #424]	; (8001b84 <HAL_RCC_GetSysClockFreq+0x200>)
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	099b      	lsrs	r3, r3, #6
 80019e0:	2200      	movs	r2, #0
 80019e2:	63bb      	str	r3, [r7, #56]	; 0x38
 80019e4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80019e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019ec:	633b      	str	r3, [r7, #48]	; 0x30
 80019ee:	2300      	movs	r3, #0
 80019f0:	637b      	str	r3, [r7, #52]	; 0x34
 80019f2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80019f6:	4622      	mov	r2, r4
 80019f8:	462b      	mov	r3, r5
 80019fa:	f04f 0000 	mov.w	r0, #0
 80019fe:	f04f 0100 	mov.w	r1, #0
 8001a02:	0159      	lsls	r1, r3, #5
 8001a04:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a08:	0150      	lsls	r0, r2, #5
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	460b      	mov	r3, r1
 8001a0e:	4621      	mov	r1, r4
 8001a10:	1a51      	subs	r1, r2, r1
 8001a12:	6139      	str	r1, [r7, #16]
 8001a14:	4629      	mov	r1, r5
 8001a16:	eb63 0301 	sbc.w	r3, r3, r1
 8001a1a:	617b      	str	r3, [r7, #20]
 8001a1c:	f04f 0200 	mov.w	r2, #0
 8001a20:	f04f 0300 	mov.w	r3, #0
 8001a24:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001a28:	4659      	mov	r1, fp
 8001a2a:	018b      	lsls	r3, r1, #6
 8001a2c:	4651      	mov	r1, sl
 8001a2e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a32:	4651      	mov	r1, sl
 8001a34:	018a      	lsls	r2, r1, #6
 8001a36:	4651      	mov	r1, sl
 8001a38:	ebb2 0801 	subs.w	r8, r2, r1
 8001a3c:	4659      	mov	r1, fp
 8001a3e:	eb63 0901 	sbc.w	r9, r3, r1
 8001a42:	f04f 0200 	mov.w	r2, #0
 8001a46:	f04f 0300 	mov.w	r3, #0
 8001a4a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a4e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a52:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a56:	4690      	mov	r8, r2
 8001a58:	4699      	mov	r9, r3
 8001a5a:	4623      	mov	r3, r4
 8001a5c:	eb18 0303 	adds.w	r3, r8, r3
 8001a60:	60bb      	str	r3, [r7, #8]
 8001a62:	462b      	mov	r3, r5
 8001a64:	eb49 0303 	adc.w	r3, r9, r3
 8001a68:	60fb      	str	r3, [r7, #12]
 8001a6a:	f04f 0200 	mov.w	r2, #0
 8001a6e:	f04f 0300 	mov.w	r3, #0
 8001a72:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001a76:	4629      	mov	r1, r5
 8001a78:	024b      	lsls	r3, r1, #9
 8001a7a:	4621      	mov	r1, r4
 8001a7c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a80:	4621      	mov	r1, r4
 8001a82:	024a      	lsls	r2, r1, #9
 8001a84:	4610      	mov	r0, r2
 8001a86:	4619      	mov	r1, r3
 8001a88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a8e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001a90:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001a94:	f7fe fba4 	bl	80001e0 <__aeabi_uldivmod>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	460b      	mov	r3, r1
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001aa0:	e058      	b.n	8001b54 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001aa2:	4b38      	ldr	r3, [pc, #224]	; (8001b84 <HAL_RCC_GetSysClockFreq+0x200>)
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	099b      	lsrs	r3, r3, #6
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	4618      	mov	r0, r3
 8001aac:	4611      	mov	r1, r2
 8001aae:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001ab2:	623b      	str	r3, [r7, #32]
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	627b      	str	r3, [r7, #36]	; 0x24
 8001ab8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001abc:	4642      	mov	r2, r8
 8001abe:	464b      	mov	r3, r9
 8001ac0:	f04f 0000 	mov.w	r0, #0
 8001ac4:	f04f 0100 	mov.w	r1, #0
 8001ac8:	0159      	lsls	r1, r3, #5
 8001aca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ace:	0150      	lsls	r0, r2, #5
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	460b      	mov	r3, r1
 8001ad4:	4641      	mov	r1, r8
 8001ad6:	ebb2 0a01 	subs.w	sl, r2, r1
 8001ada:	4649      	mov	r1, r9
 8001adc:	eb63 0b01 	sbc.w	fp, r3, r1
 8001ae0:	f04f 0200 	mov.w	r2, #0
 8001ae4:	f04f 0300 	mov.w	r3, #0
 8001ae8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001aec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001af0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001af4:	ebb2 040a 	subs.w	r4, r2, sl
 8001af8:	eb63 050b 	sbc.w	r5, r3, fp
 8001afc:	f04f 0200 	mov.w	r2, #0
 8001b00:	f04f 0300 	mov.w	r3, #0
 8001b04:	00eb      	lsls	r3, r5, #3
 8001b06:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b0a:	00e2      	lsls	r2, r4, #3
 8001b0c:	4614      	mov	r4, r2
 8001b0e:	461d      	mov	r5, r3
 8001b10:	4643      	mov	r3, r8
 8001b12:	18e3      	adds	r3, r4, r3
 8001b14:	603b      	str	r3, [r7, #0]
 8001b16:	464b      	mov	r3, r9
 8001b18:	eb45 0303 	adc.w	r3, r5, r3
 8001b1c:	607b      	str	r3, [r7, #4]
 8001b1e:	f04f 0200 	mov.w	r2, #0
 8001b22:	f04f 0300 	mov.w	r3, #0
 8001b26:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b2a:	4629      	mov	r1, r5
 8001b2c:	028b      	lsls	r3, r1, #10
 8001b2e:	4621      	mov	r1, r4
 8001b30:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b34:	4621      	mov	r1, r4
 8001b36:	028a      	lsls	r2, r1, #10
 8001b38:	4610      	mov	r0, r2
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b3e:	2200      	movs	r2, #0
 8001b40:	61bb      	str	r3, [r7, #24]
 8001b42:	61fa      	str	r2, [r7, #28]
 8001b44:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b48:	f7fe fb4a 	bl	80001e0 <__aeabi_uldivmod>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	460b      	mov	r3, r1
 8001b50:	4613      	mov	r3, r2
 8001b52:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b54:	4b0b      	ldr	r3, [pc, #44]	; (8001b84 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	0c1b      	lsrs	r3, r3, #16
 8001b5a:	f003 0303 	and.w	r3, r3, #3
 8001b5e:	3301      	adds	r3, #1
 8001b60:	005b      	lsls	r3, r3, #1
 8001b62:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001b64:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001b66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b68:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b6c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b6e:	e002      	b.n	8001b76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b70:	4b05      	ldr	r3, [pc, #20]	; (8001b88 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b72:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3750      	adds	r7, #80	; 0x50
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b82:	bf00      	nop
 8001b84:	40023800 	.word	0x40023800
 8001b88:	00f42400 	.word	0x00f42400
 8001b8c:	007a1200 	.word	0x007a1200

08001b90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b94:	4b03      	ldr	r3, [pc, #12]	; (8001ba4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b96:	681b      	ldr	r3, [r3, #0]
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	20000000 	.word	0x20000000

08001ba8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001bac:	f7ff fff0 	bl	8001b90 <HAL_RCC_GetHCLKFreq>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	4b05      	ldr	r3, [pc, #20]	; (8001bc8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	0a9b      	lsrs	r3, r3, #10
 8001bb8:	f003 0307 	and.w	r3, r3, #7
 8001bbc:	4903      	ldr	r1, [pc, #12]	; (8001bcc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bbe:	5ccb      	ldrb	r3, [r1, r3]
 8001bc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	40023800 	.word	0x40023800
 8001bcc:	08005e7c 	.word	0x08005e7c

08001bd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001bd4:	f7ff ffdc 	bl	8001b90 <HAL_RCC_GetHCLKFreq>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	4b05      	ldr	r3, [pc, #20]	; (8001bf0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	0b5b      	lsrs	r3, r3, #13
 8001be0:	f003 0307 	and.w	r3, r3, #7
 8001be4:	4903      	ldr	r1, [pc, #12]	; (8001bf4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001be6:	5ccb      	ldrb	r3, [r1, r3]
 8001be8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	40023800 	.word	0x40023800
 8001bf4:	08005e7c 	.word	0x08005e7c

08001bf8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
 8001c00:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	220f      	movs	r2, #15
 8001c06:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001c08:	4b12      	ldr	r3, [pc, #72]	; (8001c54 <HAL_RCC_GetClockConfig+0x5c>)
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	f003 0203 	and.w	r2, r3, #3
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001c14:	4b0f      	ldr	r3, [pc, #60]	; (8001c54 <HAL_RCC_GetClockConfig+0x5c>)
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001c20:	4b0c      	ldr	r3, [pc, #48]	; (8001c54 <HAL_RCC_GetClockConfig+0x5c>)
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001c2c:	4b09      	ldr	r3, [pc, #36]	; (8001c54 <HAL_RCC_GetClockConfig+0x5c>)
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	08db      	lsrs	r3, r3, #3
 8001c32:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001c3a:	4b07      	ldr	r3, [pc, #28]	; (8001c58 <HAL_RCC_GetClockConfig+0x60>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 0207 	and.w	r2, r3, #7
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	601a      	str	r2, [r3, #0]
}
 8001c46:	bf00      	nop
 8001c48:	370c      	adds	r7, #12
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	40023800 	.word	0x40023800
 8001c58:	40023c00 	.word	0x40023c00

08001c5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d101      	bne.n	8001c6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e041      	b.n	8001cf2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d106      	bne.n	8001c88 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	f000 f839 	bl	8001cfa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2202      	movs	r2, #2
 8001c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	3304      	adds	r3, #4
 8001c98:	4619      	mov	r1, r3
 8001c9a:	4610      	mov	r0, r2
 8001c9c:	f000 f9ca 	bl	8002034 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2201      	movs	r2, #1
 8001cac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2201      	movs	r2, #1
 8001cbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2201      	movs	r2, #1
 8001ccc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2201      	movs	r2, #1
 8001cdc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2201      	movs	r2, #1
 8001cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001cf0:	2300      	movs	r3, #0
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3708      	adds	r7, #8
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}

08001cfa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001cfa:	b480      	push	{r7}
 8001cfc:	b083      	sub	sp, #12
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001d02:	bf00      	nop
 8001d04:	370c      	adds	r7, #12
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr
	...

08001d10 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b085      	sub	sp, #20
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d1e:	b2db      	uxtb	r3, r3
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d001      	beq.n	8001d28 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
 8001d26:	e044      	b.n	8001db2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2202      	movs	r2, #2
 8001d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	68da      	ldr	r2, [r3, #12]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f042 0201 	orr.w	r2, r2, #1
 8001d3e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a1e      	ldr	r2, [pc, #120]	; (8001dc0 <HAL_TIM_Base_Start_IT+0xb0>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d018      	beq.n	8001d7c <HAL_TIM_Base_Start_IT+0x6c>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d52:	d013      	beq.n	8001d7c <HAL_TIM_Base_Start_IT+0x6c>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a1a      	ldr	r2, [pc, #104]	; (8001dc4 <HAL_TIM_Base_Start_IT+0xb4>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d00e      	beq.n	8001d7c <HAL_TIM_Base_Start_IT+0x6c>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a19      	ldr	r2, [pc, #100]	; (8001dc8 <HAL_TIM_Base_Start_IT+0xb8>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d009      	beq.n	8001d7c <HAL_TIM_Base_Start_IT+0x6c>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a17      	ldr	r2, [pc, #92]	; (8001dcc <HAL_TIM_Base_Start_IT+0xbc>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d004      	beq.n	8001d7c <HAL_TIM_Base_Start_IT+0x6c>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a16      	ldr	r2, [pc, #88]	; (8001dd0 <HAL_TIM_Base_Start_IT+0xc0>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d111      	bne.n	8001da0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	f003 0307 	and.w	r3, r3, #7
 8001d86:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	2b06      	cmp	r3, #6
 8001d8c:	d010      	beq.n	8001db0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f042 0201 	orr.w	r2, r2, #1
 8001d9c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d9e:	e007      	b.n	8001db0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f042 0201 	orr.w	r2, r2, #1
 8001dae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001db0:	2300      	movs	r3, #0
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3714      	adds	r7, #20
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr
 8001dbe:	bf00      	nop
 8001dc0:	40010000 	.word	0x40010000
 8001dc4:	40000400 	.word	0x40000400
 8001dc8:	40000800 	.word	0x40000800
 8001dcc:	40000c00 	.word	0x40000c00
 8001dd0:	40014000 	.word	0x40014000

08001dd4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	691b      	ldr	r3, [r3, #16]
 8001de2:	f003 0302 	and.w	r3, r3, #2
 8001de6:	2b02      	cmp	r3, #2
 8001de8:	d122      	bne.n	8001e30 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	f003 0302 	and.w	r3, r3, #2
 8001df4:	2b02      	cmp	r3, #2
 8001df6:	d11b      	bne.n	8001e30 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f06f 0202 	mvn.w	r2, #2
 8001e00:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2201      	movs	r2, #1
 8001e06:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	699b      	ldr	r3, [r3, #24]
 8001e0e:	f003 0303 	and.w	r3, r3, #3
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d003      	beq.n	8001e1e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f000 f8ee 	bl	8001ff8 <HAL_TIM_IC_CaptureCallback>
 8001e1c:	e005      	b.n	8001e2a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f000 f8e0 	bl	8001fe4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	f000 f8f1 	bl	800200c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	691b      	ldr	r3, [r3, #16]
 8001e36:	f003 0304 	and.w	r3, r3, #4
 8001e3a:	2b04      	cmp	r3, #4
 8001e3c:	d122      	bne.n	8001e84 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	f003 0304 	and.w	r3, r3, #4
 8001e48:	2b04      	cmp	r3, #4
 8001e4a:	d11b      	bne.n	8001e84 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f06f 0204 	mvn.w	r2, #4
 8001e54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2202      	movs	r2, #2
 8001e5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	699b      	ldr	r3, [r3, #24]
 8001e62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d003      	beq.n	8001e72 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f000 f8c4 	bl	8001ff8 <HAL_TIM_IC_CaptureCallback>
 8001e70:	e005      	b.n	8001e7e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f000 f8b6 	bl	8001fe4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e78:	6878      	ldr	r0, [r7, #4]
 8001e7a:	f000 f8c7 	bl	800200c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2200      	movs	r2, #0
 8001e82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	691b      	ldr	r3, [r3, #16]
 8001e8a:	f003 0308 	and.w	r3, r3, #8
 8001e8e:	2b08      	cmp	r3, #8
 8001e90:	d122      	bne.n	8001ed8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	f003 0308 	and.w	r3, r3, #8
 8001e9c:	2b08      	cmp	r3, #8
 8001e9e:	d11b      	bne.n	8001ed8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f06f 0208 	mvn.w	r2, #8
 8001ea8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2204      	movs	r2, #4
 8001eae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	69db      	ldr	r3, [r3, #28]
 8001eb6:	f003 0303 	and.w	r3, r3, #3
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d003      	beq.n	8001ec6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f000 f89a 	bl	8001ff8 <HAL_TIM_IC_CaptureCallback>
 8001ec4:	e005      	b.n	8001ed2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f000 f88c 	bl	8001fe4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ecc:	6878      	ldr	r0, [r7, #4]
 8001ece:	f000 f89d 	bl	800200c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	691b      	ldr	r3, [r3, #16]
 8001ede:	f003 0310 	and.w	r3, r3, #16
 8001ee2:	2b10      	cmp	r3, #16
 8001ee4:	d122      	bne.n	8001f2c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	f003 0310 	and.w	r3, r3, #16
 8001ef0:	2b10      	cmp	r3, #16
 8001ef2:	d11b      	bne.n	8001f2c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f06f 0210 	mvn.w	r2, #16
 8001efc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2208      	movs	r2, #8
 8001f02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	69db      	ldr	r3, [r3, #28]
 8001f0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d003      	beq.n	8001f1a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f000 f870 	bl	8001ff8 <HAL_TIM_IC_CaptureCallback>
 8001f18:	e005      	b.n	8001f26 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f000 f862 	bl	8001fe4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f000 f873 	bl	800200c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	691b      	ldr	r3, [r3, #16]
 8001f32:	f003 0301 	and.w	r3, r3, #1
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d10e      	bne.n	8001f58 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	f003 0301 	and.w	r3, r3, #1
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d107      	bne.n	8001f58 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f06f 0201 	mvn.w	r2, #1
 8001f50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f7fe fc36 	bl	80007c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	691b      	ldr	r3, [r3, #16]
 8001f5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f62:	2b80      	cmp	r3, #128	; 0x80
 8001f64:	d10e      	bne.n	8001f84 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f70:	2b80      	cmp	r3, #128	; 0x80
 8001f72:	d107      	bne.n	8001f84 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001f7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f000 f8e2 	bl	8002148 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	691b      	ldr	r3, [r3, #16]
 8001f8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f8e:	2b40      	cmp	r3, #64	; 0x40
 8001f90:	d10e      	bne.n	8001fb0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f9c:	2b40      	cmp	r3, #64	; 0x40
 8001f9e:	d107      	bne.n	8001fb0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001fa8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f000 f838 	bl	8002020 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	691b      	ldr	r3, [r3, #16]
 8001fb6:	f003 0320 	and.w	r3, r3, #32
 8001fba:	2b20      	cmp	r3, #32
 8001fbc:	d10e      	bne.n	8001fdc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	f003 0320 	and.w	r3, r3, #32
 8001fc8:	2b20      	cmp	r3, #32
 8001fca:	d107      	bne.n	8001fdc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f06f 0220 	mvn.w	r2, #32
 8001fd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	f000 f8ac 	bl	8002134 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001fdc:	bf00      	nop
 8001fde:	3708      	adds	r7, #8
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}

08001fe4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001fec:	bf00      	nop
 8001fee:	370c      	adds	r7, #12
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr

08001ff8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002000:	bf00      	nop
 8002002:	370c      	adds	r7, #12
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr

0800200c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002014:	bf00      	nop
 8002016:	370c      	adds	r7, #12
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr

08002020 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002028:	bf00      	nop
 800202a:	370c      	adds	r7, #12
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr

08002034 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002034:	b480      	push	{r7}
 8002036:	b085      	sub	sp, #20
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
 800203c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	4a34      	ldr	r2, [pc, #208]	; (8002118 <TIM_Base_SetConfig+0xe4>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d00f      	beq.n	800206c <TIM_Base_SetConfig+0x38>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002052:	d00b      	beq.n	800206c <TIM_Base_SetConfig+0x38>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	4a31      	ldr	r2, [pc, #196]	; (800211c <TIM_Base_SetConfig+0xe8>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d007      	beq.n	800206c <TIM_Base_SetConfig+0x38>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	4a30      	ldr	r2, [pc, #192]	; (8002120 <TIM_Base_SetConfig+0xec>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d003      	beq.n	800206c <TIM_Base_SetConfig+0x38>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	4a2f      	ldr	r2, [pc, #188]	; (8002124 <TIM_Base_SetConfig+0xf0>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d108      	bne.n	800207e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002072:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	68fa      	ldr	r2, [r7, #12]
 800207a:	4313      	orrs	r3, r2
 800207c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a25      	ldr	r2, [pc, #148]	; (8002118 <TIM_Base_SetConfig+0xe4>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d01b      	beq.n	80020be <TIM_Base_SetConfig+0x8a>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800208c:	d017      	beq.n	80020be <TIM_Base_SetConfig+0x8a>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a22      	ldr	r2, [pc, #136]	; (800211c <TIM_Base_SetConfig+0xe8>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d013      	beq.n	80020be <TIM_Base_SetConfig+0x8a>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a21      	ldr	r2, [pc, #132]	; (8002120 <TIM_Base_SetConfig+0xec>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d00f      	beq.n	80020be <TIM_Base_SetConfig+0x8a>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a20      	ldr	r2, [pc, #128]	; (8002124 <TIM_Base_SetConfig+0xf0>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d00b      	beq.n	80020be <TIM_Base_SetConfig+0x8a>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4a1f      	ldr	r2, [pc, #124]	; (8002128 <TIM_Base_SetConfig+0xf4>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d007      	beq.n	80020be <TIM_Base_SetConfig+0x8a>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4a1e      	ldr	r2, [pc, #120]	; (800212c <TIM_Base_SetConfig+0xf8>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d003      	beq.n	80020be <TIM_Base_SetConfig+0x8a>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4a1d      	ldr	r2, [pc, #116]	; (8002130 <TIM_Base_SetConfig+0xfc>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d108      	bne.n	80020d0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	68db      	ldr	r3, [r3, #12]
 80020ca:	68fa      	ldr	r2, [r7, #12]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	695b      	ldr	r3, [r3, #20]
 80020da:	4313      	orrs	r3, r2
 80020dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	68fa      	ldr	r2, [r7, #12]
 80020e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	689a      	ldr	r2, [r3, #8]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	4a08      	ldr	r2, [pc, #32]	; (8002118 <TIM_Base_SetConfig+0xe4>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d103      	bne.n	8002104 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	691a      	ldr	r2, [r3, #16]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2201      	movs	r2, #1
 8002108:	615a      	str	r2, [r3, #20]
}
 800210a:	bf00      	nop
 800210c:	3714      	adds	r7, #20
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr
 8002116:	bf00      	nop
 8002118:	40010000 	.word	0x40010000
 800211c:	40000400 	.word	0x40000400
 8002120:	40000800 	.word	0x40000800
 8002124:	40000c00 	.word	0x40000c00
 8002128:	40014000 	.word	0x40014000
 800212c:	40014400 	.word	0x40014400
 8002130:	40014800 	.word	0x40014800

08002134 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800213c:	bf00      	nop
 800213e:	370c      	adds	r7, #12
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr

08002148 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002150:	bf00      	nop
 8002152:	370c      	adds	r7, #12
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr

0800215c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b082      	sub	sp, #8
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d101      	bne.n	800216e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e03f      	b.n	80021ee <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002174:	b2db      	uxtb	r3, r3
 8002176:	2b00      	cmp	r3, #0
 8002178:	d106      	bne.n	8002188 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2200      	movs	r2, #0
 800217e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f7fe fb62 	bl	800084c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2224      	movs	r2, #36	; 0x24
 800218c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	68da      	ldr	r2, [r3, #12]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800219e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80021a0:	6878      	ldr	r0, [r7, #4]
 80021a2:	f000 fcbf 	bl	8002b24 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	691a      	ldr	r2, [r3, #16]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80021b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	695a      	ldr	r2, [r3, #20]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80021c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	68da      	ldr	r2, [r3, #12]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80021d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2200      	movs	r2, #0
 80021da:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2220      	movs	r2, #32
 80021e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2220      	movs	r2, #32
 80021e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80021ec:	2300      	movs	r3, #0
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3708      	adds	r7, #8
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}

080021f6 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80021f6:	b480      	push	{r7}
 80021f8:	b085      	sub	sp, #20
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	60f8      	str	r0, [r7, #12]
 80021fe:	60b9      	str	r1, [r7, #8]
 8002200:	4613      	mov	r3, r2
 8002202:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800220a:	b2db      	uxtb	r3, r3
 800220c:	2b20      	cmp	r3, #32
 800220e:	d130      	bne.n	8002272 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d002      	beq.n	800221c <HAL_UART_Transmit_IT+0x26>
 8002216:	88fb      	ldrh	r3, [r7, #6]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d101      	bne.n	8002220 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	e029      	b.n	8002274 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002226:	2b01      	cmp	r3, #1
 8002228:	d101      	bne.n	800222e <HAL_UART_Transmit_IT+0x38>
 800222a:	2302      	movs	r3, #2
 800222c:	e022      	b.n	8002274 <HAL_UART_Transmit_IT+0x7e>
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	2201      	movs	r2, #1
 8002232:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	68ba      	ldr	r2, [r7, #8]
 800223a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	88fa      	ldrh	r2, [r7, #6]
 8002240:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	88fa      	ldrh	r2, [r7, #6]
 8002246:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	2200      	movs	r2, #0
 800224c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	2221      	movs	r2, #33	; 0x21
 8002252:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2200      	movs	r2, #0
 800225a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	68da      	ldr	r2, [r3, #12]
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800226c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800226e:	2300      	movs	r3, #0
 8002270:	e000      	b.n	8002274 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8002272:	2302      	movs	r3, #2
  }
}
 8002274:	4618      	mov	r0, r3
 8002276:	3714      	adds	r7, #20
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr

08002280 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b0ba      	sub	sp, #232	; 0xe8
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	695b      	ldr	r3, [r3, #20]
 80022a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80022a6:	2300      	movs	r3, #0
 80022a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80022ac:	2300      	movs	r3, #0
 80022ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80022b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80022b6:	f003 030f 	and.w	r3, r3, #15
 80022ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80022be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d10f      	bne.n	80022e6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80022c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80022ca:	f003 0320 	and.w	r3, r3, #32
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d009      	beq.n	80022e6 <HAL_UART_IRQHandler+0x66>
 80022d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80022d6:	f003 0320 	and.w	r3, r3, #32
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d003      	beq.n	80022e6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f000 fb65 	bl	80029ae <UART_Receive_IT>
      return;
 80022e4:	e256      	b.n	8002794 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80022e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	f000 80de 	beq.w	80024ac <HAL_UART_IRQHandler+0x22c>
 80022f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80022f4:	f003 0301 	and.w	r3, r3, #1
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d106      	bne.n	800230a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80022fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002300:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002304:	2b00      	cmp	r3, #0
 8002306:	f000 80d1 	beq.w	80024ac <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800230a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800230e:	f003 0301 	and.w	r3, r3, #1
 8002312:	2b00      	cmp	r3, #0
 8002314:	d00b      	beq.n	800232e <HAL_UART_IRQHandler+0xae>
 8002316:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800231a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800231e:	2b00      	cmp	r3, #0
 8002320:	d005      	beq.n	800232e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002326:	f043 0201 	orr.w	r2, r3, #1
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800232e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002332:	f003 0304 	and.w	r3, r3, #4
 8002336:	2b00      	cmp	r3, #0
 8002338:	d00b      	beq.n	8002352 <HAL_UART_IRQHandler+0xd2>
 800233a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800233e:	f003 0301 	and.w	r3, r3, #1
 8002342:	2b00      	cmp	r3, #0
 8002344:	d005      	beq.n	8002352 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234a:	f043 0202 	orr.w	r2, r3, #2
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002352:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002356:	f003 0302 	and.w	r3, r3, #2
 800235a:	2b00      	cmp	r3, #0
 800235c:	d00b      	beq.n	8002376 <HAL_UART_IRQHandler+0xf6>
 800235e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002362:	f003 0301 	and.w	r3, r3, #1
 8002366:	2b00      	cmp	r3, #0
 8002368:	d005      	beq.n	8002376 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236e:	f043 0204 	orr.w	r2, r3, #4
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002376:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800237a:	f003 0308 	and.w	r3, r3, #8
 800237e:	2b00      	cmp	r3, #0
 8002380:	d011      	beq.n	80023a6 <HAL_UART_IRQHandler+0x126>
 8002382:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002386:	f003 0320 	and.w	r3, r3, #32
 800238a:	2b00      	cmp	r3, #0
 800238c:	d105      	bne.n	800239a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800238e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002392:	f003 0301 	and.w	r3, r3, #1
 8002396:	2b00      	cmp	r3, #0
 8002398:	d005      	beq.n	80023a6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239e:	f043 0208 	orr.w	r2, r3, #8
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	f000 81ed 	beq.w	800278a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80023b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023b4:	f003 0320 	and.w	r3, r3, #32
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d008      	beq.n	80023ce <HAL_UART_IRQHandler+0x14e>
 80023bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80023c0:	f003 0320 	and.w	r3, r3, #32
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d002      	beq.n	80023ce <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	f000 faf0 	bl	80029ae <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	695b      	ldr	r3, [r3, #20]
 80023d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023d8:	2b40      	cmp	r3, #64	; 0x40
 80023da:	bf0c      	ite	eq
 80023dc:	2301      	moveq	r3, #1
 80023de:	2300      	movne	r3, #0
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ea:	f003 0308 	and.w	r3, r3, #8
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d103      	bne.n	80023fa <HAL_UART_IRQHandler+0x17a>
 80023f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d04f      	beq.n	800249a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f000 f9f8 	bl	80027f0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	695b      	ldr	r3, [r3, #20]
 8002406:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800240a:	2b40      	cmp	r3, #64	; 0x40
 800240c:	d141      	bne.n	8002492 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	3314      	adds	r3, #20
 8002414:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002418:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800241c:	e853 3f00 	ldrex	r3, [r3]
 8002420:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002424:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002428:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800242c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	3314      	adds	r3, #20
 8002436:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800243a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800243e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002442:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002446:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800244a:	e841 2300 	strex	r3, r2, [r1]
 800244e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002452:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d1d9      	bne.n	800240e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800245e:	2b00      	cmp	r3, #0
 8002460:	d013      	beq.n	800248a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002466:	4a7d      	ldr	r2, [pc, #500]	; (800265c <HAL_UART_IRQHandler+0x3dc>)
 8002468:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800246e:	4618      	mov	r0, r3
 8002470:	f7fe fd3a 	bl	8000ee8 <HAL_DMA_Abort_IT>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d016      	beq.n	80024a8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800247e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002480:	687a      	ldr	r2, [r7, #4]
 8002482:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002484:	4610      	mov	r0, r2
 8002486:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002488:	e00e      	b.n	80024a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f000 f99a 	bl	80027c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002490:	e00a      	b.n	80024a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f000 f996 	bl	80027c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002498:	e006      	b.n	80024a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f000 f992 	bl	80027c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2200      	movs	r2, #0
 80024a4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80024a6:	e170      	b.n	800278a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024a8:	bf00      	nop
    return;
 80024aa:	e16e      	b.n	800278a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b0:	2b01      	cmp	r3, #1
 80024b2:	f040 814a 	bne.w	800274a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80024b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024ba:	f003 0310 	and.w	r3, r3, #16
 80024be:	2b00      	cmp	r3, #0
 80024c0:	f000 8143 	beq.w	800274a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80024c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80024c8:	f003 0310 	and.w	r3, r3, #16
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	f000 813c 	beq.w	800274a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80024d2:	2300      	movs	r3, #0
 80024d4:	60bb      	str	r3, [r7, #8]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	60bb      	str	r3, [r7, #8]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	60bb      	str	r3, [r7, #8]
 80024e6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	695b      	ldr	r3, [r3, #20]
 80024ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024f2:	2b40      	cmp	r3, #64	; 0x40
 80024f4:	f040 80b4 	bne.w	8002660 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002504:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002508:	2b00      	cmp	r3, #0
 800250a:	f000 8140 	beq.w	800278e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002512:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002516:	429a      	cmp	r2, r3
 8002518:	f080 8139 	bcs.w	800278e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002522:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002528:	69db      	ldr	r3, [r3, #28]
 800252a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800252e:	f000 8088 	beq.w	8002642 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	330c      	adds	r3, #12
 8002538:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800253c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002540:	e853 3f00 	ldrex	r3, [r3]
 8002544:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002548:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800254c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002550:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	330c      	adds	r3, #12
 800255a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800255e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002562:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002566:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800256a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800256e:	e841 2300 	strex	r3, r2, [r1]
 8002572:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002576:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800257a:	2b00      	cmp	r3, #0
 800257c:	d1d9      	bne.n	8002532 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	3314      	adds	r3, #20
 8002584:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002586:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002588:	e853 3f00 	ldrex	r3, [r3]
 800258c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800258e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002590:	f023 0301 	bic.w	r3, r3, #1
 8002594:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	3314      	adds	r3, #20
 800259e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80025a2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80025a6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025a8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80025aa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80025ae:	e841 2300 	strex	r3, r2, [r1]
 80025b2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80025b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d1e1      	bne.n	800257e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	3314      	adds	r3, #20
 80025c0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80025c4:	e853 3f00 	ldrex	r3, [r3]
 80025c8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80025ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80025d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	3314      	adds	r3, #20
 80025da:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80025de:	66fa      	str	r2, [r7, #108]	; 0x6c
 80025e0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025e2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80025e4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80025e6:	e841 2300 	strex	r3, r2, [r1]
 80025ea:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80025ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d1e3      	bne.n	80025ba <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2220      	movs	r2, #32
 80025f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2200      	movs	r2, #0
 80025fe:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	330c      	adds	r3, #12
 8002606:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002608:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800260a:	e853 3f00 	ldrex	r3, [r3]
 800260e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002610:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002612:	f023 0310 	bic.w	r3, r3, #16
 8002616:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	330c      	adds	r3, #12
 8002620:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002624:	65ba      	str	r2, [r7, #88]	; 0x58
 8002626:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002628:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800262a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800262c:	e841 2300 	strex	r3, r2, [r1]
 8002630:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002632:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002634:	2b00      	cmp	r3, #0
 8002636:	d1e3      	bne.n	8002600 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800263c:	4618      	mov	r0, r3
 800263e:	f7fe fbe3 	bl	8000e08 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800264a:	b29b      	uxth	r3, r3
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	b29b      	uxth	r3, r3
 8002650:	4619      	mov	r1, r3
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f000 f8c0 	bl	80027d8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002658:	e099      	b.n	800278e <HAL_UART_IRQHandler+0x50e>
 800265a:	bf00      	nop
 800265c:	080028b7 	.word	0x080028b7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002668:	b29b      	uxth	r3, r3
 800266a:	1ad3      	subs	r3, r2, r3
 800266c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002674:	b29b      	uxth	r3, r3
 8002676:	2b00      	cmp	r3, #0
 8002678:	f000 808b 	beq.w	8002792 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800267c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002680:	2b00      	cmp	r3, #0
 8002682:	f000 8086 	beq.w	8002792 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	330c      	adds	r3, #12
 800268c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800268e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002690:	e853 3f00 	ldrex	r3, [r3]
 8002694:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002696:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002698:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800269c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	330c      	adds	r3, #12
 80026a6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80026aa:	647a      	str	r2, [r7, #68]	; 0x44
 80026ac:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026ae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80026b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80026b2:	e841 2300 	strex	r3, r2, [r1]
 80026b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80026b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d1e3      	bne.n	8002686 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	3314      	adds	r3, #20
 80026c4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c8:	e853 3f00 	ldrex	r3, [r3]
 80026cc:	623b      	str	r3, [r7, #32]
   return(result);
 80026ce:	6a3b      	ldr	r3, [r7, #32]
 80026d0:	f023 0301 	bic.w	r3, r3, #1
 80026d4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	3314      	adds	r3, #20
 80026de:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80026e2:	633a      	str	r2, [r7, #48]	; 0x30
 80026e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80026e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026ea:	e841 2300 	strex	r3, r2, [r1]
 80026ee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80026f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d1e3      	bne.n	80026be <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2220      	movs	r2, #32
 80026fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2200      	movs	r2, #0
 8002702:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	330c      	adds	r3, #12
 800270a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	e853 3f00 	ldrex	r3, [r3]
 8002712:	60fb      	str	r3, [r7, #12]
   return(result);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	f023 0310 	bic.w	r3, r3, #16
 800271a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	330c      	adds	r3, #12
 8002724:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002728:	61fa      	str	r2, [r7, #28]
 800272a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800272c:	69b9      	ldr	r1, [r7, #24]
 800272e:	69fa      	ldr	r2, [r7, #28]
 8002730:	e841 2300 	strex	r3, r2, [r1]
 8002734:	617b      	str	r3, [r7, #20]
   return(result);
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d1e3      	bne.n	8002704 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800273c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002740:	4619      	mov	r1, r3
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	f000 f848 	bl	80027d8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002748:	e023      	b.n	8002792 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800274a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800274e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002752:	2b00      	cmp	r3, #0
 8002754:	d009      	beq.n	800276a <HAL_UART_IRQHandler+0x4ea>
 8002756:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800275a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800275e:	2b00      	cmp	r3, #0
 8002760:	d003      	beq.n	800276a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f000 f8bb 	bl	80028de <UART_Transmit_IT>
    return;
 8002768:	e014      	b.n	8002794 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800276a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800276e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002772:	2b00      	cmp	r3, #0
 8002774:	d00e      	beq.n	8002794 <HAL_UART_IRQHandler+0x514>
 8002776:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800277a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800277e:	2b00      	cmp	r3, #0
 8002780:	d008      	beq.n	8002794 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f000 f8fb 	bl	800297e <UART_EndTransmit_IT>
    return;
 8002788:	e004      	b.n	8002794 <HAL_UART_IRQHandler+0x514>
    return;
 800278a:	bf00      	nop
 800278c:	e002      	b.n	8002794 <HAL_UART_IRQHandler+0x514>
      return;
 800278e:	bf00      	nop
 8002790:	e000      	b.n	8002794 <HAL_UART_IRQHandler+0x514>
      return;
 8002792:	bf00      	nop
  }
}
 8002794:	37e8      	adds	r7, #232	; 0xe8
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop

0800279c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800279c:	b480      	push	{r7}
 800279e:	b083      	sub	sp, #12
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80027a4:	bf00      	nop
 80027a6:	370c      	adds	r7, #12
 80027a8:	46bd      	mov	sp, r7
 80027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ae:	4770      	bx	lr

080027b0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80027b8:	bf00      	nop
 80027ba:	370c      	adds	r7, #12
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr

080027c4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80027cc:	bf00      	nop
 80027ce:	370c      	adds	r7, #12
 80027d0:	46bd      	mov	sp, r7
 80027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d6:	4770      	bx	lr

080027d8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80027d8:	b480      	push	{r7}
 80027da:	b083      	sub	sp, #12
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
 80027e0:	460b      	mov	r3, r1
 80027e2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80027e4:	bf00      	nop
 80027e6:	370c      	adds	r7, #12
 80027e8:	46bd      	mov	sp, r7
 80027ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ee:	4770      	bx	lr

080027f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b095      	sub	sp, #84	; 0x54
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	330c      	adds	r3, #12
 80027fe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002800:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002802:	e853 3f00 	ldrex	r3, [r3]
 8002806:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800280a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800280e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	330c      	adds	r3, #12
 8002816:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002818:	643a      	str	r2, [r7, #64]	; 0x40
 800281a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800281c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800281e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002820:	e841 2300 	strex	r3, r2, [r1]
 8002824:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002828:	2b00      	cmp	r3, #0
 800282a:	d1e5      	bne.n	80027f8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	3314      	adds	r3, #20
 8002832:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002834:	6a3b      	ldr	r3, [r7, #32]
 8002836:	e853 3f00 	ldrex	r3, [r3]
 800283a:	61fb      	str	r3, [r7, #28]
   return(result);
 800283c:	69fb      	ldr	r3, [r7, #28]
 800283e:	f023 0301 	bic.w	r3, r3, #1
 8002842:	64bb      	str	r3, [r7, #72]	; 0x48
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	3314      	adds	r3, #20
 800284a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800284c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800284e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002850:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002852:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002854:	e841 2300 	strex	r3, r2, [r1]
 8002858:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800285a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285c:	2b00      	cmp	r3, #0
 800285e:	d1e5      	bne.n	800282c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002864:	2b01      	cmp	r3, #1
 8002866:	d119      	bne.n	800289c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	330c      	adds	r3, #12
 800286e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	e853 3f00 	ldrex	r3, [r3]
 8002876:	60bb      	str	r3, [r7, #8]
   return(result);
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	f023 0310 	bic.w	r3, r3, #16
 800287e:	647b      	str	r3, [r7, #68]	; 0x44
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	330c      	adds	r3, #12
 8002886:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002888:	61ba      	str	r2, [r7, #24]
 800288a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800288c:	6979      	ldr	r1, [r7, #20]
 800288e:	69ba      	ldr	r2, [r7, #24]
 8002890:	e841 2300 	strex	r3, r2, [r1]
 8002894:	613b      	str	r3, [r7, #16]
   return(result);
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d1e5      	bne.n	8002868 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2220      	movs	r2, #32
 80028a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2200      	movs	r2, #0
 80028a8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80028aa:	bf00      	nop
 80028ac:	3754      	adds	r7, #84	; 0x54
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr

080028b6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80028b6:	b580      	push	{r7, lr}
 80028b8:	b084      	sub	sp, #16
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028c2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2200      	movs	r2, #0
 80028c8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	2200      	movs	r2, #0
 80028ce:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80028d0:	68f8      	ldr	r0, [r7, #12]
 80028d2:	f7ff ff77 	bl	80027c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80028d6:	bf00      	nop
 80028d8:	3710      	adds	r7, #16
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}

080028de <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80028de:	b480      	push	{r7}
 80028e0:	b085      	sub	sp, #20
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	2b21      	cmp	r3, #33	; 0x21
 80028f0:	d13e      	bne.n	8002970 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028fa:	d114      	bne.n	8002926 <UART_Transmit_IT+0x48>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	691b      	ldr	r3, [r3, #16]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d110      	bne.n	8002926 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6a1b      	ldr	r3, [r3, #32]
 8002908:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	881b      	ldrh	r3, [r3, #0]
 800290e:	461a      	mov	r2, r3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002918:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6a1b      	ldr	r3, [r3, #32]
 800291e:	1c9a      	adds	r2, r3, #2
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	621a      	str	r2, [r3, #32]
 8002924:	e008      	b.n	8002938 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6a1b      	ldr	r3, [r3, #32]
 800292a:	1c59      	adds	r1, r3, #1
 800292c:	687a      	ldr	r2, [r7, #4]
 800292e:	6211      	str	r1, [r2, #32]
 8002930:	781a      	ldrb	r2, [r3, #0]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800293c:	b29b      	uxth	r3, r3
 800293e:	3b01      	subs	r3, #1
 8002940:	b29b      	uxth	r3, r3
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	4619      	mov	r1, r3
 8002946:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002948:	2b00      	cmp	r3, #0
 800294a:	d10f      	bne.n	800296c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	68da      	ldr	r2, [r3, #12]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800295a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	68da      	ldr	r2, [r3, #12]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800296a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800296c:	2300      	movs	r3, #0
 800296e:	e000      	b.n	8002972 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002970:	2302      	movs	r3, #2
  }
}
 8002972:	4618      	mov	r0, r3
 8002974:	3714      	adds	r7, #20
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr

0800297e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800297e:	b580      	push	{r7, lr}
 8002980:	b082      	sub	sp, #8
 8002982:	af00      	add	r7, sp, #0
 8002984:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	68da      	ldr	r2, [r3, #12]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002994:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2220      	movs	r2, #32
 800299a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f7ff fefc 	bl	800279c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80029a4:	2300      	movs	r3, #0
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	3708      	adds	r7, #8
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}

080029ae <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80029ae:	b580      	push	{r7, lr}
 80029b0:	b08c      	sub	sp, #48	; 0x30
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	2b22      	cmp	r3, #34	; 0x22
 80029c0:	f040 80ab 	bne.w	8002b1a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029cc:	d117      	bne.n	80029fe <UART_Receive_IT+0x50>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	691b      	ldr	r3, [r3, #16]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d113      	bne.n	80029fe <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80029d6:	2300      	movs	r3, #0
 80029d8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029de:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	b29b      	uxth	r3, r3
 80029e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029ec:	b29a      	uxth	r2, r3
 80029ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029f0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029f6:	1c9a      	adds	r2, r3, #2
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	629a      	str	r2, [r3, #40]	; 0x28
 80029fc:	e026      	b.n	8002a4c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a02:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002a04:	2300      	movs	r3, #0
 8002a06:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a10:	d007      	beq.n	8002a22 <UART_Receive_IT+0x74>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d10a      	bne.n	8002a30 <UART_Receive_IT+0x82>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	691b      	ldr	r3, [r3, #16]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d106      	bne.n	8002a30 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	b2da      	uxtb	r2, r3
 8002a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a2c:	701a      	strb	r2, [r3, #0]
 8002a2e:	e008      	b.n	8002a42 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a3c:	b2da      	uxtb	r2, r3
 8002a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a40:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a46:	1c5a      	adds	r2, r3, #1
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002a50:	b29b      	uxth	r3, r3
 8002a52:	3b01      	subs	r3, #1
 8002a54:	b29b      	uxth	r3, r3
 8002a56:	687a      	ldr	r2, [r7, #4]
 8002a58:	4619      	mov	r1, r3
 8002a5a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d15a      	bne.n	8002b16 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	68da      	ldr	r2, [r3, #12]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f022 0220 	bic.w	r2, r2, #32
 8002a6e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	68da      	ldr	r2, [r3, #12]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a7e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	695a      	ldr	r2, [r3, #20]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f022 0201 	bic.w	r2, r2, #1
 8002a8e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2220      	movs	r2, #32
 8002a94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d135      	bne.n	8002b0c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	330c      	adds	r3, #12
 8002aac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	e853 3f00 	ldrex	r3, [r3]
 8002ab4:	613b      	str	r3, [r7, #16]
   return(result);
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	f023 0310 	bic.w	r3, r3, #16
 8002abc:	627b      	str	r3, [r7, #36]	; 0x24
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	330c      	adds	r3, #12
 8002ac4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ac6:	623a      	str	r2, [r7, #32]
 8002ac8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002aca:	69f9      	ldr	r1, [r7, #28]
 8002acc:	6a3a      	ldr	r2, [r7, #32]
 8002ace:	e841 2300 	strex	r3, r2, [r1]
 8002ad2:	61bb      	str	r3, [r7, #24]
   return(result);
 8002ad4:	69bb      	ldr	r3, [r7, #24]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d1e5      	bne.n	8002aa6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 0310 	and.w	r3, r3, #16
 8002ae4:	2b10      	cmp	r3, #16
 8002ae6:	d10a      	bne.n	8002afe <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002ae8:	2300      	movs	r3, #0
 8002aea:	60fb      	str	r3, [r7, #12]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	60fb      	str	r3, [r7, #12]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	60fb      	str	r3, [r7, #12]
 8002afc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002b02:	4619      	mov	r1, r3
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	f7ff fe67 	bl	80027d8 <HAL_UARTEx_RxEventCallback>
 8002b0a:	e002      	b.n	8002b12 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002b0c:	6878      	ldr	r0, [r7, #4]
 8002b0e:	f7ff fe4f 	bl	80027b0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002b12:	2300      	movs	r3, #0
 8002b14:	e002      	b.n	8002b1c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002b16:	2300      	movs	r3, #0
 8002b18:	e000      	b.n	8002b1c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8002b1a:	2302      	movs	r3, #2
  }
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3730      	adds	r7, #48	; 0x30
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}

08002b24 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b28:	b0c0      	sub	sp, #256	; 0x100
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	691b      	ldr	r3, [r3, #16]
 8002b38:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002b3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b40:	68d9      	ldr	r1, [r3, #12]
 8002b42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	ea40 0301 	orr.w	r3, r0, r1
 8002b4c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002b4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b52:	689a      	ldr	r2, [r3, #8]
 8002b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b58:	691b      	ldr	r3, [r3, #16]
 8002b5a:	431a      	orrs	r2, r3
 8002b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b60:	695b      	ldr	r3, [r3, #20]
 8002b62:	431a      	orrs	r2, r3
 8002b64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b68:	69db      	ldr	r3, [r3, #28]
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002b70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	68db      	ldr	r3, [r3, #12]
 8002b78:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002b7c:	f021 010c 	bic.w	r1, r1, #12
 8002b80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002b8a:	430b      	orrs	r3, r1
 8002b8c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	695b      	ldr	r3, [r3, #20]
 8002b96:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002b9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b9e:	6999      	ldr	r1, [r3, #24]
 8002ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	ea40 0301 	orr.w	r3, r0, r1
 8002baa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002bac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	4b8f      	ldr	r3, [pc, #572]	; (8002df0 <UART_SetConfig+0x2cc>)
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d005      	beq.n	8002bc4 <UART_SetConfig+0xa0>
 8002bb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	4b8d      	ldr	r3, [pc, #564]	; (8002df4 <UART_SetConfig+0x2d0>)
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d104      	bne.n	8002bce <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002bc4:	f7ff f804 	bl	8001bd0 <HAL_RCC_GetPCLK2Freq>
 8002bc8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002bcc:	e003      	b.n	8002bd6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002bce:	f7fe ffeb 	bl	8001ba8 <HAL_RCC_GetPCLK1Freq>
 8002bd2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002bd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bda:	69db      	ldr	r3, [r3, #28]
 8002bdc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002be0:	f040 810c 	bne.w	8002dfc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002be4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002be8:	2200      	movs	r2, #0
 8002bea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002bee:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002bf2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002bf6:	4622      	mov	r2, r4
 8002bf8:	462b      	mov	r3, r5
 8002bfa:	1891      	adds	r1, r2, r2
 8002bfc:	65b9      	str	r1, [r7, #88]	; 0x58
 8002bfe:	415b      	adcs	r3, r3
 8002c00:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002c02:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002c06:	4621      	mov	r1, r4
 8002c08:	eb12 0801 	adds.w	r8, r2, r1
 8002c0c:	4629      	mov	r1, r5
 8002c0e:	eb43 0901 	adc.w	r9, r3, r1
 8002c12:	f04f 0200 	mov.w	r2, #0
 8002c16:	f04f 0300 	mov.w	r3, #0
 8002c1a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c1e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c22:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c26:	4690      	mov	r8, r2
 8002c28:	4699      	mov	r9, r3
 8002c2a:	4623      	mov	r3, r4
 8002c2c:	eb18 0303 	adds.w	r3, r8, r3
 8002c30:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002c34:	462b      	mov	r3, r5
 8002c36:	eb49 0303 	adc.w	r3, r9, r3
 8002c3a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002c3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	2200      	movs	r2, #0
 8002c46:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002c4a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002c4e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002c52:	460b      	mov	r3, r1
 8002c54:	18db      	adds	r3, r3, r3
 8002c56:	653b      	str	r3, [r7, #80]	; 0x50
 8002c58:	4613      	mov	r3, r2
 8002c5a:	eb42 0303 	adc.w	r3, r2, r3
 8002c5e:	657b      	str	r3, [r7, #84]	; 0x54
 8002c60:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002c64:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002c68:	f7fd faba 	bl	80001e0 <__aeabi_uldivmod>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	460b      	mov	r3, r1
 8002c70:	4b61      	ldr	r3, [pc, #388]	; (8002df8 <UART_SetConfig+0x2d4>)
 8002c72:	fba3 2302 	umull	r2, r3, r3, r2
 8002c76:	095b      	lsrs	r3, r3, #5
 8002c78:	011c      	lsls	r4, r3, #4
 8002c7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c7e:	2200      	movs	r2, #0
 8002c80:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002c84:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002c88:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002c8c:	4642      	mov	r2, r8
 8002c8e:	464b      	mov	r3, r9
 8002c90:	1891      	adds	r1, r2, r2
 8002c92:	64b9      	str	r1, [r7, #72]	; 0x48
 8002c94:	415b      	adcs	r3, r3
 8002c96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c98:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002c9c:	4641      	mov	r1, r8
 8002c9e:	eb12 0a01 	adds.w	sl, r2, r1
 8002ca2:	4649      	mov	r1, r9
 8002ca4:	eb43 0b01 	adc.w	fp, r3, r1
 8002ca8:	f04f 0200 	mov.w	r2, #0
 8002cac:	f04f 0300 	mov.w	r3, #0
 8002cb0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002cb4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002cb8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002cbc:	4692      	mov	sl, r2
 8002cbe:	469b      	mov	fp, r3
 8002cc0:	4643      	mov	r3, r8
 8002cc2:	eb1a 0303 	adds.w	r3, sl, r3
 8002cc6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002cca:	464b      	mov	r3, r9
 8002ccc:	eb4b 0303 	adc.w	r3, fp, r3
 8002cd0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002cd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002ce0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002ce4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002ce8:	460b      	mov	r3, r1
 8002cea:	18db      	adds	r3, r3, r3
 8002cec:	643b      	str	r3, [r7, #64]	; 0x40
 8002cee:	4613      	mov	r3, r2
 8002cf0:	eb42 0303 	adc.w	r3, r2, r3
 8002cf4:	647b      	str	r3, [r7, #68]	; 0x44
 8002cf6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002cfa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002cfe:	f7fd fa6f 	bl	80001e0 <__aeabi_uldivmod>
 8002d02:	4602      	mov	r2, r0
 8002d04:	460b      	mov	r3, r1
 8002d06:	4611      	mov	r1, r2
 8002d08:	4b3b      	ldr	r3, [pc, #236]	; (8002df8 <UART_SetConfig+0x2d4>)
 8002d0a:	fba3 2301 	umull	r2, r3, r3, r1
 8002d0e:	095b      	lsrs	r3, r3, #5
 8002d10:	2264      	movs	r2, #100	; 0x64
 8002d12:	fb02 f303 	mul.w	r3, r2, r3
 8002d16:	1acb      	subs	r3, r1, r3
 8002d18:	00db      	lsls	r3, r3, #3
 8002d1a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002d1e:	4b36      	ldr	r3, [pc, #216]	; (8002df8 <UART_SetConfig+0x2d4>)
 8002d20:	fba3 2302 	umull	r2, r3, r3, r2
 8002d24:	095b      	lsrs	r3, r3, #5
 8002d26:	005b      	lsls	r3, r3, #1
 8002d28:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002d2c:	441c      	add	r4, r3
 8002d2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d32:	2200      	movs	r2, #0
 8002d34:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002d38:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002d3c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002d40:	4642      	mov	r2, r8
 8002d42:	464b      	mov	r3, r9
 8002d44:	1891      	adds	r1, r2, r2
 8002d46:	63b9      	str	r1, [r7, #56]	; 0x38
 8002d48:	415b      	adcs	r3, r3
 8002d4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d4c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002d50:	4641      	mov	r1, r8
 8002d52:	1851      	adds	r1, r2, r1
 8002d54:	6339      	str	r1, [r7, #48]	; 0x30
 8002d56:	4649      	mov	r1, r9
 8002d58:	414b      	adcs	r3, r1
 8002d5a:	637b      	str	r3, [r7, #52]	; 0x34
 8002d5c:	f04f 0200 	mov.w	r2, #0
 8002d60:	f04f 0300 	mov.w	r3, #0
 8002d64:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002d68:	4659      	mov	r1, fp
 8002d6a:	00cb      	lsls	r3, r1, #3
 8002d6c:	4651      	mov	r1, sl
 8002d6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d72:	4651      	mov	r1, sl
 8002d74:	00ca      	lsls	r2, r1, #3
 8002d76:	4610      	mov	r0, r2
 8002d78:	4619      	mov	r1, r3
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	4642      	mov	r2, r8
 8002d7e:	189b      	adds	r3, r3, r2
 8002d80:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002d84:	464b      	mov	r3, r9
 8002d86:	460a      	mov	r2, r1
 8002d88:	eb42 0303 	adc.w	r3, r2, r3
 8002d8c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002d90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	2200      	movs	r2, #0
 8002d98:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002d9c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002da0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002da4:	460b      	mov	r3, r1
 8002da6:	18db      	adds	r3, r3, r3
 8002da8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002daa:	4613      	mov	r3, r2
 8002dac:	eb42 0303 	adc.w	r3, r2, r3
 8002db0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002db2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002db6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002dba:	f7fd fa11 	bl	80001e0 <__aeabi_uldivmod>
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	460b      	mov	r3, r1
 8002dc2:	4b0d      	ldr	r3, [pc, #52]	; (8002df8 <UART_SetConfig+0x2d4>)
 8002dc4:	fba3 1302 	umull	r1, r3, r3, r2
 8002dc8:	095b      	lsrs	r3, r3, #5
 8002dca:	2164      	movs	r1, #100	; 0x64
 8002dcc:	fb01 f303 	mul.w	r3, r1, r3
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	00db      	lsls	r3, r3, #3
 8002dd4:	3332      	adds	r3, #50	; 0x32
 8002dd6:	4a08      	ldr	r2, [pc, #32]	; (8002df8 <UART_SetConfig+0x2d4>)
 8002dd8:	fba2 2303 	umull	r2, r3, r2, r3
 8002ddc:	095b      	lsrs	r3, r3, #5
 8002dde:	f003 0207 	and.w	r2, r3, #7
 8002de2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4422      	add	r2, r4
 8002dea:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002dec:	e106      	b.n	8002ffc <UART_SetConfig+0x4d8>
 8002dee:	bf00      	nop
 8002df0:	40011000 	.word	0x40011000
 8002df4:	40011400 	.word	0x40011400
 8002df8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002dfc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e00:	2200      	movs	r2, #0
 8002e02:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002e06:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002e0a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002e0e:	4642      	mov	r2, r8
 8002e10:	464b      	mov	r3, r9
 8002e12:	1891      	adds	r1, r2, r2
 8002e14:	6239      	str	r1, [r7, #32]
 8002e16:	415b      	adcs	r3, r3
 8002e18:	627b      	str	r3, [r7, #36]	; 0x24
 8002e1a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002e1e:	4641      	mov	r1, r8
 8002e20:	1854      	adds	r4, r2, r1
 8002e22:	4649      	mov	r1, r9
 8002e24:	eb43 0501 	adc.w	r5, r3, r1
 8002e28:	f04f 0200 	mov.w	r2, #0
 8002e2c:	f04f 0300 	mov.w	r3, #0
 8002e30:	00eb      	lsls	r3, r5, #3
 8002e32:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e36:	00e2      	lsls	r2, r4, #3
 8002e38:	4614      	mov	r4, r2
 8002e3a:	461d      	mov	r5, r3
 8002e3c:	4643      	mov	r3, r8
 8002e3e:	18e3      	adds	r3, r4, r3
 8002e40:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002e44:	464b      	mov	r3, r9
 8002e46:	eb45 0303 	adc.w	r3, r5, r3
 8002e4a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002e4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	2200      	movs	r2, #0
 8002e56:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002e5a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002e5e:	f04f 0200 	mov.w	r2, #0
 8002e62:	f04f 0300 	mov.w	r3, #0
 8002e66:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002e6a:	4629      	mov	r1, r5
 8002e6c:	008b      	lsls	r3, r1, #2
 8002e6e:	4621      	mov	r1, r4
 8002e70:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e74:	4621      	mov	r1, r4
 8002e76:	008a      	lsls	r2, r1, #2
 8002e78:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002e7c:	f7fd f9b0 	bl	80001e0 <__aeabi_uldivmod>
 8002e80:	4602      	mov	r2, r0
 8002e82:	460b      	mov	r3, r1
 8002e84:	4b60      	ldr	r3, [pc, #384]	; (8003008 <UART_SetConfig+0x4e4>)
 8002e86:	fba3 2302 	umull	r2, r3, r3, r2
 8002e8a:	095b      	lsrs	r3, r3, #5
 8002e8c:	011c      	lsls	r4, r3, #4
 8002e8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e92:	2200      	movs	r2, #0
 8002e94:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002e98:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002e9c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002ea0:	4642      	mov	r2, r8
 8002ea2:	464b      	mov	r3, r9
 8002ea4:	1891      	adds	r1, r2, r2
 8002ea6:	61b9      	str	r1, [r7, #24]
 8002ea8:	415b      	adcs	r3, r3
 8002eaa:	61fb      	str	r3, [r7, #28]
 8002eac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002eb0:	4641      	mov	r1, r8
 8002eb2:	1851      	adds	r1, r2, r1
 8002eb4:	6139      	str	r1, [r7, #16]
 8002eb6:	4649      	mov	r1, r9
 8002eb8:	414b      	adcs	r3, r1
 8002eba:	617b      	str	r3, [r7, #20]
 8002ebc:	f04f 0200 	mov.w	r2, #0
 8002ec0:	f04f 0300 	mov.w	r3, #0
 8002ec4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ec8:	4659      	mov	r1, fp
 8002eca:	00cb      	lsls	r3, r1, #3
 8002ecc:	4651      	mov	r1, sl
 8002ece:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ed2:	4651      	mov	r1, sl
 8002ed4:	00ca      	lsls	r2, r1, #3
 8002ed6:	4610      	mov	r0, r2
 8002ed8:	4619      	mov	r1, r3
 8002eda:	4603      	mov	r3, r0
 8002edc:	4642      	mov	r2, r8
 8002ede:	189b      	adds	r3, r3, r2
 8002ee0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002ee4:	464b      	mov	r3, r9
 8002ee6:	460a      	mov	r2, r1
 8002ee8:	eb42 0303 	adc.w	r3, r2, r3
 8002eec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002ef0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	67bb      	str	r3, [r7, #120]	; 0x78
 8002efa:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002efc:	f04f 0200 	mov.w	r2, #0
 8002f00:	f04f 0300 	mov.w	r3, #0
 8002f04:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002f08:	4649      	mov	r1, r9
 8002f0a:	008b      	lsls	r3, r1, #2
 8002f0c:	4641      	mov	r1, r8
 8002f0e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f12:	4641      	mov	r1, r8
 8002f14:	008a      	lsls	r2, r1, #2
 8002f16:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002f1a:	f7fd f961 	bl	80001e0 <__aeabi_uldivmod>
 8002f1e:	4602      	mov	r2, r0
 8002f20:	460b      	mov	r3, r1
 8002f22:	4611      	mov	r1, r2
 8002f24:	4b38      	ldr	r3, [pc, #224]	; (8003008 <UART_SetConfig+0x4e4>)
 8002f26:	fba3 2301 	umull	r2, r3, r3, r1
 8002f2a:	095b      	lsrs	r3, r3, #5
 8002f2c:	2264      	movs	r2, #100	; 0x64
 8002f2e:	fb02 f303 	mul.w	r3, r2, r3
 8002f32:	1acb      	subs	r3, r1, r3
 8002f34:	011b      	lsls	r3, r3, #4
 8002f36:	3332      	adds	r3, #50	; 0x32
 8002f38:	4a33      	ldr	r2, [pc, #204]	; (8003008 <UART_SetConfig+0x4e4>)
 8002f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f3e:	095b      	lsrs	r3, r3, #5
 8002f40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f44:	441c      	add	r4, r3
 8002f46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	673b      	str	r3, [r7, #112]	; 0x70
 8002f4e:	677a      	str	r2, [r7, #116]	; 0x74
 8002f50:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002f54:	4642      	mov	r2, r8
 8002f56:	464b      	mov	r3, r9
 8002f58:	1891      	adds	r1, r2, r2
 8002f5a:	60b9      	str	r1, [r7, #8]
 8002f5c:	415b      	adcs	r3, r3
 8002f5e:	60fb      	str	r3, [r7, #12]
 8002f60:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002f64:	4641      	mov	r1, r8
 8002f66:	1851      	adds	r1, r2, r1
 8002f68:	6039      	str	r1, [r7, #0]
 8002f6a:	4649      	mov	r1, r9
 8002f6c:	414b      	adcs	r3, r1
 8002f6e:	607b      	str	r3, [r7, #4]
 8002f70:	f04f 0200 	mov.w	r2, #0
 8002f74:	f04f 0300 	mov.w	r3, #0
 8002f78:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002f7c:	4659      	mov	r1, fp
 8002f7e:	00cb      	lsls	r3, r1, #3
 8002f80:	4651      	mov	r1, sl
 8002f82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f86:	4651      	mov	r1, sl
 8002f88:	00ca      	lsls	r2, r1, #3
 8002f8a:	4610      	mov	r0, r2
 8002f8c:	4619      	mov	r1, r3
 8002f8e:	4603      	mov	r3, r0
 8002f90:	4642      	mov	r2, r8
 8002f92:	189b      	adds	r3, r3, r2
 8002f94:	66bb      	str	r3, [r7, #104]	; 0x68
 8002f96:	464b      	mov	r3, r9
 8002f98:	460a      	mov	r2, r1
 8002f9a:	eb42 0303 	adc.w	r3, r2, r3
 8002f9e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002fa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	663b      	str	r3, [r7, #96]	; 0x60
 8002faa:	667a      	str	r2, [r7, #100]	; 0x64
 8002fac:	f04f 0200 	mov.w	r2, #0
 8002fb0:	f04f 0300 	mov.w	r3, #0
 8002fb4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002fb8:	4649      	mov	r1, r9
 8002fba:	008b      	lsls	r3, r1, #2
 8002fbc:	4641      	mov	r1, r8
 8002fbe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002fc2:	4641      	mov	r1, r8
 8002fc4:	008a      	lsls	r2, r1, #2
 8002fc6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002fca:	f7fd f909 	bl	80001e0 <__aeabi_uldivmod>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	460b      	mov	r3, r1
 8002fd2:	4b0d      	ldr	r3, [pc, #52]	; (8003008 <UART_SetConfig+0x4e4>)
 8002fd4:	fba3 1302 	umull	r1, r3, r3, r2
 8002fd8:	095b      	lsrs	r3, r3, #5
 8002fda:	2164      	movs	r1, #100	; 0x64
 8002fdc:	fb01 f303 	mul.w	r3, r1, r3
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	011b      	lsls	r3, r3, #4
 8002fe4:	3332      	adds	r3, #50	; 0x32
 8002fe6:	4a08      	ldr	r2, [pc, #32]	; (8003008 <UART_SetConfig+0x4e4>)
 8002fe8:	fba2 2303 	umull	r2, r3, r2, r3
 8002fec:	095b      	lsrs	r3, r3, #5
 8002fee:	f003 020f 	and.w	r2, r3, #15
 8002ff2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4422      	add	r2, r4
 8002ffa:	609a      	str	r2, [r3, #8]
}
 8002ffc:	bf00      	nop
 8002ffe:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003002:	46bd      	mov	sp, r7
 8003004:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003008:	51eb851f 	.word	0x51eb851f

0800300c <__NVIC_SetPriority>:
{
 800300c:	b480      	push	{r7}
 800300e:	b083      	sub	sp, #12
 8003010:	af00      	add	r7, sp, #0
 8003012:	4603      	mov	r3, r0
 8003014:	6039      	str	r1, [r7, #0]
 8003016:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003018:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800301c:	2b00      	cmp	r3, #0
 800301e:	db0a      	blt.n	8003036 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	b2da      	uxtb	r2, r3
 8003024:	490c      	ldr	r1, [pc, #48]	; (8003058 <__NVIC_SetPriority+0x4c>)
 8003026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800302a:	0112      	lsls	r2, r2, #4
 800302c:	b2d2      	uxtb	r2, r2
 800302e:	440b      	add	r3, r1
 8003030:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003034:	e00a      	b.n	800304c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	b2da      	uxtb	r2, r3
 800303a:	4908      	ldr	r1, [pc, #32]	; (800305c <__NVIC_SetPriority+0x50>)
 800303c:	79fb      	ldrb	r3, [r7, #7]
 800303e:	f003 030f 	and.w	r3, r3, #15
 8003042:	3b04      	subs	r3, #4
 8003044:	0112      	lsls	r2, r2, #4
 8003046:	b2d2      	uxtb	r2, r2
 8003048:	440b      	add	r3, r1
 800304a:	761a      	strb	r2, [r3, #24]
}
 800304c:	bf00      	nop
 800304e:	370c      	adds	r7, #12
 8003050:	46bd      	mov	sp, r7
 8003052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003056:	4770      	bx	lr
 8003058:	e000e100 	.word	0xe000e100
 800305c:	e000ed00 	.word	0xe000ed00

08003060 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003060:	b580      	push	{r7, lr}
 8003062:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003064:	4b05      	ldr	r3, [pc, #20]	; (800307c <SysTick_Handler+0x1c>)
 8003066:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003068:	f001 fd62 	bl	8004b30 <xTaskGetSchedulerState>
 800306c:	4603      	mov	r3, r0
 800306e:	2b01      	cmp	r3, #1
 8003070:	d001      	beq.n	8003076 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003072:	f002 fb49 	bl	8005708 <xPortSysTickHandler>
  }
}
 8003076:	bf00      	nop
 8003078:	bd80      	pop	{r7, pc}
 800307a:	bf00      	nop
 800307c:	e000e010 	.word	0xe000e010

08003080 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003080:	b580      	push	{r7, lr}
 8003082:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003084:	2100      	movs	r1, #0
 8003086:	f06f 0004 	mvn.w	r0, #4
 800308a:	f7ff ffbf 	bl	800300c <__NVIC_SetPriority>
#endif
}
 800308e:	bf00      	nop
 8003090:	bd80      	pop	{r7, pc}
	...

08003094 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003094:	b480      	push	{r7}
 8003096:	b083      	sub	sp, #12
 8003098:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800309a:	f3ef 8305 	mrs	r3, IPSR
 800309e:	603b      	str	r3, [r7, #0]
  return(result);
 80030a0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d003      	beq.n	80030ae <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80030a6:	f06f 0305 	mvn.w	r3, #5
 80030aa:	607b      	str	r3, [r7, #4]
 80030ac:	e00c      	b.n	80030c8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80030ae:	4b0a      	ldr	r3, [pc, #40]	; (80030d8 <osKernelInitialize+0x44>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d105      	bne.n	80030c2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80030b6:	4b08      	ldr	r3, [pc, #32]	; (80030d8 <osKernelInitialize+0x44>)
 80030b8:	2201      	movs	r2, #1
 80030ba:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80030bc:	2300      	movs	r3, #0
 80030be:	607b      	str	r3, [r7, #4]
 80030c0:	e002      	b.n	80030c8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80030c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80030c6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80030c8:	687b      	ldr	r3, [r7, #4]
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	370c      	adds	r7, #12
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr
 80030d6:	bf00      	nop
 80030d8:	20000118 	.word	0x20000118

080030dc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80030dc:	b580      	push	{r7, lr}
 80030de:	b082      	sub	sp, #8
 80030e0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80030e2:	f3ef 8305 	mrs	r3, IPSR
 80030e6:	603b      	str	r3, [r7, #0]
  return(result);
 80030e8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d003      	beq.n	80030f6 <osKernelStart+0x1a>
    stat = osErrorISR;
 80030ee:	f06f 0305 	mvn.w	r3, #5
 80030f2:	607b      	str	r3, [r7, #4]
 80030f4:	e010      	b.n	8003118 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80030f6:	4b0b      	ldr	r3, [pc, #44]	; (8003124 <osKernelStart+0x48>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d109      	bne.n	8003112 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80030fe:	f7ff ffbf 	bl	8003080 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003102:	4b08      	ldr	r3, [pc, #32]	; (8003124 <osKernelStart+0x48>)
 8003104:	2202      	movs	r2, #2
 8003106:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003108:	f001 f8b6 	bl	8004278 <vTaskStartScheduler>
      stat = osOK;
 800310c:	2300      	movs	r3, #0
 800310e:	607b      	str	r3, [r7, #4]
 8003110:	e002      	b.n	8003118 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003112:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003116:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003118:	687b      	ldr	r3, [r7, #4]
}
 800311a:	4618      	mov	r0, r3
 800311c:	3708      	adds	r7, #8
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
 8003122:	bf00      	nop
 8003124:	20000118 	.word	0x20000118

08003128 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003128:	b580      	push	{r7, lr}
 800312a:	b08e      	sub	sp, #56	; 0x38
 800312c:	af04      	add	r7, sp, #16
 800312e:	60f8      	str	r0, [r7, #12]
 8003130:	60b9      	str	r1, [r7, #8]
 8003132:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003134:	2300      	movs	r3, #0
 8003136:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003138:	f3ef 8305 	mrs	r3, IPSR
 800313c:	617b      	str	r3, [r7, #20]
  return(result);
 800313e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003140:	2b00      	cmp	r3, #0
 8003142:	d17e      	bne.n	8003242 <osThreadNew+0x11a>
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d07b      	beq.n	8003242 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800314a:	2380      	movs	r3, #128	; 0x80
 800314c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800314e:	2318      	movs	r3, #24
 8003150:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003152:	2300      	movs	r3, #0
 8003154:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8003156:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800315a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d045      	beq.n	80031ee <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d002      	beq.n	8003170 <osThreadNew+0x48>
        name = attr->name;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	699b      	ldr	r3, [r3, #24]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d002      	beq.n	800317e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	699b      	ldr	r3, [r3, #24]
 800317c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800317e:	69fb      	ldr	r3, [r7, #28]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d008      	beq.n	8003196 <osThreadNew+0x6e>
 8003184:	69fb      	ldr	r3, [r7, #28]
 8003186:	2b38      	cmp	r3, #56	; 0x38
 8003188:	d805      	bhi.n	8003196 <osThreadNew+0x6e>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	f003 0301 	and.w	r3, r3, #1
 8003192:	2b00      	cmp	r3, #0
 8003194:	d001      	beq.n	800319a <osThreadNew+0x72>
        return (NULL);
 8003196:	2300      	movs	r3, #0
 8003198:	e054      	b.n	8003244 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	695b      	ldr	r3, [r3, #20]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d003      	beq.n	80031aa <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	695b      	ldr	r3, [r3, #20]
 80031a6:	089b      	lsrs	r3, r3, #2
 80031a8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d00e      	beq.n	80031d0 <osThreadNew+0xa8>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	68db      	ldr	r3, [r3, #12]
 80031b6:	2ba7      	cmp	r3, #167	; 0xa7
 80031b8:	d90a      	bls.n	80031d0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d006      	beq.n	80031d0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	695b      	ldr	r3, [r3, #20]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d002      	beq.n	80031d0 <osThreadNew+0xa8>
        mem = 1;
 80031ca:	2301      	movs	r3, #1
 80031cc:	61bb      	str	r3, [r7, #24]
 80031ce:	e010      	b.n	80031f2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d10c      	bne.n	80031f2 <osThreadNew+0xca>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d108      	bne.n	80031f2 <osThreadNew+0xca>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	691b      	ldr	r3, [r3, #16]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d104      	bne.n	80031f2 <osThreadNew+0xca>
          mem = 0;
 80031e8:	2300      	movs	r3, #0
 80031ea:	61bb      	str	r3, [r7, #24]
 80031ec:	e001      	b.n	80031f2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80031ee:	2300      	movs	r3, #0
 80031f0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80031f2:	69bb      	ldr	r3, [r7, #24]
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	d110      	bne.n	800321a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80031fc:	687a      	ldr	r2, [r7, #4]
 80031fe:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003200:	9202      	str	r2, [sp, #8]
 8003202:	9301      	str	r3, [sp, #4]
 8003204:	69fb      	ldr	r3, [r7, #28]
 8003206:	9300      	str	r3, [sp, #0]
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	6a3a      	ldr	r2, [r7, #32]
 800320c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800320e:	68f8      	ldr	r0, [r7, #12]
 8003210:	f000 fe46 	bl	8003ea0 <xTaskCreateStatic>
 8003214:	4603      	mov	r3, r0
 8003216:	613b      	str	r3, [r7, #16]
 8003218:	e013      	b.n	8003242 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800321a:	69bb      	ldr	r3, [r7, #24]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d110      	bne.n	8003242 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003220:	6a3b      	ldr	r3, [r7, #32]
 8003222:	b29a      	uxth	r2, r3
 8003224:	f107 0310 	add.w	r3, r7, #16
 8003228:	9301      	str	r3, [sp, #4]
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	9300      	str	r3, [sp, #0]
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003232:	68f8      	ldr	r0, [r7, #12]
 8003234:	f000 fe91 	bl	8003f5a <xTaskCreate>
 8003238:	4603      	mov	r3, r0
 800323a:	2b01      	cmp	r3, #1
 800323c:	d001      	beq.n	8003242 <osThreadNew+0x11a>
            hTask = NULL;
 800323e:	2300      	movs	r3, #0
 8003240:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003242:	693b      	ldr	r3, [r7, #16]
}
 8003244:	4618      	mov	r0, r3
 8003246:	3728      	adds	r7, #40	; 0x28
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}

0800324c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800324c:	b580      	push	{r7, lr}
 800324e:	b084      	sub	sp, #16
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003254:	f3ef 8305 	mrs	r3, IPSR
 8003258:	60bb      	str	r3, [r7, #8]
  return(result);
 800325a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800325c:	2b00      	cmp	r3, #0
 800325e:	d003      	beq.n	8003268 <osDelay+0x1c>
    stat = osErrorISR;
 8003260:	f06f 0305 	mvn.w	r3, #5
 8003264:	60fb      	str	r3, [r7, #12]
 8003266:	e007      	b.n	8003278 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003268:	2300      	movs	r3, #0
 800326a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d002      	beq.n	8003278 <osDelay+0x2c>
      vTaskDelay(ticks);
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f000 ffcc 	bl	8004210 <vTaskDelay>
    }
  }

  return (stat);
 8003278:	68fb      	ldr	r3, [r7, #12]
}
 800327a:	4618      	mov	r0, r3
 800327c:	3710      	adds	r7, #16
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}
	...

08003284 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003284:	b480      	push	{r7}
 8003286:	b085      	sub	sp, #20
 8003288:	af00      	add	r7, sp, #0
 800328a:	60f8      	str	r0, [r7, #12]
 800328c:	60b9      	str	r1, [r7, #8]
 800328e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	4a07      	ldr	r2, [pc, #28]	; (80032b0 <vApplicationGetIdleTaskMemory+0x2c>)
 8003294:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	4a06      	ldr	r2, [pc, #24]	; (80032b4 <vApplicationGetIdleTaskMemory+0x30>)
 800329a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2280      	movs	r2, #128	; 0x80
 80032a0:	601a      	str	r2, [r3, #0]
}
 80032a2:	bf00      	nop
 80032a4:	3714      	adds	r7, #20
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr
 80032ae:	bf00      	nop
 80032b0:	2000011c 	.word	0x2000011c
 80032b4:	200001c4 	.word	0x200001c4

080032b8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80032b8:	b480      	push	{r7}
 80032ba:	b085      	sub	sp, #20
 80032bc:	af00      	add	r7, sp, #0
 80032be:	60f8      	str	r0, [r7, #12]
 80032c0:	60b9      	str	r1, [r7, #8]
 80032c2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	4a07      	ldr	r2, [pc, #28]	; (80032e4 <vApplicationGetTimerTaskMemory+0x2c>)
 80032c8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	4a06      	ldr	r2, [pc, #24]	; (80032e8 <vApplicationGetTimerTaskMemory+0x30>)
 80032ce:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80032d6:	601a      	str	r2, [r3, #0]
}
 80032d8:	bf00      	nop
 80032da:	3714      	adds	r7, #20
 80032dc:	46bd      	mov	sp, r7
 80032de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e2:	4770      	bx	lr
 80032e4:	200003c4 	.word	0x200003c4
 80032e8:	2000046c 	.word	0x2000046c

080032ec <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80032ec:	b480      	push	{r7}
 80032ee:	b083      	sub	sp, #12
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	f103 0208 	add.w	r2, r3, #8
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003304:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	f103 0208 	add.w	r2, r3, #8
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	f103 0208 	add.w	r2, r3, #8
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2200      	movs	r2, #0
 800331e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003320:	bf00      	nop
 8003322:	370c      	adds	r7, #12
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr

0800332c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800332c:	b480      	push	{r7}
 800332e:	b083      	sub	sp, #12
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2200      	movs	r2, #0
 8003338:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800333a:	bf00      	nop
 800333c:	370c      	adds	r7, #12
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr

08003346 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003346:	b480      	push	{r7}
 8003348:	b085      	sub	sp, #20
 800334a:	af00      	add	r7, sp, #0
 800334c:	6078      	str	r0, [r7, #4]
 800334e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	68fa      	ldr	r2, [r7, #12]
 800335a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	689a      	ldr	r2, [r3, #8]
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	683a      	ldr	r2, [r7, #0]
 800336a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	683a      	ldr	r2, [r7, #0]
 8003370:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	687a      	ldr	r2, [r7, #4]
 8003376:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	1c5a      	adds	r2, r3, #1
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	601a      	str	r2, [r3, #0]
}
 8003382:	bf00      	nop
 8003384:	3714      	adds	r7, #20
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr

0800338e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800338e:	b480      	push	{r7}
 8003390:	b085      	sub	sp, #20
 8003392:	af00      	add	r7, sp, #0
 8003394:	6078      	str	r0, [r7, #4]
 8003396:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80033a4:	d103      	bne.n	80033ae <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	691b      	ldr	r3, [r3, #16]
 80033aa:	60fb      	str	r3, [r7, #12]
 80033ac:	e00c      	b.n	80033c8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	3308      	adds	r3, #8
 80033b2:	60fb      	str	r3, [r7, #12]
 80033b4:	e002      	b.n	80033bc <vListInsert+0x2e>
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	60fb      	str	r3, [r7, #12]
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	68ba      	ldr	r2, [r7, #8]
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d2f6      	bcs.n	80033b6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	685a      	ldr	r2, [r3, #4]
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	683a      	ldr	r2, [r7, #0]
 80033d6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	68fa      	ldr	r2, [r7, #12]
 80033dc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	683a      	ldr	r2, [r7, #0]
 80033e2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	687a      	ldr	r2, [r7, #4]
 80033e8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	1c5a      	adds	r2, r3, #1
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	601a      	str	r2, [r3, #0]
}
 80033f4:	bf00      	nop
 80033f6:	3714      	adds	r7, #20
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr

08003400 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003400:	b480      	push	{r7}
 8003402:	b085      	sub	sp, #20
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	691b      	ldr	r3, [r3, #16]
 800340c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	687a      	ldr	r2, [r7, #4]
 8003414:	6892      	ldr	r2, [r2, #8]
 8003416:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	687a      	ldr	r2, [r7, #4]
 800341e:	6852      	ldr	r2, [r2, #4]
 8003420:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	687a      	ldr	r2, [r7, #4]
 8003428:	429a      	cmp	r2, r3
 800342a:	d103      	bne.n	8003434 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	689a      	ldr	r2, [r3, #8]
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2200      	movs	r2, #0
 8003438:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	1e5a      	subs	r2, r3, #1
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
}
 8003448:	4618      	mov	r0, r3
 800344a:	3714      	adds	r7, #20
 800344c:	46bd      	mov	sp, r7
 800344e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003452:	4770      	bx	lr

08003454 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b084      	sub	sp, #16
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
 800345c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d10a      	bne.n	800347e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800346c:	f383 8811 	msr	BASEPRI, r3
 8003470:	f3bf 8f6f 	isb	sy
 8003474:	f3bf 8f4f 	dsb	sy
 8003478:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800347a:	bf00      	nop
 800347c:	e7fe      	b.n	800347c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800347e:	f002 f8b1 	bl	80055e4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800348a:	68f9      	ldr	r1, [r7, #12]
 800348c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800348e:	fb01 f303 	mul.w	r3, r1, r3
 8003492:	441a      	add	r2, r3
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2200      	movs	r2, #0
 800349c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034ae:	3b01      	subs	r3, #1
 80034b0:	68f9      	ldr	r1, [r7, #12]
 80034b2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80034b4:	fb01 f303 	mul.w	r3, r1, r3
 80034b8:	441a      	add	r2, r3
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	22ff      	movs	r2, #255	; 0xff
 80034c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	22ff      	movs	r2, #255	; 0xff
 80034ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d114      	bne.n	80034fe <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	691b      	ldr	r3, [r3, #16]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d01a      	beq.n	8003512 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	3310      	adds	r3, #16
 80034e0:	4618      	mov	r0, r3
 80034e2:	f001 f963 	bl	80047ac <xTaskRemoveFromEventList>
 80034e6:	4603      	mov	r3, r0
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d012      	beq.n	8003512 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80034ec:	4b0c      	ldr	r3, [pc, #48]	; (8003520 <xQueueGenericReset+0xcc>)
 80034ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034f2:	601a      	str	r2, [r3, #0]
 80034f4:	f3bf 8f4f 	dsb	sy
 80034f8:	f3bf 8f6f 	isb	sy
 80034fc:	e009      	b.n	8003512 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	3310      	adds	r3, #16
 8003502:	4618      	mov	r0, r3
 8003504:	f7ff fef2 	bl	80032ec <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	3324      	adds	r3, #36	; 0x24
 800350c:	4618      	mov	r0, r3
 800350e:	f7ff feed 	bl	80032ec <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003512:	f002 f897 	bl	8005644 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003516:	2301      	movs	r3, #1
}
 8003518:	4618      	mov	r0, r3
 800351a:	3710      	adds	r7, #16
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}
 8003520:	e000ed04 	.word	0xe000ed04

08003524 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003524:	b580      	push	{r7, lr}
 8003526:	b08e      	sub	sp, #56	; 0x38
 8003528:	af02      	add	r7, sp, #8
 800352a:	60f8      	str	r0, [r7, #12]
 800352c:	60b9      	str	r1, [r7, #8]
 800352e:	607a      	str	r2, [r7, #4]
 8003530:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d10a      	bne.n	800354e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800353c:	f383 8811 	msr	BASEPRI, r3
 8003540:	f3bf 8f6f 	isb	sy
 8003544:	f3bf 8f4f 	dsb	sy
 8003548:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800354a:	bf00      	nop
 800354c:	e7fe      	b.n	800354c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d10a      	bne.n	800356a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003558:	f383 8811 	msr	BASEPRI, r3
 800355c:	f3bf 8f6f 	isb	sy
 8003560:	f3bf 8f4f 	dsb	sy
 8003564:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003566:	bf00      	nop
 8003568:	e7fe      	b.n	8003568 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d002      	beq.n	8003576 <xQueueGenericCreateStatic+0x52>
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d001      	beq.n	800357a <xQueueGenericCreateStatic+0x56>
 8003576:	2301      	movs	r3, #1
 8003578:	e000      	b.n	800357c <xQueueGenericCreateStatic+0x58>
 800357a:	2300      	movs	r3, #0
 800357c:	2b00      	cmp	r3, #0
 800357e:	d10a      	bne.n	8003596 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003584:	f383 8811 	msr	BASEPRI, r3
 8003588:	f3bf 8f6f 	isb	sy
 800358c:	f3bf 8f4f 	dsb	sy
 8003590:	623b      	str	r3, [r7, #32]
}
 8003592:	bf00      	nop
 8003594:	e7fe      	b.n	8003594 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d102      	bne.n	80035a2 <xQueueGenericCreateStatic+0x7e>
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d101      	bne.n	80035a6 <xQueueGenericCreateStatic+0x82>
 80035a2:	2301      	movs	r3, #1
 80035a4:	e000      	b.n	80035a8 <xQueueGenericCreateStatic+0x84>
 80035a6:	2300      	movs	r3, #0
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d10a      	bne.n	80035c2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80035ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035b0:	f383 8811 	msr	BASEPRI, r3
 80035b4:	f3bf 8f6f 	isb	sy
 80035b8:	f3bf 8f4f 	dsb	sy
 80035bc:	61fb      	str	r3, [r7, #28]
}
 80035be:	bf00      	nop
 80035c0:	e7fe      	b.n	80035c0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80035c2:	2350      	movs	r3, #80	; 0x50
 80035c4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	2b50      	cmp	r3, #80	; 0x50
 80035ca:	d00a      	beq.n	80035e2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80035cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035d0:	f383 8811 	msr	BASEPRI, r3
 80035d4:	f3bf 8f6f 	isb	sy
 80035d8:	f3bf 8f4f 	dsb	sy
 80035dc:	61bb      	str	r3, [r7, #24]
}
 80035de:	bf00      	nop
 80035e0:	e7fe      	b.n	80035e0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80035e2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80035e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d00d      	beq.n	800360a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80035ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035f0:	2201      	movs	r2, #1
 80035f2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80035f6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80035fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035fc:	9300      	str	r3, [sp, #0]
 80035fe:	4613      	mov	r3, r2
 8003600:	687a      	ldr	r2, [r7, #4]
 8003602:	68b9      	ldr	r1, [r7, #8]
 8003604:	68f8      	ldr	r0, [r7, #12]
 8003606:	f000 f83f 	bl	8003688 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800360a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800360c:	4618      	mov	r0, r3
 800360e:	3730      	adds	r7, #48	; 0x30
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}

08003614 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003614:	b580      	push	{r7, lr}
 8003616:	b08a      	sub	sp, #40	; 0x28
 8003618:	af02      	add	r7, sp, #8
 800361a:	60f8      	str	r0, [r7, #12]
 800361c:	60b9      	str	r1, [r7, #8]
 800361e:	4613      	mov	r3, r2
 8003620:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d10a      	bne.n	800363e <xQueueGenericCreate+0x2a>
	__asm volatile
 8003628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800362c:	f383 8811 	msr	BASEPRI, r3
 8003630:	f3bf 8f6f 	isb	sy
 8003634:	f3bf 8f4f 	dsb	sy
 8003638:	613b      	str	r3, [r7, #16]
}
 800363a:	bf00      	nop
 800363c:	e7fe      	b.n	800363c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	68ba      	ldr	r2, [r7, #8]
 8003642:	fb02 f303 	mul.w	r3, r2, r3
 8003646:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003648:	69fb      	ldr	r3, [r7, #28]
 800364a:	3350      	adds	r3, #80	; 0x50
 800364c:	4618      	mov	r0, r3
 800364e:	f002 f8eb 	bl	8005828 <pvPortMalloc>
 8003652:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003654:	69bb      	ldr	r3, [r7, #24]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d011      	beq.n	800367e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800365a:	69bb      	ldr	r3, [r7, #24]
 800365c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	3350      	adds	r3, #80	; 0x50
 8003662:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003664:	69bb      	ldr	r3, [r7, #24]
 8003666:	2200      	movs	r2, #0
 8003668:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800366c:	79fa      	ldrb	r2, [r7, #7]
 800366e:	69bb      	ldr	r3, [r7, #24]
 8003670:	9300      	str	r3, [sp, #0]
 8003672:	4613      	mov	r3, r2
 8003674:	697a      	ldr	r2, [r7, #20]
 8003676:	68b9      	ldr	r1, [r7, #8]
 8003678:	68f8      	ldr	r0, [r7, #12]
 800367a:	f000 f805 	bl	8003688 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800367e:	69bb      	ldr	r3, [r7, #24]
	}
 8003680:	4618      	mov	r0, r3
 8003682:	3720      	adds	r7, #32
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}

08003688 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b084      	sub	sp, #16
 800368c:	af00      	add	r7, sp, #0
 800368e:	60f8      	str	r0, [r7, #12]
 8003690:	60b9      	str	r1, [r7, #8]
 8003692:	607a      	str	r2, [r7, #4]
 8003694:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d103      	bne.n	80036a4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800369c:	69bb      	ldr	r3, [r7, #24]
 800369e:	69ba      	ldr	r2, [r7, #24]
 80036a0:	601a      	str	r2, [r3, #0]
 80036a2:	e002      	b.n	80036aa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80036a4:	69bb      	ldr	r3, [r7, #24]
 80036a6:	687a      	ldr	r2, [r7, #4]
 80036a8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80036aa:	69bb      	ldr	r3, [r7, #24]
 80036ac:	68fa      	ldr	r2, [r7, #12]
 80036ae:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80036b0:	69bb      	ldr	r3, [r7, #24]
 80036b2:	68ba      	ldr	r2, [r7, #8]
 80036b4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80036b6:	2101      	movs	r1, #1
 80036b8:	69b8      	ldr	r0, [r7, #24]
 80036ba:	f7ff fecb 	bl	8003454 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80036be:	69bb      	ldr	r3, [r7, #24]
 80036c0:	78fa      	ldrb	r2, [r7, #3]
 80036c2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80036c6:	bf00      	nop
 80036c8:	3710      	adds	r7, #16
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}
	...

080036d0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b08e      	sub	sp, #56	; 0x38
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	60f8      	str	r0, [r7, #12]
 80036d8:	60b9      	str	r1, [r7, #8]
 80036da:	607a      	str	r2, [r7, #4]
 80036dc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80036de:	2300      	movs	r3, #0
 80036e0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80036e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d10a      	bne.n	8003702 <xQueueGenericSend+0x32>
	__asm volatile
 80036ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036f0:	f383 8811 	msr	BASEPRI, r3
 80036f4:	f3bf 8f6f 	isb	sy
 80036f8:	f3bf 8f4f 	dsb	sy
 80036fc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80036fe:	bf00      	nop
 8003700:	e7fe      	b.n	8003700 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d103      	bne.n	8003710 <xQueueGenericSend+0x40>
 8003708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800370a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370c:	2b00      	cmp	r3, #0
 800370e:	d101      	bne.n	8003714 <xQueueGenericSend+0x44>
 8003710:	2301      	movs	r3, #1
 8003712:	e000      	b.n	8003716 <xQueueGenericSend+0x46>
 8003714:	2300      	movs	r3, #0
 8003716:	2b00      	cmp	r3, #0
 8003718:	d10a      	bne.n	8003730 <xQueueGenericSend+0x60>
	__asm volatile
 800371a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800371e:	f383 8811 	msr	BASEPRI, r3
 8003722:	f3bf 8f6f 	isb	sy
 8003726:	f3bf 8f4f 	dsb	sy
 800372a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800372c:	bf00      	nop
 800372e:	e7fe      	b.n	800372e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	2b02      	cmp	r3, #2
 8003734:	d103      	bne.n	800373e <xQueueGenericSend+0x6e>
 8003736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800373a:	2b01      	cmp	r3, #1
 800373c:	d101      	bne.n	8003742 <xQueueGenericSend+0x72>
 800373e:	2301      	movs	r3, #1
 8003740:	e000      	b.n	8003744 <xQueueGenericSend+0x74>
 8003742:	2300      	movs	r3, #0
 8003744:	2b00      	cmp	r3, #0
 8003746:	d10a      	bne.n	800375e <xQueueGenericSend+0x8e>
	__asm volatile
 8003748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800374c:	f383 8811 	msr	BASEPRI, r3
 8003750:	f3bf 8f6f 	isb	sy
 8003754:	f3bf 8f4f 	dsb	sy
 8003758:	623b      	str	r3, [r7, #32]
}
 800375a:	bf00      	nop
 800375c:	e7fe      	b.n	800375c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800375e:	f001 f9e7 	bl	8004b30 <xTaskGetSchedulerState>
 8003762:	4603      	mov	r3, r0
 8003764:	2b00      	cmp	r3, #0
 8003766:	d102      	bne.n	800376e <xQueueGenericSend+0x9e>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d101      	bne.n	8003772 <xQueueGenericSend+0xa2>
 800376e:	2301      	movs	r3, #1
 8003770:	e000      	b.n	8003774 <xQueueGenericSend+0xa4>
 8003772:	2300      	movs	r3, #0
 8003774:	2b00      	cmp	r3, #0
 8003776:	d10a      	bne.n	800378e <xQueueGenericSend+0xbe>
	__asm volatile
 8003778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800377c:	f383 8811 	msr	BASEPRI, r3
 8003780:	f3bf 8f6f 	isb	sy
 8003784:	f3bf 8f4f 	dsb	sy
 8003788:	61fb      	str	r3, [r7, #28]
}
 800378a:	bf00      	nop
 800378c:	e7fe      	b.n	800378c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800378e:	f001 ff29 	bl	80055e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003794:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003798:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800379a:	429a      	cmp	r2, r3
 800379c:	d302      	bcc.n	80037a4 <xQueueGenericSend+0xd4>
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	2b02      	cmp	r3, #2
 80037a2:	d129      	bne.n	80037f8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80037a4:	683a      	ldr	r2, [r7, #0]
 80037a6:	68b9      	ldr	r1, [r7, #8]
 80037a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80037aa:	f000 fa0b 	bl	8003bc4 <prvCopyDataToQueue>
 80037ae:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80037b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d010      	beq.n	80037da <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80037b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ba:	3324      	adds	r3, #36	; 0x24
 80037bc:	4618      	mov	r0, r3
 80037be:	f000 fff5 	bl	80047ac <xTaskRemoveFromEventList>
 80037c2:	4603      	mov	r3, r0
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d013      	beq.n	80037f0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80037c8:	4b3f      	ldr	r3, [pc, #252]	; (80038c8 <xQueueGenericSend+0x1f8>)
 80037ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037ce:	601a      	str	r2, [r3, #0]
 80037d0:	f3bf 8f4f 	dsb	sy
 80037d4:	f3bf 8f6f 	isb	sy
 80037d8:	e00a      	b.n	80037f0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80037da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d007      	beq.n	80037f0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80037e0:	4b39      	ldr	r3, [pc, #228]	; (80038c8 <xQueueGenericSend+0x1f8>)
 80037e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037e6:	601a      	str	r2, [r3, #0]
 80037e8:	f3bf 8f4f 	dsb	sy
 80037ec:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80037f0:	f001 ff28 	bl	8005644 <vPortExitCritical>
				return pdPASS;
 80037f4:	2301      	movs	r3, #1
 80037f6:	e063      	b.n	80038c0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d103      	bne.n	8003806 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80037fe:	f001 ff21 	bl	8005644 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003802:	2300      	movs	r3, #0
 8003804:	e05c      	b.n	80038c0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003806:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003808:	2b00      	cmp	r3, #0
 800380a:	d106      	bne.n	800381a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800380c:	f107 0314 	add.w	r3, r7, #20
 8003810:	4618      	mov	r0, r3
 8003812:	f001 f82f 	bl	8004874 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003816:	2301      	movs	r3, #1
 8003818:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800381a:	f001 ff13 	bl	8005644 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800381e:	f000 fd9b 	bl	8004358 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003822:	f001 fedf 	bl	80055e4 <vPortEnterCritical>
 8003826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003828:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800382c:	b25b      	sxtb	r3, r3
 800382e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003832:	d103      	bne.n	800383c <xQueueGenericSend+0x16c>
 8003834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003836:	2200      	movs	r2, #0
 8003838:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800383c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800383e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003842:	b25b      	sxtb	r3, r3
 8003844:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003848:	d103      	bne.n	8003852 <xQueueGenericSend+0x182>
 800384a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800384c:	2200      	movs	r2, #0
 800384e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003852:	f001 fef7 	bl	8005644 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003856:	1d3a      	adds	r2, r7, #4
 8003858:	f107 0314 	add.w	r3, r7, #20
 800385c:	4611      	mov	r1, r2
 800385e:	4618      	mov	r0, r3
 8003860:	f001 f81e 	bl	80048a0 <xTaskCheckForTimeOut>
 8003864:	4603      	mov	r3, r0
 8003866:	2b00      	cmp	r3, #0
 8003868:	d124      	bne.n	80038b4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800386a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800386c:	f000 faa2 	bl	8003db4 <prvIsQueueFull>
 8003870:	4603      	mov	r3, r0
 8003872:	2b00      	cmp	r3, #0
 8003874:	d018      	beq.n	80038a8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003878:	3310      	adds	r3, #16
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	4611      	mov	r1, r2
 800387e:	4618      	mov	r0, r3
 8003880:	f000 ff44 	bl	800470c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003884:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003886:	f000 fa2d 	bl	8003ce4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800388a:	f000 fd73 	bl	8004374 <xTaskResumeAll>
 800388e:	4603      	mov	r3, r0
 8003890:	2b00      	cmp	r3, #0
 8003892:	f47f af7c 	bne.w	800378e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003896:	4b0c      	ldr	r3, [pc, #48]	; (80038c8 <xQueueGenericSend+0x1f8>)
 8003898:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800389c:	601a      	str	r2, [r3, #0]
 800389e:	f3bf 8f4f 	dsb	sy
 80038a2:	f3bf 8f6f 	isb	sy
 80038a6:	e772      	b.n	800378e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80038a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80038aa:	f000 fa1b 	bl	8003ce4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80038ae:	f000 fd61 	bl	8004374 <xTaskResumeAll>
 80038b2:	e76c      	b.n	800378e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80038b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80038b6:	f000 fa15 	bl	8003ce4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80038ba:	f000 fd5b 	bl	8004374 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80038be:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3738      	adds	r7, #56	; 0x38
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}
 80038c8:	e000ed04 	.word	0xe000ed04

080038cc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b090      	sub	sp, #64	; 0x40
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	60f8      	str	r0, [r7, #12]
 80038d4:	60b9      	str	r1, [r7, #8]
 80038d6:	607a      	str	r2, [r7, #4]
 80038d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80038de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d10a      	bne.n	80038fa <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80038e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038e8:	f383 8811 	msr	BASEPRI, r3
 80038ec:	f3bf 8f6f 	isb	sy
 80038f0:	f3bf 8f4f 	dsb	sy
 80038f4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80038f6:	bf00      	nop
 80038f8:	e7fe      	b.n	80038f8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d103      	bne.n	8003908 <xQueueGenericSendFromISR+0x3c>
 8003900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003904:	2b00      	cmp	r3, #0
 8003906:	d101      	bne.n	800390c <xQueueGenericSendFromISR+0x40>
 8003908:	2301      	movs	r3, #1
 800390a:	e000      	b.n	800390e <xQueueGenericSendFromISR+0x42>
 800390c:	2300      	movs	r3, #0
 800390e:	2b00      	cmp	r3, #0
 8003910:	d10a      	bne.n	8003928 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003916:	f383 8811 	msr	BASEPRI, r3
 800391a:	f3bf 8f6f 	isb	sy
 800391e:	f3bf 8f4f 	dsb	sy
 8003922:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003924:	bf00      	nop
 8003926:	e7fe      	b.n	8003926 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	2b02      	cmp	r3, #2
 800392c:	d103      	bne.n	8003936 <xQueueGenericSendFromISR+0x6a>
 800392e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003930:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003932:	2b01      	cmp	r3, #1
 8003934:	d101      	bne.n	800393a <xQueueGenericSendFromISR+0x6e>
 8003936:	2301      	movs	r3, #1
 8003938:	e000      	b.n	800393c <xQueueGenericSendFromISR+0x70>
 800393a:	2300      	movs	r3, #0
 800393c:	2b00      	cmp	r3, #0
 800393e:	d10a      	bne.n	8003956 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003944:	f383 8811 	msr	BASEPRI, r3
 8003948:	f3bf 8f6f 	isb	sy
 800394c:	f3bf 8f4f 	dsb	sy
 8003950:	623b      	str	r3, [r7, #32]
}
 8003952:	bf00      	nop
 8003954:	e7fe      	b.n	8003954 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003956:	f001 ff27 	bl	80057a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800395a:	f3ef 8211 	mrs	r2, BASEPRI
 800395e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003962:	f383 8811 	msr	BASEPRI, r3
 8003966:	f3bf 8f6f 	isb	sy
 800396a:	f3bf 8f4f 	dsb	sy
 800396e:	61fa      	str	r2, [r7, #28]
 8003970:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003972:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003974:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003978:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800397a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800397c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800397e:	429a      	cmp	r2, r3
 8003980:	d302      	bcc.n	8003988 <xQueueGenericSendFromISR+0xbc>
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	2b02      	cmp	r3, #2
 8003986:	d12f      	bne.n	80039e8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800398a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800398e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003996:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003998:	683a      	ldr	r2, [r7, #0]
 800399a:	68b9      	ldr	r1, [r7, #8]
 800399c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800399e:	f000 f911 	bl	8003bc4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80039a2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80039a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80039aa:	d112      	bne.n	80039d2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80039ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d016      	beq.n	80039e2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80039b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039b6:	3324      	adds	r3, #36	; 0x24
 80039b8:	4618      	mov	r0, r3
 80039ba:	f000 fef7 	bl	80047ac <xTaskRemoveFromEventList>
 80039be:	4603      	mov	r3, r0
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d00e      	beq.n	80039e2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d00b      	beq.n	80039e2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2201      	movs	r2, #1
 80039ce:	601a      	str	r2, [r3, #0]
 80039d0:	e007      	b.n	80039e2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80039d2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80039d6:	3301      	adds	r3, #1
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	b25a      	sxtb	r2, r3
 80039dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80039e2:	2301      	movs	r3, #1
 80039e4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80039e6:	e001      	b.n	80039ec <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80039e8:	2300      	movs	r3, #0
 80039ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80039ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039ee:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80039f6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80039f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3740      	adds	r7, #64	; 0x40
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}
	...

08003a04 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b08c      	sub	sp, #48	; 0x30
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	60f8      	str	r0, [r7, #12]
 8003a0c:	60b9      	str	r1, [r7, #8]
 8003a0e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003a10:	2300      	movs	r3, #0
 8003a12:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d10a      	bne.n	8003a34 <xQueueReceive+0x30>
	__asm volatile
 8003a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a22:	f383 8811 	msr	BASEPRI, r3
 8003a26:	f3bf 8f6f 	isb	sy
 8003a2a:	f3bf 8f4f 	dsb	sy
 8003a2e:	623b      	str	r3, [r7, #32]
}
 8003a30:	bf00      	nop
 8003a32:	e7fe      	b.n	8003a32 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d103      	bne.n	8003a42 <xQueueReceive+0x3e>
 8003a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d101      	bne.n	8003a46 <xQueueReceive+0x42>
 8003a42:	2301      	movs	r3, #1
 8003a44:	e000      	b.n	8003a48 <xQueueReceive+0x44>
 8003a46:	2300      	movs	r3, #0
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d10a      	bne.n	8003a62 <xQueueReceive+0x5e>
	__asm volatile
 8003a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a50:	f383 8811 	msr	BASEPRI, r3
 8003a54:	f3bf 8f6f 	isb	sy
 8003a58:	f3bf 8f4f 	dsb	sy
 8003a5c:	61fb      	str	r3, [r7, #28]
}
 8003a5e:	bf00      	nop
 8003a60:	e7fe      	b.n	8003a60 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003a62:	f001 f865 	bl	8004b30 <xTaskGetSchedulerState>
 8003a66:	4603      	mov	r3, r0
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d102      	bne.n	8003a72 <xQueueReceive+0x6e>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d101      	bne.n	8003a76 <xQueueReceive+0x72>
 8003a72:	2301      	movs	r3, #1
 8003a74:	e000      	b.n	8003a78 <xQueueReceive+0x74>
 8003a76:	2300      	movs	r3, #0
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d10a      	bne.n	8003a92 <xQueueReceive+0x8e>
	__asm volatile
 8003a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a80:	f383 8811 	msr	BASEPRI, r3
 8003a84:	f3bf 8f6f 	isb	sy
 8003a88:	f3bf 8f4f 	dsb	sy
 8003a8c:	61bb      	str	r3, [r7, #24]
}
 8003a8e:	bf00      	nop
 8003a90:	e7fe      	b.n	8003a90 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003a92:	f001 fda7 	bl	80055e4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a9a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d01f      	beq.n	8003ae2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003aa2:	68b9      	ldr	r1, [r7, #8]
 8003aa4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003aa6:	f000 f8f7 	bl	8003c98 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aac:	1e5a      	subs	r2, r3, #1
 8003aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ab0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ab4:	691b      	ldr	r3, [r3, #16]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d00f      	beq.n	8003ada <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003abc:	3310      	adds	r3, #16
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f000 fe74 	bl	80047ac <xTaskRemoveFromEventList>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d007      	beq.n	8003ada <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003aca:	4b3d      	ldr	r3, [pc, #244]	; (8003bc0 <xQueueReceive+0x1bc>)
 8003acc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ad0:	601a      	str	r2, [r3, #0]
 8003ad2:	f3bf 8f4f 	dsb	sy
 8003ad6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003ada:	f001 fdb3 	bl	8005644 <vPortExitCritical>
				return pdPASS;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e069      	b.n	8003bb6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d103      	bne.n	8003af0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003ae8:	f001 fdac 	bl	8005644 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003aec:	2300      	movs	r3, #0
 8003aee:	e062      	b.n	8003bb6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d106      	bne.n	8003b04 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003af6:	f107 0310 	add.w	r3, r7, #16
 8003afa:	4618      	mov	r0, r3
 8003afc:	f000 feba 	bl	8004874 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003b00:	2301      	movs	r3, #1
 8003b02:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003b04:	f001 fd9e 	bl	8005644 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003b08:	f000 fc26 	bl	8004358 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003b0c:	f001 fd6a 	bl	80055e4 <vPortEnterCritical>
 8003b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b12:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003b16:	b25b      	sxtb	r3, r3
 8003b18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b1c:	d103      	bne.n	8003b26 <xQueueReceive+0x122>
 8003b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b20:	2200      	movs	r2, #0
 8003b22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b28:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b2c:	b25b      	sxtb	r3, r3
 8003b2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b32:	d103      	bne.n	8003b3c <xQueueReceive+0x138>
 8003b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b36:	2200      	movs	r2, #0
 8003b38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003b3c:	f001 fd82 	bl	8005644 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003b40:	1d3a      	adds	r2, r7, #4
 8003b42:	f107 0310 	add.w	r3, r7, #16
 8003b46:	4611      	mov	r1, r2
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f000 fea9 	bl	80048a0 <xTaskCheckForTimeOut>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d123      	bne.n	8003b9c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003b54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b56:	f000 f917 	bl	8003d88 <prvIsQueueEmpty>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d017      	beq.n	8003b90 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b62:	3324      	adds	r3, #36	; 0x24
 8003b64:	687a      	ldr	r2, [r7, #4]
 8003b66:	4611      	mov	r1, r2
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f000 fdcf 	bl	800470c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003b6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b70:	f000 f8b8 	bl	8003ce4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003b74:	f000 fbfe 	bl	8004374 <xTaskResumeAll>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d189      	bne.n	8003a92 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003b7e:	4b10      	ldr	r3, [pc, #64]	; (8003bc0 <xQueueReceive+0x1bc>)
 8003b80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b84:	601a      	str	r2, [r3, #0]
 8003b86:	f3bf 8f4f 	dsb	sy
 8003b8a:	f3bf 8f6f 	isb	sy
 8003b8e:	e780      	b.n	8003a92 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003b90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b92:	f000 f8a7 	bl	8003ce4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003b96:	f000 fbed 	bl	8004374 <xTaskResumeAll>
 8003b9a:	e77a      	b.n	8003a92 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003b9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b9e:	f000 f8a1 	bl	8003ce4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003ba2:	f000 fbe7 	bl	8004374 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003ba6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ba8:	f000 f8ee 	bl	8003d88 <prvIsQueueEmpty>
 8003bac:	4603      	mov	r3, r0
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	f43f af6f 	beq.w	8003a92 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003bb4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3730      	adds	r7, #48	; 0x30
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}
 8003bbe:	bf00      	nop
 8003bc0:	e000ed04 	.word	0xe000ed04

08003bc4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b086      	sub	sp, #24
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	60f8      	str	r0, [r7, #12]
 8003bcc:	60b9      	str	r1, [r7, #8]
 8003bce:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bd8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d10d      	bne.n	8003bfe <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d14d      	bne.n	8003c86 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f000 ffbc 	bl	8004b6c <xTaskPriorityDisinherit>
 8003bf4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	609a      	str	r2, [r3, #8]
 8003bfc:	e043      	b.n	8003c86 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d119      	bne.n	8003c38 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	6858      	ldr	r0, [r3, #4]
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0c:	461a      	mov	r2, r3
 8003c0e:	68b9      	ldr	r1, [r7, #8]
 8003c10:	f002 f878 	bl	8005d04 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	685a      	ldr	r2, [r3, #4]
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1c:	441a      	add	r2, r3
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	685a      	ldr	r2, [r3, #4]
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	d32b      	bcc.n	8003c86 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681a      	ldr	r2, [r3, #0]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	605a      	str	r2, [r3, #4]
 8003c36:	e026      	b.n	8003c86 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	68d8      	ldr	r0, [r3, #12]
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c40:	461a      	mov	r2, r3
 8003c42:	68b9      	ldr	r1, [r7, #8]
 8003c44:	f002 f85e 	bl	8005d04 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	68da      	ldr	r2, [r3, #12]
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c50:	425b      	negs	r3, r3
 8003c52:	441a      	add	r2, r3
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	68da      	ldr	r2, [r3, #12]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d207      	bcs.n	8003c74 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	689a      	ldr	r2, [r3, #8]
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6c:	425b      	negs	r3, r3
 8003c6e:	441a      	add	r2, r3
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2b02      	cmp	r3, #2
 8003c78:	d105      	bne.n	8003c86 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d002      	beq.n	8003c86 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	3b01      	subs	r3, #1
 8003c84:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	1c5a      	adds	r2, r3, #1
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003c8e:	697b      	ldr	r3, [r7, #20]
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	3718      	adds	r7, #24
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}

08003c98 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b082      	sub	sp, #8
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
 8003ca0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d018      	beq.n	8003cdc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	68da      	ldr	r2, [r3, #12]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb2:	441a      	add	r2, r3
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	68da      	ldr	r2, [r3, #12]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d303      	bcc.n	8003ccc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	68d9      	ldr	r1, [r3, #12]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd4:	461a      	mov	r2, r3
 8003cd6:	6838      	ldr	r0, [r7, #0]
 8003cd8:	f002 f814 	bl	8005d04 <memcpy>
	}
}
 8003cdc:	bf00      	nop
 8003cde:	3708      	adds	r7, #8
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}

08003ce4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b084      	sub	sp, #16
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003cec:	f001 fc7a 	bl	80055e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003cf6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003cf8:	e011      	b.n	8003d1e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d012      	beq.n	8003d28 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	3324      	adds	r3, #36	; 0x24
 8003d06:	4618      	mov	r0, r3
 8003d08:	f000 fd50 	bl	80047ac <xTaskRemoveFromEventList>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d001      	beq.n	8003d16 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003d12:	f000 fe27 	bl	8004964 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003d16:	7bfb      	ldrb	r3, [r7, #15]
 8003d18:	3b01      	subs	r3, #1
 8003d1a:	b2db      	uxtb	r3, r3
 8003d1c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003d1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	dce9      	bgt.n	8003cfa <prvUnlockQueue+0x16>
 8003d26:	e000      	b.n	8003d2a <prvUnlockQueue+0x46>
					break;
 8003d28:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	22ff      	movs	r2, #255	; 0xff
 8003d2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003d32:	f001 fc87 	bl	8005644 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003d36:	f001 fc55 	bl	80055e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003d40:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003d42:	e011      	b.n	8003d68 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	691b      	ldr	r3, [r3, #16]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d012      	beq.n	8003d72 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	3310      	adds	r3, #16
 8003d50:	4618      	mov	r0, r3
 8003d52:	f000 fd2b 	bl	80047ac <xTaskRemoveFromEventList>
 8003d56:	4603      	mov	r3, r0
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d001      	beq.n	8003d60 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003d5c:	f000 fe02 	bl	8004964 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003d60:	7bbb      	ldrb	r3, [r7, #14]
 8003d62:	3b01      	subs	r3, #1
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003d68:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	dce9      	bgt.n	8003d44 <prvUnlockQueue+0x60>
 8003d70:	e000      	b.n	8003d74 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003d72:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	22ff      	movs	r2, #255	; 0xff
 8003d78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003d7c:	f001 fc62 	bl	8005644 <vPortExitCritical>
}
 8003d80:	bf00      	nop
 8003d82:	3710      	adds	r7, #16
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd80      	pop	{r7, pc}

08003d88 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b084      	sub	sp, #16
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003d90:	f001 fc28 	bl	80055e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d102      	bne.n	8003da2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	60fb      	str	r3, [r7, #12]
 8003da0:	e001      	b.n	8003da6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003da2:	2300      	movs	r3, #0
 8003da4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003da6:	f001 fc4d 	bl	8005644 <vPortExitCritical>

	return xReturn;
 8003daa:	68fb      	ldr	r3, [r7, #12]
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	3710      	adds	r7, #16
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}

08003db4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b084      	sub	sp, #16
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003dbc:	f001 fc12 	bl	80055e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d102      	bne.n	8003dd2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	60fb      	str	r3, [r7, #12]
 8003dd0:	e001      	b.n	8003dd6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003dd6:	f001 fc35 	bl	8005644 <vPortExitCritical>

	return xReturn;
 8003dda:	68fb      	ldr	r3, [r7, #12]
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	3710      	adds	r7, #16
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}

08003de4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003de4:	b480      	push	{r7}
 8003de6:	b085      	sub	sp, #20
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
 8003dec:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003dee:	2300      	movs	r3, #0
 8003df0:	60fb      	str	r3, [r7, #12]
 8003df2:	e014      	b.n	8003e1e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003df4:	4a0f      	ldr	r2, [pc, #60]	; (8003e34 <vQueueAddToRegistry+0x50>)
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d10b      	bne.n	8003e18 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003e00:	490c      	ldr	r1, [pc, #48]	; (8003e34 <vQueueAddToRegistry+0x50>)
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	683a      	ldr	r2, [r7, #0]
 8003e06:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003e0a:	4a0a      	ldr	r2, [pc, #40]	; (8003e34 <vQueueAddToRegistry+0x50>)
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	00db      	lsls	r3, r3, #3
 8003e10:	4413      	add	r3, r2
 8003e12:	687a      	ldr	r2, [r7, #4]
 8003e14:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003e16:	e006      	b.n	8003e26 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	3301      	adds	r3, #1
 8003e1c:	60fb      	str	r3, [r7, #12]
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2b07      	cmp	r3, #7
 8003e22:	d9e7      	bls.n	8003df4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003e24:	bf00      	nop
 8003e26:	bf00      	nop
 8003e28:	3714      	adds	r7, #20
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e30:	4770      	bx	lr
 8003e32:	bf00      	nop
 8003e34:	2000086c 	.word	0x2000086c

08003e38 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b086      	sub	sp, #24
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	60f8      	str	r0, [r7, #12]
 8003e40:	60b9      	str	r1, [r7, #8]
 8003e42:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003e48:	f001 fbcc 	bl	80055e4 <vPortEnterCritical>
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003e52:	b25b      	sxtb	r3, r3
 8003e54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e58:	d103      	bne.n	8003e62 <vQueueWaitForMessageRestricted+0x2a>
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003e68:	b25b      	sxtb	r3, r3
 8003e6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e6e:	d103      	bne.n	8003e78 <vQueueWaitForMessageRestricted+0x40>
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	2200      	movs	r2, #0
 8003e74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e78:	f001 fbe4 	bl	8005644 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d106      	bne.n	8003e92 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	3324      	adds	r3, #36	; 0x24
 8003e88:	687a      	ldr	r2, [r7, #4]
 8003e8a:	68b9      	ldr	r1, [r7, #8]
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f000 fc61 	bl	8004754 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003e92:	6978      	ldr	r0, [r7, #20]
 8003e94:	f7ff ff26 	bl	8003ce4 <prvUnlockQueue>
	}
 8003e98:	bf00      	nop
 8003e9a:	3718      	adds	r7, #24
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}

08003ea0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b08e      	sub	sp, #56	; 0x38
 8003ea4:	af04      	add	r7, sp, #16
 8003ea6:	60f8      	str	r0, [r7, #12]
 8003ea8:	60b9      	str	r1, [r7, #8]
 8003eaa:	607a      	str	r2, [r7, #4]
 8003eac:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003eae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d10a      	bne.n	8003eca <xTaskCreateStatic+0x2a>
	__asm volatile
 8003eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eb8:	f383 8811 	msr	BASEPRI, r3
 8003ebc:	f3bf 8f6f 	isb	sy
 8003ec0:	f3bf 8f4f 	dsb	sy
 8003ec4:	623b      	str	r3, [r7, #32]
}
 8003ec6:	bf00      	nop
 8003ec8:	e7fe      	b.n	8003ec8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003eca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d10a      	bne.n	8003ee6 <xTaskCreateStatic+0x46>
	__asm volatile
 8003ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ed4:	f383 8811 	msr	BASEPRI, r3
 8003ed8:	f3bf 8f6f 	isb	sy
 8003edc:	f3bf 8f4f 	dsb	sy
 8003ee0:	61fb      	str	r3, [r7, #28]
}
 8003ee2:	bf00      	nop
 8003ee4:	e7fe      	b.n	8003ee4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003ee6:	23a8      	movs	r3, #168	; 0xa8
 8003ee8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	2ba8      	cmp	r3, #168	; 0xa8
 8003eee:	d00a      	beq.n	8003f06 <xTaskCreateStatic+0x66>
	__asm volatile
 8003ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ef4:	f383 8811 	msr	BASEPRI, r3
 8003ef8:	f3bf 8f6f 	isb	sy
 8003efc:	f3bf 8f4f 	dsb	sy
 8003f00:	61bb      	str	r3, [r7, #24]
}
 8003f02:	bf00      	nop
 8003f04:	e7fe      	b.n	8003f04 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003f06:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003f08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d01e      	beq.n	8003f4c <xTaskCreateStatic+0xac>
 8003f0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d01b      	beq.n	8003f4c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f16:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f1c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f20:	2202      	movs	r2, #2
 8003f22:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003f26:	2300      	movs	r3, #0
 8003f28:	9303      	str	r3, [sp, #12]
 8003f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f2c:	9302      	str	r3, [sp, #8]
 8003f2e:	f107 0314 	add.w	r3, r7, #20
 8003f32:	9301      	str	r3, [sp, #4]
 8003f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f36:	9300      	str	r3, [sp, #0]
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	687a      	ldr	r2, [r7, #4]
 8003f3c:	68b9      	ldr	r1, [r7, #8]
 8003f3e:	68f8      	ldr	r0, [r7, #12]
 8003f40:	f000 f850 	bl	8003fe4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003f44:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003f46:	f000 f8f3 	bl	8004130 <prvAddNewTaskToReadyList>
 8003f4a:	e001      	b.n	8003f50 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003f50:	697b      	ldr	r3, [r7, #20]
	}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3728      	adds	r7, #40	; 0x28
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}

08003f5a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003f5a:	b580      	push	{r7, lr}
 8003f5c:	b08c      	sub	sp, #48	; 0x30
 8003f5e:	af04      	add	r7, sp, #16
 8003f60:	60f8      	str	r0, [r7, #12]
 8003f62:	60b9      	str	r1, [r7, #8]
 8003f64:	603b      	str	r3, [r7, #0]
 8003f66:	4613      	mov	r3, r2
 8003f68:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003f6a:	88fb      	ldrh	r3, [r7, #6]
 8003f6c:	009b      	lsls	r3, r3, #2
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f001 fc5a 	bl	8005828 <pvPortMalloc>
 8003f74:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d00e      	beq.n	8003f9a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003f7c:	20a8      	movs	r0, #168	; 0xa8
 8003f7e:	f001 fc53 	bl	8005828 <pvPortMalloc>
 8003f82:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003f84:	69fb      	ldr	r3, [r7, #28]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d003      	beq.n	8003f92 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003f8a:	69fb      	ldr	r3, [r7, #28]
 8003f8c:	697a      	ldr	r2, [r7, #20]
 8003f8e:	631a      	str	r2, [r3, #48]	; 0x30
 8003f90:	e005      	b.n	8003f9e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003f92:	6978      	ldr	r0, [r7, #20]
 8003f94:	f001 fd14 	bl	80059c0 <vPortFree>
 8003f98:	e001      	b.n	8003f9e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003f9e:	69fb      	ldr	r3, [r7, #28]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d017      	beq.n	8003fd4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003fa4:	69fb      	ldr	r3, [r7, #28]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003fac:	88fa      	ldrh	r2, [r7, #6]
 8003fae:	2300      	movs	r3, #0
 8003fb0:	9303      	str	r3, [sp, #12]
 8003fb2:	69fb      	ldr	r3, [r7, #28]
 8003fb4:	9302      	str	r3, [sp, #8]
 8003fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fb8:	9301      	str	r3, [sp, #4]
 8003fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fbc:	9300      	str	r3, [sp, #0]
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	68b9      	ldr	r1, [r7, #8]
 8003fc2:	68f8      	ldr	r0, [r7, #12]
 8003fc4:	f000 f80e 	bl	8003fe4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003fc8:	69f8      	ldr	r0, [r7, #28]
 8003fca:	f000 f8b1 	bl	8004130 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	61bb      	str	r3, [r7, #24]
 8003fd2:	e002      	b.n	8003fda <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003fd4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003fd8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003fda:	69bb      	ldr	r3, [r7, #24]
	}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	3720      	adds	r7, #32
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}

08003fe4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b088      	sub	sp, #32
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	60f8      	str	r0, [r7, #12]
 8003fec:	60b9      	str	r1, [r7, #8]
 8003fee:	607a      	str	r2, [r7, #4]
 8003ff0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ff4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	009b      	lsls	r3, r3, #2
 8003ffa:	461a      	mov	r2, r3
 8003ffc:	21a5      	movs	r1, #165	; 0xa5
 8003ffe:	f001 fdfd 	bl	8005bfc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004004:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800400c:	3b01      	subs	r3, #1
 800400e:	009b      	lsls	r3, r3, #2
 8004010:	4413      	add	r3, r2
 8004012:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004014:	69bb      	ldr	r3, [r7, #24]
 8004016:	f023 0307 	bic.w	r3, r3, #7
 800401a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800401c:	69bb      	ldr	r3, [r7, #24]
 800401e:	f003 0307 	and.w	r3, r3, #7
 8004022:	2b00      	cmp	r3, #0
 8004024:	d00a      	beq.n	800403c <prvInitialiseNewTask+0x58>
	__asm volatile
 8004026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800402a:	f383 8811 	msr	BASEPRI, r3
 800402e:	f3bf 8f6f 	isb	sy
 8004032:	f3bf 8f4f 	dsb	sy
 8004036:	617b      	str	r3, [r7, #20]
}
 8004038:	bf00      	nop
 800403a:	e7fe      	b.n	800403a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d01f      	beq.n	8004082 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004042:	2300      	movs	r3, #0
 8004044:	61fb      	str	r3, [r7, #28]
 8004046:	e012      	b.n	800406e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004048:	68ba      	ldr	r2, [r7, #8]
 800404a:	69fb      	ldr	r3, [r7, #28]
 800404c:	4413      	add	r3, r2
 800404e:	7819      	ldrb	r1, [r3, #0]
 8004050:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004052:	69fb      	ldr	r3, [r7, #28]
 8004054:	4413      	add	r3, r2
 8004056:	3334      	adds	r3, #52	; 0x34
 8004058:	460a      	mov	r2, r1
 800405a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800405c:	68ba      	ldr	r2, [r7, #8]
 800405e:	69fb      	ldr	r3, [r7, #28]
 8004060:	4413      	add	r3, r2
 8004062:	781b      	ldrb	r3, [r3, #0]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d006      	beq.n	8004076 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004068:	69fb      	ldr	r3, [r7, #28]
 800406a:	3301      	adds	r3, #1
 800406c:	61fb      	str	r3, [r7, #28]
 800406e:	69fb      	ldr	r3, [r7, #28]
 8004070:	2b0f      	cmp	r3, #15
 8004072:	d9e9      	bls.n	8004048 <prvInitialiseNewTask+0x64>
 8004074:	e000      	b.n	8004078 <prvInitialiseNewTask+0x94>
			{
				break;
 8004076:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800407a:	2200      	movs	r2, #0
 800407c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004080:	e003      	b.n	800408a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004084:	2200      	movs	r2, #0
 8004086:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800408a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800408c:	2b37      	cmp	r3, #55	; 0x37
 800408e:	d901      	bls.n	8004094 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004090:	2337      	movs	r3, #55	; 0x37
 8004092:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004096:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004098:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800409a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800409c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800409e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80040a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040a2:	2200      	movs	r2, #0
 80040a4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80040a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040a8:	3304      	adds	r3, #4
 80040aa:	4618      	mov	r0, r3
 80040ac:	f7ff f93e 	bl	800332c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80040b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040b2:	3318      	adds	r3, #24
 80040b4:	4618      	mov	r0, r3
 80040b6:	f7ff f939 	bl	800332c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80040ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040be:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040c2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80040c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040c8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80040ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040ce:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80040d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040d2:	2200      	movs	r2, #0
 80040d4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80040d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040da:	2200      	movs	r2, #0
 80040dc:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80040e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040e2:	3354      	adds	r3, #84	; 0x54
 80040e4:	224c      	movs	r2, #76	; 0x4c
 80040e6:	2100      	movs	r1, #0
 80040e8:	4618      	mov	r0, r3
 80040ea:	f001 fd87 	bl	8005bfc <memset>
 80040ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040f0:	4a0c      	ldr	r2, [pc, #48]	; (8004124 <prvInitialiseNewTask+0x140>)
 80040f2:	659a      	str	r2, [r3, #88]	; 0x58
 80040f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040f6:	4a0c      	ldr	r2, [pc, #48]	; (8004128 <prvInitialiseNewTask+0x144>)
 80040f8:	65da      	str	r2, [r3, #92]	; 0x5c
 80040fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040fc:	4a0b      	ldr	r2, [pc, #44]	; (800412c <prvInitialiseNewTask+0x148>)
 80040fe:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004100:	683a      	ldr	r2, [r7, #0]
 8004102:	68f9      	ldr	r1, [r7, #12]
 8004104:	69b8      	ldr	r0, [r7, #24]
 8004106:	f001 f941 	bl	800538c <pxPortInitialiseStack>
 800410a:	4602      	mov	r2, r0
 800410c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800410e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004112:	2b00      	cmp	r3, #0
 8004114:	d002      	beq.n	800411c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004118:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800411a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800411c:	bf00      	nop
 800411e:	3720      	adds	r7, #32
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}
 8004124:	20004b00 	.word	0x20004b00
 8004128:	20004b68 	.word	0x20004b68
 800412c:	20004bd0 	.word	0x20004bd0

08004130 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b082      	sub	sp, #8
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004138:	f001 fa54 	bl	80055e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800413c:	4b2d      	ldr	r3, [pc, #180]	; (80041f4 <prvAddNewTaskToReadyList+0xc4>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	3301      	adds	r3, #1
 8004142:	4a2c      	ldr	r2, [pc, #176]	; (80041f4 <prvAddNewTaskToReadyList+0xc4>)
 8004144:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004146:	4b2c      	ldr	r3, [pc, #176]	; (80041f8 <prvAddNewTaskToReadyList+0xc8>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d109      	bne.n	8004162 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800414e:	4a2a      	ldr	r2, [pc, #168]	; (80041f8 <prvAddNewTaskToReadyList+0xc8>)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004154:	4b27      	ldr	r3, [pc, #156]	; (80041f4 <prvAddNewTaskToReadyList+0xc4>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	2b01      	cmp	r3, #1
 800415a:	d110      	bne.n	800417e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800415c:	f000 fc26 	bl	80049ac <prvInitialiseTaskLists>
 8004160:	e00d      	b.n	800417e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004162:	4b26      	ldr	r3, [pc, #152]	; (80041fc <prvAddNewTaskToReadyList+0xcc>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d109      	bne.n	800417e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800416a:	4b23      	ldr	r3, [pc, #140]	; (80041f8 <prvAddNewTaskToReadyList+0xc8>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004174:	429a      	cmp	r2, r3
 8004176:	d802      	bhi.n	800417e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004178:	4a1f      	ldr	r2, [pc, #124]	; (80041f8 <prvAddNewTaskToReadyList+0xc8>)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800417e:	4b20      	ldr	r3, [pc, #128]	; (8004200 <prvAddNewTaskToReadyList+0xd0>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	3301      	adds	r3, #1
 8004184:	4a1e      	ldr	r2, [pc, #120]	; (8004200 <prvAddNewTaskToReadyList+0xd0>)
 8004186:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004188:	4b1d      	ldr	r3, [pc, #116]	; (8004200 <prvAddNewTaskToReadyList+0xd0>)
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004194:	4b1b      	ldr	r3, [pc, #108]	; (8004204 <prvAddNewTaskToReadyList+0xd4>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	429a      	cmp	r2, r3
 800419a:	d903      	bls.n	80041a4 <prvAddNewTaskToReadyList+0x74>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a0:	4a18      	ldr	r2, [pc, #96]	; (8004204 <prvAddNewTaskToReadyList+0xd4>)
 80041a2:	6013      	str	r3, [r2, #0]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041a8:	4613      	mov	r3, r2
 80041aa:	009b      	lsls	r3, r3, #2
 80041ac:	4413      	add	r3, r2
 80041ae:	009b      	lsls	r3, r3, #2
 80041b0:	4a15      	ldr	r2, [pc, #84]	; (8004208 <prvAddNewTaskToReadyList+0xd8>)
 80041b2:	441a      	add	r2, r3
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	3304      	adds	r3, #4
 80041b8:	4619      	mov	r1, r3
 80041ba:	4610      	mov	r0, r2
 80041bc:	f7ff f8c3 	bl	8003346 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80041c0:	f001 fa40 	bl	8005644 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80041c4:	4b0d      	ldr	r3, [pc, #52]	; (80041fc <prvAddNewTaskToReadyList+0xcc>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d00e      	beq.n	80041ea <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80041cc:	4b0a      	ldr	r3, [pc, #40]	; (80041f8 <prvAddNewTaskToReadyList+0xc8>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041d6:	429a      	cmp	r2, r3
 80041d8:	d207      	bcs.n	80041ea <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80041da:	4b0c      	ldr	r3, [pc, #48]	; (800420c <prvAddNewTaskToReadyList+0xdc>)
 80041dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041e0:	601a      	str	r2, [r3, #0]
 80041e2:	f3bf 8f4f 	dsb	sy
 80041e6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80041ea:	bf00      	nop
 80041ec:	3708      	adds	r7, #8
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}
 80041f2:	bf00      	nop
 80041f4:	20000d80 	.word	0x20000d80
 80041f8:	200008ac 	.word	0x200008ac
 80041fc:	20000d8c 	.word	0x20000d8c
 8004200:	20000d9c 	.word	0x20000d9c
 8004204:	20000d88 	.word	0x20000d88
 8004208:	200008b0 	.word	0x200008b0
 800420c:	e000ed04 	.word	0xe000ed04

08004210 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004210:	b580      	push	{r7, lr}
 8004212:	b084      	sub	sp, #16
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004218:	2300      	movs	r3, #0
 800421a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d017      	beq.n	8004252 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004222:	4b13      	ldr	r3, [pc, #76]	; (8004270 <vTaskDelay+0x60>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d00a      	beq.n	8004240 <vTaskDelay+0x30>
	__asm volatile
 800422a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800422e:	f383 8811 	msr	BASEPRI, r3
 8004232:	f3bf 8f6f 	isb	sy
 8004236:	f3bf 8f4f 	dsb	sy
 800423a:	60bb      	str	r3, [r7, #8]
}
 800423c:	bf00      	nop
 800423e:	e7fe      	b.n	800423e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004240:	f000 f88a 	bl	8004358 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004244:	2100      	movs	r1, #0
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	f000 fcfe 	bl	8004c48 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800424c:	f000 f892 	bl	8004374 <xTaskResumeAll>
 8004250:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d107      	bne.n	8004268 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004258:	4b06      	ldr	r3, [pc, #24]	; (8004274 <vTaskDelay+0x64>)
 800425a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800425e:	601a      	str	r2, [r3, #0]
 8004260:	f3bf 8f4f 	dsb	sy
 8004264:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004268:	bf00      	nop
 800426a:	3710      	adds	r7, #16
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}
 8004270:	20000da8 	.word	0x20000da8
 8004274:	e000ed04 	.word	0xe000ed04

08004278 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b08a      	sub	sp, #40	; 0x28
 800427c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800427e:	2300      	movs	r3, #0
 8004280:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004282:	2300      	movs	r3, #0
 8004284:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004286:	463a      	mov	r2, r7
 8004288:	1d39      	adds	r1, r7, #4
 800428a:	f107 0308 	add.w	r3, r7, #8
 800428e:	4618      	mov	r0, r3
 8004290:	f7fe fff8 	bl	8003284 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004294:	6839      	ldr	r1, [r7, #0]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	68ba      	ldr	r2, [r7, #8]
 800429a:	9202      	str	r2, [sp, #8]
 800429c:	9301      	str	r3, [sp, #4]
 800429e:	2300      	movs	r3, #0
 80042a0:	9300      	str	r3, [sp, #0]
 80042a2:	2300      	movs	r3, #0
 80042a4:	460a      	mov	r2, r1
 80042a6:	4924      	ldr	r1, [pc, #144]	; (8004338 <vTaskStartScheduler+0xc0>)
 80042a8:	4824      	ldr	r0, [pc, #144]	; (800433c <vTaskStartScheduler+0xc4>)
 80042aa:	f7ff fdf9 	bl	8003ea0 <xTaskCreateStatic>
 80042ae:	4603      	mov	r3, r0
 80042b0:	4a23      	ldr	r2, [pc, #140]	; (8004340 <vTaskStartScheduler+0xc8>)
 80042b2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80042b4:	4b22      	ldr	r3, [pc, #136]	; (8004340 <vTaskStartScheduler+0xc8>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d002      	beq.n	80042c2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80042bc:	2301      	movs	r3, #1
 80042be:	617b      	str	r3, [r7, #20]
 80042c0:	e001      	b.n	80042c6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80042c2:	2300      	movs	r3, #0
 80042c4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	d102      	bne.n	80042d2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80042cc:	f000 fd10 	bl	8004cf0 <xTimerCreateTimerTask>
 80042d0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	d11b      	bne.n	8004310 <vTaskStartScheduler+0x98>
	__asm volatile
 80042d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042dc:	f383 8811 	msr	BASEPRI, r3
 80042e0:	f3bf 8f6f 	isb	sy
 80042e4:	f3bf 8f4f 	dsb	sy
 80042e8:	613b      	str	r3, [r7, #16]
}
 80042ea:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80042ec:	4b15      	ldr	r3, [pc, #84]	; (8004344 <vTaskStartScheduler+0xcc>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	3354      	adds	r3, #84	; 0x54
 80042f2:	4a15      	ldr	r2, [pc, #84]	; (8004348 <vTaskStartScheduler+0xd0>)
 80042f4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80042f6:	4b15      	ldr	r3, [pc, #84]	; (800434c <vTaskStartScheduler+0xd4>)
 80042f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80042fc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80042fe:	4b14      	ldr	r3, [pc, #80]	; (8004350 <vTaskStartScheduler+0xd8>)
 8004300:	2201      	movs	r2, #1
 8004302:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004304:	4b13      	ldr	r3, [pc, #76]	; (8004354 <vTaskStartScheduler+0xdc>)
 8004306:	2200      	movs	r2, #0
 8004308:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800430a:	f001 f8c9 	bl	80054a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800430e:	e00e      	b.n	800432e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004316:	d10a      	bne.n	800432e <vTaskStartScheduler+0xb6>
	__asm volatile
 8004318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800431c:	f383 8811 	msr	BASEPRI, r3
 8004320:	f3bf 8f6f 	isb	sy
 8004324:	f3bf 8f4f 	dsb	sy
 8004328:	60fb      	str	r3, [r7, #12]
}
 800432a:	bf00      	nop
 800432c:	e7fe      	b.n	800432c <vTaskStartScheduler+0xb4>
}
 800432e:	bf00      	nop
 8004330:	3718      	adds	r7, #24
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}
 8004336:	bf00      	nop
 8004338:	08005e30 	.word	0x08005e30
 800433c:	0800497d 	.word	0x0800497d
 8004340:	20000da4 	.word	0x20000da4
 8004344:	200008ac 	.word	0x200008ac
 8004348:	2000005c 	.word	0x2000005c
 800434c:	20000da0 	.word	0x20000da0
 8004350:	20000d8c 	.word	0x20000d8c
 8004354:	20000d84 	.word	0x20000d84

08004358 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004358:	b480      	push	{r7}
 800435a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800435c:	4b04      	ldr	r3, [pc, #16]	; (8004370 <vTaskSuspendAll+0x18>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	3301      	adds	r3, #1
 8004362:	4a03      	ldr	r2, [pc, #12]	; (8004370 <vTaskSuspendAll+0x18>)
 8004364:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004366:	bf00      	nop
 8004368:	46bd      	mov	sp, r7
 800436a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436e:	4770      	bx	lr
 8004370:	20000da8 	.word	0x20000da8

08004374 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b084      	sub	sp, #16
 8004378:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800437a:	2300      	movs	r3, #0
 800437c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800437e:	2300      	movs	r3, #0
 8004380:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004382:	4b42      	ldr	r3, [pc, #264]	; (800448c <xTaskResumeAll+0x118>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d10a      	bne.n	80043a0 <xTaskResumeAll+0x2c>
	__asm volatile
 800438a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800438e:	f383 8811 	msr	BASEPRI, r3
 8004392:	f3bf 8f6f 	isb	sy
 8004396:	f3bf 8f4f 	dsb	sy
 800439a:	603b      	str	r3, [r7, #0]
}
 800439c:	bf00      	nop
 800439e:	e7fe      	b.n	800439e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80043a0:	f001 f920 	bl	80055e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80043a4:	4b39      	ldr	r3, [pc, #228]	; (800448c <xTaskResumeAll+0x118>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	3b01      	subs	r3, #1
 80043aa:	4a38      	ldr	r2, [pc, #224]	; (800448c <xTaskResumeAll+0x118>)
 80043ac:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80043ae:	4b37      	ldr	r3, [pc, #220]	; (800448c <xTaskResumeAll+0x118>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d162      	bne.n	800447c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80043b6:	4b36      	ldr	r3, [pc, #216]	; (8004490 <xTaskResumeAll+0x11c>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d05e      	beq.n	800447c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80043be:	e02f      	b.n	8004420 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043c0:	4b34      	ldr	r3, [pc, #208]	; (8004494 <xTaskResumeAll+0x120>)
 80043c2:	68db      	ldr	r3, [r3, #12]
 80043c4:	68db      	ldr	r3, [r3, #12]
 80043c6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	3318      	adds	r3, #24
 80043cc:	4618      	mov	r0, r3
 80043ce:	f7ff f817 	bl	8003400 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	3304      	adds	r3, #4
 80043d6:	4618      	mov	r0, r3
 80043d8:	f7ff f812 	bl	8003400 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043e0:	4b2d      	ldr	r3, [pc, #180]	; (8004498 <xTaskResumeAll+0x124>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	429a      	cmp	r2, r3
 80043e6:	d903      	bls.n	80043f0 <xTaskResumeAll+0x7c>
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ec:	4a2a      	ldr	r2, [pc, #168]	; (8004498 <xTaskResumeAll+0x124>)
 80043ee:	6013      	str	r3, [r2, #0]
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043f4:	4613      	mov	r3, r2
 80043f6:	009b      	lsls	r3, r3, #2
 80043f8:	4413      	add	r3, r2
 80043fa:	009b      	lsls	r3, r3, #2
 80043fc:	4a27      	ldr	r2, [pc, #156]	; (800449c <xTaskResumeAll+0x128>)
 80043fe:	441a      	add	r2, r3
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	3304      	adds	r3, #4
 8004404:	4619      	mov	r1, r3
 8004406:	4610      	mov	r0, r2
 8004408:	f7fe ff9d 	bl	8003346 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004410:	4b23      	ldr	r3, [pc, #140]	; (80044a0 <xTaskResumeAll+0x12c>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004416:	429a      	cmp	r2, r3
 8004418:	d302      	bcc.n	8004420 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800441a:	4b22      	ldr	r3, [pc, #136]	; (80044a4 <xTaskResumeAll+0x130>)
 800441c:	2201      	movs	r2, #1
 800441e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004420:	4b1c      	ldr	r3, [pc, #112]	; (8004494 <xTaskResumeAll+0x120>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d1cb      	bne.n	80043c0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d001      	beq.n	8004432 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800442e:	f000 fb5f 	bl	8004af0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004432:	4b1d      	ldr	r3, [pc, #116]	; (80044a8 <xTaskResumeAll+0x134>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d010      	beq.n	8004460 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800443e:	f000 f847 	bl	80044d0 <xTaskIncrementTick>
 8004442:	4603      	mov	r3, r0
 8004444:	2b00      	cmp	r3, #0
 8004446:	d002      	beq.n	800444e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004448:	4b16      	ldr	r3, [pc, #88]	; (80044a4 <xTaskResumeAll+0x130>)
 800444a:	2201      	movs	r2, #1
 800444c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	3b01      	subs	r3, #1
 8004452:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d1f1      	bne.n	800443e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800445a:	4b13      	ldr	r3, [pc, #76]	; (80044a8 <xTaskResumeAll+0x134>)
 800445c:	2200      	movs	r2, #0
 800445e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004460:	4b10      	ldr	r3, [pc, #64]	; (80044a4 <xTaskResumeAll+0x130>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d009      	beq.n	800447c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004468:	2301      	movs	r3, #1
 800446a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800446c:	4b0f      	ldr	r3, [pc, #60]	; (80044ac <xTaskResumeAll+0x138>)
 800446e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004472:	601a      	str	r2, [r3, #0]
 8004474:	f3bf 8f4f 	dsb	sy
 8004478:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800447c:	f001 f8e2 	bl	8005644 <vPortExitCritical>

	return xAlreadyYielded;
 8004480:	68bb      	ldr	r3, [r7, #8]
}
 8004482:	4618      	mov	r0, r3
 8004484:	3710      	adds	r7, #16
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}
 800448a:	bf00      	nop
 800448c:	20000da8 	.word	0x20000da8
 8004490:	20000d80 	.word	0x20000d80
 8004494:	20000d40 	.word	0x20000d40
 8004498:	20000d88 	.word	0x20000d88
 800449c:	200008b0 	.word	0x200008b0
 80044a0:	200008ac 	.word	0x200008ac
 80044a4:	20000d94 	.word	0x20000d94
 80044a8:	20000d90 	.word	0x20000d90
 80044ac:	e000ed04 	.word	0xe000ed04

080044b0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80044b0:	b480      	push	{r7}
 80044b2:	b083      	sub	sp, #12
 80044b4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80044b6:	4b05      	ldr	r3, [pc, #20]	; (80044cc <xTaskGetTickCount+0x1c>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80044bc:	687b      	ldr	r3, [r7, #4]
}
 80044be:	4618      	mov	r0, r3
 80044c0:	370c      	adds	r7, #12
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr
 80044ca:	bf00      	nop
 80044cc:	20000d84 	.word	0x20000d84

080044d0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b086      	sub	sp, #24
 80044d4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80044d6:	2300      	movs	r3, #0
 80044d8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80044da:	4b4f      	ldr	r3, [pc, #316]	; (8004618 <xTaskIncrementTick+0x148>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	f040 808f 	bne.w	8004602 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80044e4:	4b4d      	ldr	r3, [pc, #308]	; (800461c <xTaskIncrementTick+0x14c>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	3301      	adds	r3, #1
 80044ea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80044ec:	4a4b      	ldr	r2, [pc, #300]	; (800461c <xTaskIncrementTick+0x14c>)
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d120      	bne.n	800453a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80044f8:	4b49      	ldr	r3, [pc, #292]	; (8004620 <xTaskIncrementTick+0x150>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d00a      	beq.n	8004518 <xTaskIncrementTick+0x48>
	__asm volatile
 8004502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004506:	f383 8811 	msr	BASEPRI, r3
 800450a:	f3bf 8f6f 	isb	sy
 800450e:	f3bf 8f4f 	dsb	sy
 8004512:	603b      	str	r3, [r7, #0]
}
 8004514:	bf00      	nop
 8004516:	e7fe      	b.n	8004516 <xTaskIncrementTick+0x46>
 8004518:	4b41      	ldr	r3, [pc, #260]	; (8004620 <xTaskIncrementTick+0x150>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	60fb      	str	r3, [r7, #12]
 800451e:	4b41      	ldr	r3, [pc, #260]	; (8004624 <xTaskIncrementTick+0x154>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a3f      	ldr	r2, [pc, #252]	; (8004620 <xTaskIncrementTick+0x150>)
 8004524:	6013      	str	r3, [r2, #0]
 8004526:	4a3f      	ldr	r2, [pc, #252]	; (8004624 <xTaskIncrementTick+0x154>)
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	6013      	str	r3, [r2, #0]
 800452c:	4b3e      	ldr	r3, [pc, #248]	; (8004628 <xTaskIncrementTick+0x158>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	3301      	adds	r3, #1
 8004532:	4a3d      	ldr	r2, [pc, #244]	; (8004628 <xTaskIncrementTick+0x158>)
 8004534:	6013      	str	r3, [r2, #0]
 8004536:	f000 fadb 	bl	8004af0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800453a:	4b3c      	ldr	r3, [pc, #240]	; (800462c <xTaskIncrementTick+0x15c>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	693a      	ldr	r2, [r7, #16]
 8004540:	429a      	cmp	r2, r3
 8004542:	d349      	bcc.n	80045d8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004544:	4b36      	ldr	r3, [pc, #216]	; (8004620 <xTaskIncrementTick+0x150>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d104      	bne.n	8004558 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800454e:	4b37      	ldr	r3, [pc, #220]	; (800462c <xTaskIncrementTick+0x15c>)
 8004550:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004554:	601a      	str	r2, [r3, #0]
					break;
 8004556:	e03f      	b.n	80045d8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004558:	4b31      	ldr	r3, [pc, #196]	; (8004620 <xTaskIncrementTick+0x150>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	68db      	ldr	r3, [r3, #12]
 800455e:	68db      	ldr	r3, [r3, #12]
 8004560:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004568:	693a      	ldr	r2, [r7, #16]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	429a      	cmp	r2, r3
 800456e:	d203      	bcs.n	8004578 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004570:	4a2e      	ldr	r2, [pc, #184]	; (800462c <xTaskIncrementTick+0x15c>)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004576:	e02f      	b.n	80045d8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	3304      	adds	r3, #4
 800457c:	4618      	mov	r0, r3
 800457e:	f7fe ff3f 	bl	8003400 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004586:	2b00      	cmp	r3, #0
 8004588:	d004      	beq.n	8004594 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	3318      	adds	r3, #24
 800458e:	4618      	mov	r0, r3
 8004590:	f7fe ff36 	bl	8003400 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004598:	4b25      	ldr	r3, [pc, #148]	; (8004630 <xTaskIncrementTick+0x160>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	429a      	cmp	r2, r3
 800459e:	d903      	bls.n	80045a8 <xTaskIncrementTick+0xd8>
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a4:	4a22      	ldr	r2, [pc, #136]	; (8004630 <xTaskIncrementTick+0x160>)
 80045a6:	6013      	str	r3, [r2, #0]
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045ac:	4613      	mov	r3, r2
 80045ae:	009b      	lsls	r3, r3, #2
 80045b0:	4413      	add	r3, r2
 80045b2:	009b      	lsls	r3, r3, #2
 80045b4:	4a1f      	ldr	r2, [pc, #124]	; (8004634 <xTaskIncrementTick+0x164>)
 80045b6:	441a      	add	r2, r3
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	3304      	adds	r3, #4
 80045bc:	4619      	mov	r1, r3
 80045be:	4610      	mov	r0, r2
 80045c0:	f7fe fec1 	bl	8003346 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045c8:	4b1b      	ldr	r3, [pc, #108]	; (8004638 <xTaskIncrementTick+0x168>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ce:	429a      	cmp	r2, r3
 80045d0:	d3b8      	bcc.n	8004544 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80045d2:	2301      	movs	r3, #1
 80045d4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80045d6:	e7b5      	b.n	8004544 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80045d8:	4b17      	ldr	r3, [pc, #92]	; (8004638 <xTaskIncrementTick+0x168>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045de:	4915      	ldr	r1, [pc, #84]	; (8004634 <xTaskIncrementTick+0x164>)
 80045e0:	4613      	mov	r3, r2
 80045e2:	009b      	lsls	r3, r3, #2
 80045e4:	4413      	add	r3, r2
 80045e6:	009b      	lsls	r3, r3, #2
 80045e8:	440b      	add	r3, r1
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	2b01      	cmp	r3, #1
 80045ee:	d901      	bls.n	80045f4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80045f0:	2301      	movs	r3, #1
 80045f2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80045f4:	4b11      	ldr	r3, [pc, #68]	; (800463c <xTaskIncrementTick+0x16c>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d007      	beq.n	800460c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80045fc:	2301      	movs	r3, #1
 80045fe:	617b      	str	r3, [r7, #20]
 8004600:	e004      	b.n	800460c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004602:	4b0f      	ldr	r3, [pc, #60]	; (8004640 <xTaskIncrementTick+0x170>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	3301      	adds	r3, #1
 8004608:	4a0d      	ldr	r2, [pc, #52]	; (8004640 <xTaskIncrementTick+0x170>)
 800460a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800460c:	697b      	ldr	r3, [r7, #20]
}
 800460e:	4618      	mov	r0, r3
 8004610:	3718      	adds	r7, #24
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}
 8004616:	bf00      	nop
 8004618:	20000da8 	.word	0x20000da8
 800461c:	20000d84 	.word	0x20000d84
 8004620:	20000d38 	.word	0x20000d38
 8004624:	20000d3c 	.word	0x20000d3c
 8004628:	20000d98 	.word	0x20000d98
 800462c:	20000da0 	.word	0x20000da0
 8004630:	20000d88 	.word	0x20000d88
 8004634:	200008b0 	.word	0x200008b0
 8004638:	200008ac 	.word	0x200008ac
 800463c:	20000d94 	.word	0x20000d94
 8004640:	20000d90 	.word	0x20000d90

08004644 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004644:	b480      	push	{r7}
 8004646:	b085      	sub	sp, #20
 8004648:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800464a:	4b2a      	ldr	r3, [pc, #168]	; (80046f4 <vTaskSwitchContext+0xb0>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d003      	beq.n	800465a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004652:	4b29      	ldr	r3, [pc, #164]	; (80046f8 <vTaskSwitchContext+0xb4>)
 8004654:	2201      	movs	r2, #1
 8004656:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004658:	e046      	b.n	80046e8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800465a:	4b27      	ldr	r3, [pc, #156]	; (80046f8 <vTaskSwitchContext+0xb4>)
 800465c:	2200      	movs	r2, #0
 800465e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004660:	4b26      	ldr	r3, [pc, #152]	; (80046fc <vTaskSwitchContext+0xb8>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	60fb      	str	r3, [r7, #12]
 8004666:	e010      	b.n	800468a <vTaskSwitchContext+0x46>
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d10a      	bne.n	8004684 <vTaskSwitchContext+0x40>
	__asm volatile
 800466e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004672:	f383 8811 	msr	BASEPRI, r3
 8004676:	f3bf 8f6f 	isb	sy
 800467a:	f3bf 8f4f 	dsb	sy
 800467e:	607b      	str	r3, [r7, #4]
}
 8004680:	bf00      	nop
 8004682:	e7fe      	b.n	8004682 <vTaskSwitchContext+0x3e>
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	3b01      	subs	r3, #1
 8004688:	60fb      	str	r3, [r7, #12]
 800468a:	491d      	ldr	r1, [pc, #116]	; (8004700 <vTaskSwitchContext+0xbc>)
 800468c:	68fa      	ldr	r2, [r7, #12]
 800468e:	4613      	mov	r3, r2
 8004690:	009b      	lsls	r3, r3, #2
 8004692:	4413      	add	r3, r2
 8004694:	009b      	lsls	r3, r3, #2
 8004696:	440b      	add	r3, r1
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d0e4      	beq.n	8004668 <vTaskSwitchContext+0x24>
 800469e:	68fa      	ldr	r2, [r7, #12]
 80046a0:	4613      	mov	r3, r2
 80046a2:	009b      	lsls	r3, r3, #2
 80046a4:	4413      	add	r3, r2
 80046a6:	009b      	lsls	r3, r3, #2
 80046a8:	4a15      	ldr	r2, [pc, #84]	; (8004700 <vTaskSwitchContext+0xbc>)
 80046aa:	4413      	add	r3, r2
 80046ac:	60bb      	str	r3, [r7, #8]
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	685a      	ldr	r2, [r3, #4]
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	605a      	str	r2, [r3, #4]
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	685a      	ldr	r2, [r3, #4]
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	3308      	adds	r3, #8
 80046c0:	429a      	cmp	r2, r3
 80046c2:	d104      	bne.n	80046ce <vTaskSwitchContext+0x8a>
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	685a      	ldr	r2, [r3, #4]
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	605a      	str	r2, [r3, #4]
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	68db      	ldr	r3, [r3, #12]
 80046d4:	4a0b      	ldr	r2, [pc, #44]	; (8004704 <vTaskSwitchContext+0xc0>)
 80046d6:	6013      	str	r3, [r2, #0]
 80046d8:	4a08      	ldr	r2, [pc, #32]	; (80046fc <vTaskSwitchContext+0xb8>)
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80046de:	4b09      	ldr	r3, [pc, #36]	; (8004704 <vTaskSwitchContext+0xc0>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	3354      	adds	r3, #84	; 0x54
 80046e4:	4a08      	ldr	r2, [pc, #32]	; (8004708 <vTaskSwitchContext+0xc4>)
 80046e6:	6013      	str	r3, [r2, #0]
}
 80046e8:	bf00      	nop
 80046ea:	3714      	adds	r7, #20
 80046ec:	46bd      	mov	sp, r7
 80046ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f2:	4770      	bx	lr
 80046f4:	20000da8 	.word	0x20000da8
 80046f8:	20000d94 	.word	0x20000d94
 80046fc:	20000d88 	.word	0x20000d88
 8004700:	200008b0 	.word	0x200008b0
 8004704:	200008ac 	.word	0x200008ac
 8004708:	2000005c 	.word	0x2000005c

0800470c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b084      	sub	sp, #16
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
 8004714:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d10a      	bne.n	8004732 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800471c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004720:	f383 8811 	msr	BASEPRI, r3
 8004724:	f3bf 8f6f 	isb	sy
 8004728:	f3bf 8f4f 	dsb	sy
 800472c:	60fb      	str	r3, [r7, #12]
}
 800472e:	bf00      	nop
 8004730:	e7fe      	b.n	8004730 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004732:	4b07      	ldr	r3, [pc, #28]	; (8004750 <vTaskPlaceOnEventList+0x44>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	3318      	adds	r3, #24
 8004738:	4619      	mov	r1, r3
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f7fe fe27 	bl	800338e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004740:	2101      	movs	r1, #1
 8004742:	6838      	ldr	r0, [r7, #0]
 8004744:	f000 fa80 	bl	8004c48 <prvAddCurrentTaskToDelayedList>
}
 8004748:	bf00      	nop
 800474a:	3710      	adds	r7, #16
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}
 8004750:	200008ac 	.word	0x200008ac

08004754 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004754:	b580      	push	{r7, lr}
 8004756:	b086      	sub	sp, #24
 8004758:	af00      	add	r7, sp, #0
 800475a:	60f8      	str	r0, [r7, #12]
 800475c:	60b9      	str	r1, [r7, #8]
 800475e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d10a      	bne.n	800477c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800476a:	f383 8811 	msr	BASEPRI, r3
 800476e:	f3bf 8f6f 	isb	sy
 8004772:	f3bf 8f4f 	dsb	sy
 8004776:	617b      	str	r3, [r7, #20]
}
 8004778:	bf00      	nop
 800477a:	e7fe      	b.n	800477a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800477c:	4b0a      	ldr	r3, [pc, #40]	; (80047a8 <vTaskPlaceOnEventListRestricted+0x54>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	3318      	adds	r3, #24
 8004782:	4619      	mov	r1, r3
 8004784:	68f8      	ldr	r0, [r7, #12]
 8004786:	f7fe fdde 	bl	8003346 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d002      	beq.n	8004796 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004790:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004794:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004796:	6879      	ldr	r1, [r7, #4]
 8004798:	68b8      	ldr	r0, [r7, #8]
 800479a:	f000 fa55 	bl	8004c48 <prvAddCurrentTaskToDelayedList>
	}
 800479e:	bf00      	nop
 80047a0:	3718      	adds	r7, #24
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}
 80047a6:	bf00      	nop
 80047a8:	200008ac 	.word	0x200008ac

080047ac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b086      	sub	sp, #24
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	68db      	ldr	r3, [r3, #12]
 80047b8:	68db      	ldr	r3, [r3, #12]
 80047ba:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d10a      	bne.n	80047d8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80047c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047c6:	f383 8811 	msr	BASEPRI, r3
 80047ca:	f3bf 8f6f 	isb	sy
 80047ce:	f3bf 8f4f 	dsb	sy
 80047d2:	60fb      	str	r3, [r7, #12]
}
 80047d4:	bf00      	nop
 80047d6:	e7fe      	b.n	80047d6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	3318      	adds	r3, #24
 80047dc:	4618      	mov	r0, r3
 80047de:	f7fe fe0f 	bl	8003400 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80047e2:	4b1e      	ldr	r3, [pc, #120]	; (800485c <xTaskRemoveFromEventList+0xb0>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d11d      	bne.n	8004826 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	3304      	adds	r3, #4
 80047ee:	4618      	mov	r0, r3
 80047f0:	f7fe fe06 	bl	8003400 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047f8:	4b19      	ldr	r3, [pc, #100]	; (8004860 <xTaskRemoveFromEventList+0xb4>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	429a      	cmp	r2, r3
 80047fe:	d903      	bls.n	8004808 <xTaskRemoveFromEventList+0x5c>
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004804:	4a16      	ldr	r2, [pc, #88]	; (8004860 <xTaskRemoveFromEventList+0xb4>)
 8004806:	6013      	str	r3, [r2, #0]
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800480c:	4613      	mov	r3, r2
 800480e:	009b      	lsls	r3, r3, #2
 8004810:	4413      	add	r3, r2
 8004812:	009b      	lsls	r3, r3, #2
 8004814:	4a13      	ldr	r2, [pc, #76]	; (8004864 <xTaskRemoveFromEventList+0xb8>)
 8004816:	441a      	add	r2, r3
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	3304      	adds	r3, #4
 800481c:	4619      	mov	r1, r3
 800481e:	4610      	mov	r0, r2
 8004820:	f7fe fd91 	bl	8003346 <vListInsertEnd>
 8004824:	e005      	b.n	8004832 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	3318      	adds	r3, #24
 800482a:	4619      	mov	r1, r3
 800482c:	480e      	ldr	r0, [pc, #56]	; (8004868 <xTaskRemoveFromEventList+0xbc>)
 800482e:	f7fe fd8a 	bl	8003346 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004836:	4b0d      	ldr	r3, [pc, #52]	; (800486c <xTaskRemoveFromEventList+0xc0>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800483c:	429a      	cmp	r2, r3
 800483e:	d905      	bls.n	800484c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004840:	2301      	movs	r3, #1
 8004842:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004844:	4b0a      	ldr	r3, [pc, #40]	; (8004870 <xTaskRemoveFromEventList+0xc4>)
 8004846:	2201      	movs	r2, #1
 8004848:	601a      	str	r2, [r3, #0]
 800484a:	e001      	b.n	8004850 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800484c:	2300      	movs	r3, #0
 800484e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004850:	697b      	ldr	r3, [r7, #20]
}
 8004852:	4618      	mov	r0, r3
 8004854:	3718      	adds	r7, #24
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}
 800485a:	bf00      	nop
 800485c:	20000da8 	.word	0x20000da8
 8004860:	20000d88 	.word	0x20000d88
 8004864:	200008b0 	.word	0x200008b0
 8004868:	20000d40 	.word	0x20000d40
 800486c:	200008ac 	.word	0x200008ac
 8004870:	20000d94 	.word	0x20000d94

08004874 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004874:	b480      	push	{r7}
 8004876:	b083      	sub	sp, #12
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800487c:	4b06      	ldr	r3, [pc, #24]	; (8004898 <vTaskInternalSetTimeOutState+0x24>)
 800487e:	681a      	ldr	r2, [r3, #0]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004884:	4b05      	ldr	r3, [pc, #20]	; (800489c <vTaskInternalSetTimeOutState+0x28>)
 8004886:	681a      	ldr	r2, [r3, #0]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	605a      	str	r2, [r3, #4]
}
 800488c:	bf00      	nop
 800488e:	370c      	adds	r7, #12
 8004890:	46bd      	mov	sp, r7
 8004892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004896:	4770      	bx	lr
 8004898:	20000d98 	.word	0x20000d98
 800489c:	20000d84 	.word	0x20000d84

080048a0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b088      	sub	sp, #32
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
 80048a8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d10a      	bne.n	80048c6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80048b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048b4:	f383 8811 	msr	BASEPRI, r3
 80048b8:	f3bf 8f6f 	isb	sy
 80048bc:	f3bf 8f4f 	dsb	sy
 80048c0:	613b      	str	r3, [r7, #16]
}
 80048c2:	bf00      	nop
 80048c4:	e7fe      	b.n	80048c4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d10a      	bne.n	80048e2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80048cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048d0:	f383 8811 	msr	BASEPRI, r3
 80048d4:	f3bf 8f6f 	isb	sy
 80048d8:	f3bf 8f4f 	dsb	sy
 80048dc:	60fb      	str	r3, [r7, #12]
}
 80048de:	bf00      	nop
 80048e0:	e7fe      	b.n	80048e0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80048e2:	f000 fe7f 	bl	80055e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80048e6:	4b1d      	ldr	r3, [pc, #116]	; (800495c <xTaskCheckForTimeOut+0xbc>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	69ba      	ldr	r2, [r7, #24]
 80048f2:	1ad3      	subs	r3, r2, r3
 80048f4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80048fe:	d102      	bne.n	8004906 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004900:	2300      	movs	r3, #0
 8004902:	61fb      	str	r3, [r7, #28]
 8004904:	e023      	b.n	800494e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681a      	ldr	r2, [r3, #0]
 800490a:	4b15      	ldr	r3, [pc, #84]	; (8004960 <xTaskCheckForTimeOut+0xc0>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	429a      	cmp	r2, r3
 8004910:	d007      	beq.n	8004922 <xTaskCheckForTimeOut+0x82>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	69ba      	ldr	r2, [r7, #24]
 8004918:	429a      	cmp	r2, r3
 800491a:	d302      	bcc.n	8004922 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800491c:	2301      	movs	r3, #1
 800491e:	61fb      	str	r3, [r7, #28]
 8004920:	e015      	b.n	800494e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	697a      	ldr	r2, [r7, #20]
 8004928:	429a      	cmp	r2, r3
 800492a:	d20b      	bcs.n	8004944 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	1ad2      	subs	r2, r2, r3
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004938:	6878      	ldr	r0, [r7, #4]
 800493a:	f7ff ff9b 	bl	8004874 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800493e:	2300      	movs	r3, #0
 8004940:	61fb      	str	r3, [r7, #28]
 8004942:	e004      	b.n	800494e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	2200      	movs	r2, #0
 8004948:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800494a:	2301      	movs	r3, #1
 800494c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800494e:	f000 fe79 	bl	8005644 <vPortExitCritical>

	return xReturn;
 8004952:	69fb      	ldr	r3, [r7, #28]
}
 8004954:	4618      	mov	r0, r3
 8004956:	3720      	adds	r7, #32
 8004958:	46bd      	mov	sp, r7
 800495a:	bd80      	pop	{r7, pc}
 800495c:	20000d84 	.word	0x20000d84
 8004960:	20000d98 	.word	0x20000d98

08004964 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004964:	b480      	push	{r7}
 8004966:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004968:	4b03      	ldr	r3, [pc, #12]	; (8004978 <vTaskMissedYield+0x14>)
 800496a:	2201      	movs	r2, #1
 800496c:	601a      	str	r2, [r3, #0]
}
 800496e:	bf00      	nop
 8004970:	46bd      	mov	sp, r7
 8004972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004976:	4770      	bx	lr
 8004978:	20000d94 	.word	0x20000d94

0800497c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b082      	sub	sp, #8
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004984:	f000 f852 	bl	8004a2c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004988:	4b06      	ldr	r3, [pc, #24]	; (80049a4 <prvIdleTask+0x28>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	2b01      	cmp	r3, #1
 800498e:	d9f9      	bls.n	8004984 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004990:	4b05      	ldr	r3, [pc, #20]	; (80049a8 <prvIdleTask+0x2c>)
 8004992:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004996:	601a      	str	r2, [r3, #0]
 8004998:	f3bf 8f4f 	dsb	sy
 800499c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80049a0:	e7f0      	b.n	8004984 <prvIdleTask+0x8>
 80049a2:	bf00      	nop
 80049a4:	200008b0 	.word	0x200008b0
 80049a8:	e000ed04 	.word	0xe000ed04

080049ac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b082      	sub	sp, #8
 80049b0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80049b2:	2300      	movs	r3, #0
 80049b4:	607b      	str	r3, [r7, #4]
 80049b6:	e00c      	b.n	80049d2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80049b8:	687a      	ldr	r2, [r7, #4]
 80049ba:	4613      	mov	r3, r2
 80049bc:	009b      	lsls	r3, r3, #2
 80049be:	4413      	add	r3, r2
 80049c0:	009b      	lsls	r3, r3, #2
 80049c2:	4a12      	ldr	r2, [pc, #72]	; (8004a0c <prvInitialiseTaskLists+0x60>)
 80049c4:	4413      	add	r3, r2
 80049c6:	4618      	mov	r0, r3
 80049c8:	f7fe fc90 	bl	80032ec <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	3301      	adds	r3, #1
 80049d0:	607b      	str	r3, [r7, #4]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2b37      	cmp	r3, #55	; 0x37
 80049d6:	d9ef      	bls.n	80049b8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80049d8:	480d      	ldr	r0, [pc, #52]	; (8004a10 <prvInitialiseTaskLists+0x64>)
 80049da:	f7fe fc87 	bl	80032ec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80049de:	480d      	ldr	r0, [pc, #52]	; (8004a14 <prvInitialiseTaskLists+0x68>)
 80049e0:	f7fe fc84 	bl	80032ec <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80049e4:	480c      	ldr	r0, [pc, #48]	; (8004a18 <prvInitialiseTaskLists+0x6c>)
 80049e6:	f7fe fc81 	bl	80032ec <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80049ea:	480c      	ldr	r0, [pc, #48]	; (8004a1c <prvInitialiseTaskLists+0x70>)
 80049ec:	f7fe fc7e 	bl	80032ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80049f0:	480b      	ldr	r0, [pc, #44]	; (8004a20 <prvInitialiseTaskLists+0x74>)
 80049f2:	f7fe fc7b 	bl	80032ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80049f6:	4b0b      	ldr	r3, [pc, #44]	; (8004a24 <prvInitialiseTaskLists+0x78>)
 80049f8:	4a05      	ldr	r2, [pc, #20]	; (8004a10 <prvInitialiseTaskLists+0x64>)
 80049fa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80049fc:	4b0a      	ldr	r3, [pc, #40]	; (8004a28 <prvInitialiseTaskLists+0x7c>)
 80049fe:	4a05      	ldr	r2, [pc, #20]	; (8004a14 <prvInitialiseTaskLists+0x68>)
 8004a00:	601a      	str	r2, [r3, #0]
}
 8004a02:	bf00      	nop
 8004a04:	3708      	adds	r7, #8
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}
 8004a0a:	bf00      	nop
 8004a0c:	200008b0 	.word	0x200008b0
 8004a10:	20000d10 	.word	0x20000d10
 8004a14:	20000d24 	.word	0x20000d24
 8004a18:	20000d40 	.word	0x20000d40
 8004a1c:	20000d54 	.word	0x20000d54
 8004a20:	20000d6c 	.word	0x20000d6c
 8004a24:	20000d38 	.word	0x20000d38
 8004a28:	20000d3c 	.word	0x20000d3c

08004a2c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b082      	sub	sp, #8
 8004a30:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004a32:	e019      	b.n	8004a68 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004a34:	f000 fdd6 	bl	80055e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a38:	4b10      	ldr	r3, [pc, #64]	; (8004a7c <prvCheckTasksWaitingTermination+0x50>)
 8004a3a:	68db      	ldr	r3, [r3, #12]
 8004a3c:	68db      	ldr	r3, [r3, #12]
 8004a3e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	3304      	adds	r3, #4
 8004a44:	4618      	mov	r0, r3
 8004a46:	f7fe fcdb 	bl	8003400 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004a4a:	4b0d      	ldr	r3, [pc, #52]	; (8004a80 <prvCheckTasksWaitingTermination+0x54>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	3b01      	subs	r3, #1
 8004a50:	4a0b      	ldr	r2, [pc, #44]	; (8004a80 <prvCheckTasksWaitingTermination+0x54>)
 8004a52:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004a54:	4b0b      	ldr	r3, [pc, #44]	; (8004a84 <prvCheckTasksWaitingTermination+0x58>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	3b01      	subs	r3, #1
 8004a5a:	4a0a      	ldr	r2, [pc, #40]	; (8004a84 <prvCheckTasksWaitingTermination+0x58>)
 8004a5c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004a5e:	f000 fdf1 	bl	8005644 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f000 f810 	bl	8004a88 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004a68:	4b06      	ldr	r3, [pc, #24]	; (8004a84 <prvCheckTasksWaitingTermination+0x58>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d1e1      	bne.n	8004a34 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004a70:	bf00      	nop
 8004a72:	bf00      	nop
 8004a74:	3708      	adds	r7, #8
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}
 8004a7a:	bf00      	nop
 8004a7c:	20000d54 	.word	0x20000d54
 8004a80:	20000d80 	.word	0x20000d80
 8004a84:	20000d68 	.word	0x20000d68

08004a88 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b084      	sub	sp, #16
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	3354      	adds	r3, #84	; 0x54
 8004a94:	4618      	mov	r0, r3
 8004a96:	f001 f8b9 	bl	8005c0c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d108      	bne.n	8004ab6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	f000 ff89 	bl	80059c0 <vPortFree>
				vPortFree( pxTCB );
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f000 ff86 	bl	80059c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004ab4:	e018      	b.n	8004ae8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	d103      	bne.n	8004ac8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004ac0:	6878      	ldr	r0, [r7, #4]
 8004ac2:	f000 ff7d 	bl	80059c0 <vPortFree>
	}
 8004ac6:	e00f      	b.n	8004ae8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8004ace:	2b02      	cmp	r3, #2
 8004ad0:	d00a      	beq.n	8004ae8 <prvDeleteTCB+0x60>
	__asm volatile
 8004ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ad6:	f383 8811 	msr	BASEPRI, r3
 8004ada:	f3bf 8f6f 	isb	sy
 8004ade:	f3bf 8f4f 	dsb	sy
 8004ae2:	60fb      	str	r3, [r7, #12]
}
 8004ae4:	bf00      	nop
 8004ae6:	e7fe      	b.n	8004ae6 <prvDeleteTCB+0x5e>
	}
 8004ae8:	bf00      	nop
 8004aea:	3710      	adds	r7, #16
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}

08004af0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004af0:	b480      	push	{r7}
 8004af2:	b083      	sub	sp, #12
 8004af4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004af6:	4b0c      	ldr	r3, [pc, #48]	; (8004b28 <prvResetNextTaskUnblockTime+0x38>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d104      	bne.n	8004b0a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004b00:	4b0a      	ldr	r3, [pc, #40]	; (8004b2c <prvResetNextTaskUnblockTime+0x3c>)
 8004b02:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004b06:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004b08:	e008      	b.n	8004b1c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b0a:	4b07      	ldr	r3, [pc, #28]	; (8004b28 <prvResetNextTaskUnblockTime+0x38>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	68db      	ldr	r3, [r3, #12]
 8004b10:	68db      	ldr	r3, [r3, #12]
 8004b12:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	4a04      	ldr	r2, [pc, #16]	; (8004b2c <prvResetNextTaskUnblockTime+0x3c>)
 8004b1a:	6013      	str	r3, [r2, #0]
}
 8004b1c:	bf00      	nop
 8004b1e:	370c      	adds	r7, #12
 8004b20:	46bd      	mov	sp, r7
 8004b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b26:	4770      	bx	lr
 8004b28:	20000d38 	.word	0x20000d38
 8004b2c:	20000da0 	.word	0x20000da0

08004b30 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004b30:	b480      	push	{r7}
 8004b32:	b083      	sub	sp, #12
 8004b34:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004b36:	4b0b      	ldr	r3, [pc, #44]	; (8004b64 <xTaskGetSchedulerState+0x34>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d102      	bne.n	8004b44 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	607b      	str	r3, [r7, #4]
 8004b42:	e008      	b.n	8004b56 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b44:	4b08      	ldr	r3, [pc, #32]	; (8004b68 <xTaskGetSchedulerState+0x38>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d102      	bne.n	8004b52 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004b4c:	2302      	movs	r3, #2
 8004b4e:	607b      	str	r3, [r7, #4]
 8004b50:	e001      	b.n	8004b56 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004b52:	2300      	movs	r3, #0
 8004b54:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004b56:	687b      	ldr	r3, [r7, #4]
	}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	370c      	adds	r7, #12
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b62:	4770      	bx	lr
 8004b64:	20000d8c 	.word	0x20000d8c
 8004b68:	20000da8 	.word	0x20000da8

08004b6c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b086      	sub	sp, #24
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004b78:	2300      	movs	r3, #0
 8004b7a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d056      	beq.n	8004c30 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004b82:	4b2e      	ldr	r3, [pc, #184]	; (8004c3c <xTaskPriorityDisinherit+0xd0>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	693a      	ldr	r2, [r7, #16]
 8004b88:	429a      	cmp	r2, r3
 8004b8a:	d00a      	beq.n	8004ba2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b90:	f383 8811 	msr	BASEPRI, r3
 8004b94:	f3bf 8f6f 	isb	sy
 8004b98:	f3bf 8f4f 	dsb	sy
 8004b9c:	60fb      	str	r3, [r7, #12]
}
 8004b9e:	bf00      	nop
 8004ba0:	e7fe      	b.n	8004ba0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d10a      	bne.n	8004bc0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bae:	f383 8811 	msr	BASEPRI, r3
 8004bb2:	f3bf 8f6f 	isb	sy
 8004bb6:	f3bf 8f4f 	dsb	sy
 8004bba:	60bb      	str	r3, [r7, #8]
}
 8004bbc:	bf00      	nop
 8004bbe:	e7fe      	b.n	8004bbe <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bc4:	1e5a      	subs	r2, r3, #1
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bd2:	429a      	cmp	r2, r3
 8004bd4:	d02c      	beq.n	8004c30 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d128      	bne.n	8004c30 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	3304      	adds	r3, #4
 8004be2:	4618      	mov	r0, r3
 8004be4:	f7fe fc0c 	bl	8003400 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bf4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c00:	4b0f      	ldr	r3, [pc, #60]	; (8004c40 <xTaskPriorityDisinherit+0xd4>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	429a      	cmp	r2, r3
 8004c06:	d903      	bls.n	8004c10 <xTaskPriorityDisinherit+0xa4>
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c0c:	4a0c      	ldr	r2, [pc, #48]	; (8004c40 <xTaskPriorityDisinherit+0xd4>)
 8004c0e:	6013      	str	r3, [r2, #0]
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c14:	4613      	mov	r3, r2
 8004c16:	009b      	lsls	r3, r3, #2
 8004c18:	4413      	add	r3, r2
 8004c1a:	009b      	lsls	r3, r3, #2
 8004c1c:	4a09      	ldr	r2, [pc, #36]	; (8004c44 <xTaskPriorityDisinherit+0xd8>)
 8004c1e:	441a      	add	r2, r3
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	3304      	adds	r3, #4
 8004c24:	4619      	mov	r1, r3
 8004c26:	4610      	mov	r0, r2
 8004c28:	f7fe fb8d 	bl	8003346 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004c30:	697b      	ldr	r3, [r7, #20]
	}
 8004c32:	4618      	mov	r0, r3
 8004c34:	3718      	adds	r7, #24
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}
 8004c3a:	bf00      	nop
 8004c3c:	200008ac 	.word	0x200008ac
 8004c40:	20000d88 	.word	0x20000d88
 8004c44:	200008b0 	.word	0x200008b0

08004c48 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b084      	sub	sp, #16
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
 8004c50:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004c52:	4b21      	ldr	r3, [pc, #132]	; (8004cd8 <prvAddCurrentTaskToDelayedList+0x90>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004c58:	4b20      	ldr	r3, [pc, #128]	; (8004cdc <prvAddCurrentTaskToDelayedList+0x94>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	3304      	adds	r3, #4
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f7fe fbce 	bl	8003400 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c6a:	d10a      	bne.n	8004c82 <prvAddCurrentTaskToDelayedList+0x3a>
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d007      	beq.n	8004c82 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004c72:	4b1a      	ldr	r3, [pc, #104]	; (8004cdc <prvAddCurrentTaskToDelayedList+0x94>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	3304      	adds	r3, #4
 8004c78:	4619      	mov	r1, r3
 8004c7a:	4819      	ldr	r0, [pc, #100]	; (8004ce0 <prvAddCurrentTaskToDelayedList+0x98>)
 8004c7c:	f7fe fb63 	bl	8003346 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004c80:	e026      	b.n	8004cd0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004c82:	68fa      	ldr	r2, [r7, #12]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	4413      	add	r3, r2
 8004c88:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004c8a:	4b14      	ldr	r3, [pc, #80]	; (8004cdc <prvAddCurrentTaskToDelayedList+0x94>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	68ba      	ldr	r2, [r7, #8]
 8004c90:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004c92:	68ba      	ldr	r2, [r7, #8]
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	429a      	cmp	r2, r3
 8004c98:	d209      	bcs.n	8004cae <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004c9a:	4b12      	ldr	r3, [pc, #72]	; (8004ce4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004c9c:	681a      	ldr	r2, [r3, #0]
 8004c9e:	4b0f      	ldr	r3, [pc, #60]	; (8004cdc <prvAddCurrentTaskToDelayedList+0x94>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	3304      	adds	r3, #4
 8004ca4:	4619      	mov	r1, r3
 8004ca6:	4610      	mov	r0, r2
 8004ca8:	f7fe fb71 	bl	800338e <vListInsert>
}
 8004cac:	e010      	b.n	8004cd0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004cae:	4b0e      	ldr	r3, [pc, #56]	; (8004ce8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004cb0:	681a      	ldr	r2, [r3, #0]
 8004cb2:	4b0a      	ldr	r3, [pc, #40]	; (8004cdc <prvAddCurrentTaskToDelayedList+0x94>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	3304      	adds	r3, #4
 8004cb8:	4619      	mov	r1, r3
 8004cba:	4610      	mov	r0, r2
 8004cbc:	f7fe fb67 	bl	800338e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004cc0:	4b0a      	ldr	r3, [pc, #40]	; (8004cec <prvAddCurrentTaskToDelayedList+0xa4>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	68ba      	ldr	r2, [r7, #8]
 8004cc6:	429a      	cmp	r2, r3
 8004cc8:	d202      	bcs.n	8004cd0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004cca:	4a08      	ldr	r2, [pc, #32]	; (8004cec <prvAddCurrentTaskToDelayedList+0xa4>)
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	6013      	str	r3, [r2, #0]
}
 8004cd0:	bf00      	nop
 8004cd2:	3710      	adds	r7, #16
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}
 8004cd8:	20000d84 	.word	0x20000d84
 8004cdc:	200008ac 	.word	0x200008ac
 8004ce0:	20000d6c 	.word	0x20000d6c
 8004ce4:	20000d3c 	.word	0x20000d3c
 8004ce8:	20000d38 	.word	0x20000d38
 8004cec:	20000da0 	.word	0x20000da0

08004cf0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b08a      	sub	sp, #40	; 0x28
 8004cf4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004cfa:	f000 fb07 	bl	800530c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004cfe:	4b1c      	ldr	r3, [pc, #112]	; (8004d70 <xTimerCreateTimerTask+0x80>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d021      	beq.n	8004d4a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004d06:	2300      	movs	r3, #0
 8004d08:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004d0e:	1d3a      	adds	r2, r7, #4
 8004d10:	f107 0108 	add.w	r1, r7, #8
 8004d14:	f107 030c 	add.w	r3, r7, #12
 8004d18:	4618      	mov	r0, r3
 8004d1a:	f7fe facd 	bl	80032b8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004d1e:	6879      	ldr	r1, [r7, #4]
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	68fa      	ldr	r2, [r7, #12]
 8004d24:	9202      	str	r2, [sp, #8]
 8004d26:	9301      	str	r3, [sp, #4]
 8004d28:	2302      	movs	r3, #2
 8004d2a:	9300      	str	r3, [sp, #0]
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	460a      	mov	r2, r1
 8004d30:	4910      	ldr	r1, [pc, #64]	; (8004d74 <xTimerCreateTimerTask+0x84>)
 8004d32:	4811      	ldr	r0, [pc, #68]	; (8004d78 <xTimerCreateTimerTask+0x88>)
 8004d34:	f7ff f8b4 	bl	8003ea0 <xTaskCreateStatic>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	4a10      	ldr	r2, [pc, #64]	; (8004d7c <xTimerCreateTimerTask+0x8c>)
 8004d3c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004d3e:	4b0f      	ldr	r3, [pc, #60]	; (8004d7c <xTimerCreateTimerTask+0x8c>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d001      	beq.n	8004d4a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004d46:	2301      	movs	r3, #1
 8004d48:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d10a      	bne.n	8004d66 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d54:	f383 8811 	msr	BASEPRI, r3
 8004d58:	f3bf 8f6f 	isb	sy
 8004d5c:	f3bf 8f4f 	dsb	sy
 8004d60:	613b      	str	r3, [r7, #16]
}
 8004d62:	bf00      	nop
 8004d64:	e7fe      	b.n	8004d64 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004d66:	697b      	ldr	r3, [r7, #20]
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	3718      	adds	r7, #24
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}
 8004d70:	20000ddc 	.word	0x20000ddc
 8004d74:	08005e38 	.word	0x08005e38
 8004d78:	08004eb5 	.word	0x08004eb5
 8004d7c:	20000de0 	.word	0x20000de0

08004d80 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b08a      	sub	sp, #40	; 0x28
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	60f8      	str	r0, [r7, #12]
 8004d88:	60b9      	str	r1, [r7, #8]
 8004d8a:	607a      	str	r2, [r7, #4]
 8004d8c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d10a      	bne.n	8004dae <xTimerGenericCommand+0x2e>
	__asm volatile
 8004d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d9c:	f383 8811 	msr	BASEPRI, r3
 8004da0:	f3bf 8f6f 	isb	sy
 8004da4:	f3bf 8f4f 	dsb	sy
 8004da8:	623b      	str	r3, [r7, #32]
}
 8004daa:	bf00      	nop
 8004dac:	e7fe      	b.n	8004dac <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004dae:	4b1a      	ldr	r3, [pc, #104]	; (8004e18 <xTimerGenericCommand+0x98>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d02a      	beq.n	8004e0c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	2b05      	cmp	r3, #5
 8004dc6:	dc18      	bgt.n	8004dfa <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004dc8:	f7ff feb2 	bl	8004b30 <xTaskGetSchedulerState>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	2b02      	cmp	r3, #2
 8004dd0:	d109      	bne.n	8004de6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004dd2:	4b11      	ldr	r3, [pc, #68]	; (8004e18 <xTimerGenericCommand+0x98>)
 8004dd4:	6818      	ldr	r0, [r3, #0]
 8004dd6:	f107 0110 	add.w	r1, r7, #16
 8004dda:	2300      	movs	r3, #0
 8004ddc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004dde:	f7fe fc77 	bl	80036d0 <xQueueGenericSend>
 8004de2:	6278      	str	r0, [r7, #36]	; 0x24
 8004de4:	e012      	b.n	8004e0c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004de6:	4b0c      	ldr	r3, [pc, #48]	; (8004e18 <xTimerGenericCommand+0x98>)
 8004de8:	6818      	ldr	r0, [r3, #0]
 8004dea:	f107 0110 	add.w	r1, r7, #16
 8004dee:	2300      	movs	r3, #0
 8004df0:	2200      	movs	r2, #0
 8004df2:	f7fe fc6d 	bl	80036d0 <xQueueGenericSend>
 8004df6:	6278      	str	r0, [r7, #36]	; 0x24
 8004df8:	e008      	b.n	8004e0c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004dfa:	4b07      	ldr	r3, [pc, #28]	; (8004e18 <xTimerGenericCommand+0x98>)
 8004dfc:	6818      	ldr	r0, [r3, #0]
 8004dfe:	f107 0110 	add.w	r1, r7, #16
 8004e02:	2300      	movs	r3, #0
 8004e04:	683a      	ldr	r2, [r7, #0]
 8004e06:	f7fe fd61 	bl	80038cc <xQueueGenericSendFromISR>
 8004e0a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	3728      	adds	r7, #40	; 0x28
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}
 8004e16:	bf00      	nop
 8004e18:	20000ddc 	.word	0x20000ddc

08004e1c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b088      	sub	sp, #32
 8004e20:	af02      	add	r7, sp, #8
 8004e22:	6078      	str	r0, [r7, #4]
 8004e24:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e26:	4b22      	ldr	r3, [pc, #136]	; (8004eb0 <prvProcessExpiredTimer+0x94>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	68db      	ldr	r3, [r3, #12]
 8004e2c:	68db      	ldr	r3, [r3, #12]
 8004e2e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	3304      	adds	r3, #4
 8004e34:	4618      	mov	r0, r3
 8004e36:	f7fe fae3 	bl	8003400 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e40:	f003 0304 	and.w	r3, r3, #4
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d022      	beq.n	8004e8e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	699a      	ldr	r2, [r3, #24]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	18d1      	adds	r1, r2, r3
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	683a      	ldr	r2, [r7, #0]
 8004e54:	6978      	ldr	r0, [r7, #20]
 8004e56:	f000 f8d1 	bl	8004ffc <prvInsertTimerInActiveList>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d01f      	beq.n	8004ea0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004e60:	2300      	movs	r3, #0
 8004e62:	9300      	str	r3, [sp, #0]
 8004e64:	2300      	movs	r3, #0
 8004e66:	687a      	ldr	r2, [r7, #4]
 8004e68:	2100      	movs	r1, #0
 8004e6a:	6978      	ldr	r0, [r7, #20]
 8004e6c:	f7ff ff88 	bl	8004d80 <xTimerGenericCommand>
 8004e70:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d113      	bne.n	8004ea0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8004e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e7c:	f383 8811 	msr	BASEPRI, r3
 8004e80:	f3bf 8f6f 	isb	sy
 8004e84:	f3bf 8f4f 	dsb	sy
 8004e88:	60fb      	str	r3, [r7, #12]
}
 8004e8a:	bf00      	nop
 8004e8c:	e7fe      	b.n	8004e8c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e94:	f023 0301 	bic.w	r3, r3, #1
 8004e98:	b2da      	uxtb	r2, r3
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	6a1b      	ldr	r3, [r3, #32]
 8004ea4:	6978      	ldr	r0, [r7, #20]
 8004ea6:	4798      	blx	r3
}
 8004ea8:	bf00      	nop
 8004eaa:	3718      	adds	r7, #24
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}
 8004eb0:	20000dd4 	.word	0x20000dd4

08004eb4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b084      	sub	sp, #16
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004ebc:	f107 0308 	add.w	r3, r7, #8
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	f000 f857 	bl	8004f74 <prvGetNextExpireTime>
 8004ec6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	4619      	mov	r1, r3
 8004ecc:	68f8      	ldr	r0, [r7, #12]
 8004ece:	f000 f803 	bl	8004ed8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004ed2:	f000 f8d5 	bl	8005080 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004ed6:	e7f1      	b.n	8004ebc <prvTimerTask+0x8>

08004ed8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b084      	sub	sp, #16
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
 8004ee0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004ee2:	f7ff fa39 	bl	8004358 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004ee6:	f107 0308 	add.w	r3, r7, #8
 8004eea:	4618      	mov	r0, r3
 8004eec:	f000 f866 	bl	8004fbc <prvSampleTimeNow>
 8004ef0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d130      	bne.n	8004f5a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d10a      	bne.n	8004f14 <prvProcessTimerOrBlockTask+0x3c>
 8004efe:	687a      	ldr	r2, [r7, #4]
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	429a      	cmp	r2, r3
 8004f04:	d806      	bhi.n	8004f14 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004f06:	f7ff fa35 	bl	8004374 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004f0a:	68f9      	ldr	r1, [r7, #12]
 8004f0c:	6878      	ldr	r0, [r7, #4]
 8004f0e:	f7ff ff85 	bl	8004e1c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004f12:	e024      	b.n	8004f5e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d008      	beq.n	8004f2c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004f1a:	4b13      	ldr	r3, [pc, #76]	; (8004f68 <prvProcessTimerOrBlockTask+0x90>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d101      	bne.n	8004f28 <prvProcessTimerOrBlockTask+0x50>
 8004f24:	2301      	movs	r3, #1
 8004f26:	e000      	b.n	8004f2a <prvProcessTimerOrBlockTask+0x52>
 8004f28:	2300      	movs	r3, #0
 8004f2a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004f2c:	4b0f      	ldr	r3, [pc, #60]	; (8004f6c <prvProcessTimerOrBlockTask+0x94>)
 8004f2e:	6818      	ldr	r0, [r3, #0]
 8004f30:	687a      	ldr	r2, [r7, #4]
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	1ad3      	subs	r3, r2, r3
 8004f36:	683a      	ldr	r2, [r7, #0]
 8004f38:	4619      	mov	r1, r3
 8004f3a:	f7fe ff7d 	bl	8003e38 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004f3e:	f7ff fa19 	bl	8004374 <xTaskResumeAll>
 8004f42:	4603      	mov	r3, r0
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d10a      	bne.n	8004f5e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004f48:	4b09      	ldr	r3, [pc, #36]	; (8004f70 <prvProcessTimerOrBlockTask+0x98>)
 8004f4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f4e:	601a      	str	r2, [r3, #0]
 8004f50:	f3bf 8f4f 	dsb	sy
 8004f54:	f3bf 8f6f 	isb	sy
}
 8004f58:	e001      	b.n	8004f5e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004f5a:	f7ff fa0b 	bl	8004374 <xTaskResumeAll>
}
 8004f5e:	bf00      	nop
 8004f60:	3710      	adds	r7, #16
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}
 8004f66:	bf00      	nop
 8004f68:	20000dd8 	.word	0x20000dd8
 8004f6c:	20000ddc 	.word	0x20000ddc
 8004f70:	e000ed04 	.word	0xe000ed04

08004f74 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004f74:	b480      	push	{r7}
 8004f76:	b085      	sub	sp, #20
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004f7c:	4b0e      	ldr	r3, [pc, #56]	; (8004fb8 <prvGetNextExpireTime+0x44>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d101      	bne.n	8004f8a <prvGetNextExpireTime+0x16>
 8004f86:	2201      	movs	r2, #1
 8004f88:	e000      	b.n	8004f8c <prvGetNextExpireTime+0x18>
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d105      	bne.n	8004fa4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004f98:	4b07      	ldr	r3, [pc, #28]	; (8004fb8 <prvGetNextExpireTime+0x44>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	68db      	ldr	r3, [r3, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	60fb      	str	r3, [r7, #12]
 8004fa2:	e001      	b.n	8004fa8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	3714      	adds	r7, #20
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb4:	4770      	bx	lr
 8004fb6:	bf00      	nop
 8004fb8:	20000dd4 	.word	0x20000dd4

08004fbc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b084      	sub	sp, #16
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004fc4:	f7ff fa74 	bl	80044b0 <xTaskGetTickCount>
 8004fc8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004fca:	4b0b      	ldr	r3, [pc, #44]	; (8004ff8 <prvSampleTimeNow+0x3c>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	68fa      	ldr	r2, [r7, #12]
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	d205      	bcs.n	8004fe0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004fd4:	f000 f936 	bl	8005244 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2201      	movs	r2, #1
 8004fdc:	601a      	str	r2, [r3, #0]
 8004fde:	e002      	b.n	8004fe6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004fe6:	4a04      	ldr	r2, [pc, #16]	; (8004ff8 <prvSampleTimeNow+0x3c>)
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004fec:	68fb      	ldr	r3, [r7, #12]
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	3710      	adds	r7, #16
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}
 8004ff6:	bf00      	nop
 8004ff8:	20000de4 	.word	0x20000de4

08004ffc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b086      	sub	sp, #24
 8005000:	af00      	add	r7, sp, #0
 8005002:	60f8      	str	r0, [r7, #12]
 8005004:	60b9      	str	r1, [r7, #8]
 8005006:	607a      	str	r2, [r7, #4]
 8005008:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800500a:	2300      	movs	r3, #0
 800500c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	68ba      	ldr	r2, [r7, #8]
 8005012:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	68fa      	ldr	r2, [r7, #12]
 8005018:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800501a:	68ba      	ldr	r2, [r7, #8]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	429a      	cmp	r2, r3
 8005020:	d812      	bhi.n	8005048 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005022:	687a      	ldr	r2, [r7, #4]
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	1ad2      	subs	r2, r2, r3
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	699b      	ldr	r3, [r3, #24]
 800502c:	429a      	cmp	r2, r3
 800502e:	d302      	bcc.n	8005036 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005030:	2301      	movs	r3, #1
 8005032:	617b      	str	r3, [r7, #20]
 8005034:	e01b      	b.n	800506e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005036:	4b10      	ldr	r3, [pc, #64]	; (8005078 <prvInsertTimerInActiveList+0x7c>)
 8005038:	681a      	ldr	r2, [r3, #0]
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	3304      	adds	r3, #4
 800503e:	4619      	mov	r1, r3
 8005040:	4610      	mov	r0, r2
 8005042:	f7fe f9a4 	bl	800338e <vListInsert>
 8005046:	e012      	b.n	800506e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005048:	687a      	ldr	r2, [r7, #4]
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	429a      	cmp	r2, r3
 800504e:	d206      	bcs.n	800505e <prvInsertTimerInActiveList+0x62>
 8005050:	68ba      	ldr	r2, [r7, #8]
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	429a      	cmp	r2, r3
 8005056:	d302      	bcc.n	800505e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005058:	2301      	movs	r3, #1
 800505a:	617b      	str	r3, [r7, #20]
 800505c:	e007      	b.n	800506e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800505e:	4b07      	ldr	r3, [pc, #28]	; (800507c <prvInsertTimerInActiveList+0x80>)
 8005060:	681a      	ldr	r2, [r3, #0]
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	3304      	adds	r3, #4
 8005066:	4619      	mov	r1, r3
 8005068:	4610      	mov	r0, r2
 800506a:	f7fe f990 	bl	800338e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800506e:	697b      	ldr	r3, [r7, #20]
}
 8005070:	4618      	mov	r0, r3
 8005072:	3718      	adds	r7, #24
 8005074:	46bd      	mov	sp, r7
 8005076:	bd80      	pop	{r7, pc}
 8005078:	20000dd8 	.word	0x20000dd8
 800507c:	20000dd4 	.word	0x20000dd4

08005080 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b08e      	sub	sp, #56	; 0x38
 8005084:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005086:	e0ca      	b.n	800521e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2b00      	cmp	r3, #0
 800508c:	da18      	bge.n	80050c0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800508e:	1d3b      	adds	r3, r7, #4
 8005090:	3304      	adds	r3, #4
 8005092:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005096:	2b00      	cmp	r3, #0
 8005098:	d10a      	bne.n	80050b0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800509a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800509e:	f383 8811 	msr	BASEPRI, r3
 80050a2:	f3bf 8f6f 	isb	sy
 80050a6:	f3bf 8f4f 	dsb	sy
 80050aa:	61fb      	str	r3, [r7, #28]
}
 80050ac:	bf00      	nop
 80050ae:	e7fe      	b.n	80050ae <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80050b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80050b6:	6850      	ldr	r0, [r2, #4]
 80050b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80050ba:	6892      	ldr	r2, [r2, #8]
 80050bc:	4611      	mov	r1, r2
 80050be:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	f2c0 80ab 	blt.w	800521e <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80050cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ce:	695b      	ldr	r3, [r3, #20]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d004      	beq.n	80050de <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80050d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050d6:	3304      	adds	r3, #4
 80050d8:	4618      	mov	r0, r3
 80050da:	f7fe f991 	bl	8003400 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80050de:	463b      	mov	r3, r7
 80050e0:	4618      	mov	r0, r3
 80050e2:	f7ff ff6b 	bl	8004fbc <prvSampleTimeNow>
 80050e6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2b09      	cmp	r3, #9
 80050ec:	f200 8096 	bhi.w	800521c <prvProcessReceivedCommands+0x19c>
 80050f0:	a201      	add	r2, pc, #4	; (adr r2, 80050f8 <prvProcessReceivedCommands+0x78>)
 80050f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050f6:	bf00      	nop
 80050f8:	08005121 	.word	0x08005121
 80050fc:	08005121 	.word	0x08005121
 8005100:	08005121 	.word	0x08005121
 8005104:	08005195 	.word	0x08005195
 8005108:	080051a9 	.word	0x080051a9
 800510c:	080051f3 	.word	0x080051f3
 8005110:	08005121 	.word	0x08005121
 8005114:	08005121 	.word	0x08005121
 8005118:	08005195 	.word	0x08005195
 800511c:	080051a9 	.word	0x080051a9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005122:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005126:	f043 0301 	orr.w	r3, r3, #1
 800512a:	b2da      	uxtb	r2, r3
 800512c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800512e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005132:	68ba      	ldr	r2, [r7, #8]
 8005134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005136:	699b      	ldr	r3, [r3, #24]
 8005138:	18d1      	adds	r1, r2, r3
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800513e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005140:	f7ff ff5c 	bl	8004ffc <prvInsertTimerInActiveList>
 8005144:	4603      	mov	r3, r0
 8005146:	2b00      	cmp	r3, #0
 8005148:	d069      	beq.n	800521e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800514a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800514c:	6a1b      	ldr	r3, [r3, #32]
 800514e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005150:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005154:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005158:	f003 0304 	and.w	r3, r3, #4
 800515c:	2b00      	cmp	r3, #0
 800515e:	d05e      	beq.n	800521e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005160:	68ba      	ldr	r2, [r7, #8]
 8005162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005164:	699b      	ldr	r3, [r3, #24]
 8005166:	441a      	add	r2, r3
 8005168:	2300      	movs	r3, #0
 800516a:	9300      	str	r3, [sp, #0]
 800516c:	2300      	movs	r3, #0
 800516e:	2100      	movs	r1, #0
 8005170:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005172:	f7ff fe05 	bl	8004d80 <xTimerGenericCommand>
 8005176:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005178:	6a3b      	ldr	r3, [r7, #32]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d14f      	bne.n	800521e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800517e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005182:	f383 8811 	msr	BASEPRI, r3
 8005186:	f3bf 8f6f 	isb	sy
 800518a:	f3bf 8f4f 	dsb	sy
 800518e:	61bb      	str	r3, [r7, #24]
}
 8005190:	bf00      	nop
 8005192:	e7fe      	b.n	8005192 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005196:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800519a:	f023 0301 	bic.w	r3, r3, #1
 800519e:	b2da      	uxtb	r2, r3
 80051a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80051a6:	e03a      	b.n	800521e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80051a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80051ae:	f043 0301 	orr.w	r3, r3, #1
 80051b2:	b2da      	uxtb	r2, r3
 80051b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80051ba:	68ba      	ldr	r2, [r7, #8]
 80051bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051be:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80051c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051c2:	699b      	ldr	r3, [r3, #24]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d10a      	bne.n	80051de <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80051c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051cc:	f383 8811 	msr	BASEPRI, r3
 80051d0:	f3bf 8f6f 	isb	sy
 80051d4:	f3bf 8f4f 	dsb	sy
 80051d8:	617b      	str	r3, [r7, #20]
}
 80051da:	bf00      	nop
 80051dc:	e7fe      	b.n	80051dc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80051de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051e0:	699a      	ldr	r2, [r3, #24]
 80051e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e4:	18d1      	adds	r1, r2, r3
 80051e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80051ec:	f7ff ff06 	bl	8004ffc <prvInsertTimerInActiveList>
					break;
 80051f0:	e015      	b.n	800521e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80051f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80051f8:	f003 0302 	and.w	r3, r3, #2
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d103      	bne.n	8005208 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8005200:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005202:	f000 fbdd 	bl	80059c0 <vPortFree>
 8005206:	e00a      	b.n	800521e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800520a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800520e:	f023 0301 	bic.w	r3, r3, #1
 8005212:	b2da      	uxtb	r2, r3
 8005214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005216:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800521a:	e000      	b.n	800521e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800521c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800521e:	4b08      	ldr	r3, [pc, #32]	; (8005240 <prvProcessReceivedCommands+0x1c0>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	1d39      	adds	r1, r7, #4
 8005224:	2200      	movs	r2, #0
 8005226:	4618      	mov	r0, r3
 8005228:	f7fe fbec 	bl	8003a04 <xQueueReceive>
 800522c:	4603      	mov	r3, r0
 800522e:	2b00      	cmp	r3, #0
 8005230:	f47f af2a 	bne.w	8005088 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005234:	bf00      	nop
 8005236:	bf00      	nop
 8005238:	3730      	adds	r7, #48	; 0x30
 800523a:	46bd      	mov	sp, r7
 800523c:	bd80      	pop	{r7, pc}
 800523e:	bf00      	nop
 8005240:	20000ddc 	.word	0x20000ddc

08005244 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b088      	sub	sp, #32
 8005248:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800524a:	e048      	b.n	80052de <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800524c:	4b2d      	ldr	r3, [pc, #180]	; (8005304 <prvSwitchTimerLists+0xc0>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	68db      	ldr	r3, [r3, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005256:	4b2b      	ldr	r3, [pc, #172]	; (8005304 <prvSwitchTimerLists+0xc0>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	68db      	ldr	r3, [r3, #12]
 800525c:	68db      	ldr	r3, [r3, #12]
 800525e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	3304      	adds	r3, #4
 8005264:	4618      	mov	r0, r3
 8005266:	f7fe f8cb 	bl	8003400 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	6a1b      	ldr	r3, [r3, #32]
 800526e:	68f8      	ldr	r0, [r7, #12]
 8005270:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005278:	f003 0304 	and.w	r3, r3, #4
 800527c:	2b00      	cmp	r3, #0
 800527e:	d02e      	beq.n	80052de <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	699b      	ldr	r3, [r3, #24]
 8005284:	693a      	ldr	r2, [r7, #16]
 8005286:	4413      	add	r3, r2
 8005288:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800528a:	68ba      	ldr	r2, [r7, #8]
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	429a      	cmp	r2, r3
 8005290:	d90e      	bls.n	80052b0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	68ba      	ldr	r2, [r7, #8]
 8005296:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	68fa      	ldr	r2, [r7, #12]
 800529c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800529e:	4b19      	ldr	r3, [pc, #100]	; (8005304 <prvSwitchTimerLists+0xc0>)
 80052a0:	681a      	ldr	r2, [r3, #0]
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	3304      	adds	r3, #4
 80052a6:	4619      	mov	r1, r3
 80052a8:	4610      	mov	r0, r2
 80052aa:	f7fe f870 	bl	800338e <vListInsert>
 80052ae:	e016      	b.n	80052de <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80052b0:	2300      	movs	r3, #0
 80052b2:	9300      	str	r3, [sp, #0]
 80052b4:	2300      	movs	r3, #0
 80052b6:	693a      	ldr	r2, [r7, #16]
 80052b8:	2100      	movs	r1, #0
 80052ba:	68f8      	ldr	r0, [r7, #12]
 80052bc:	f7ff fd60 	bl	8004d80 <xTimerGenericCommand>
 80052c0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d10a      	bne.n	80052de <prvSwitchTimerLists+0x9a>
	__asm volatile
 80052c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052cc:	f383 8811 	msr	BASEPRI, r3
 80052d0:	f3bf 8f6f 	isb	sy
 80052d4:	f3bf 8f4f 	dsb	sy
 80052d8:	603b      	str	r3, [r7, #0]
}
 80052da:	bf00      	nop
 80052dc:	e7fe      	b.n	80052dc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80052de:	4b09      	ldr	r3, [pc, #36]	; (8005304 <prvSwitchTimerLists+0xc0>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d1b1      	bne.n	800524c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80052e8:	4b06      	ldr	r3, [pc, #24]	; (8005304 <prvSwitchTimerLists+0xc0>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80052ee:	4b06      	ldr	r3, [pc, #24]	; (8005308 <prvSwitchTimerLists+0xc4>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a04      	ldr	r2, [pc, #16]	; (8005304 <prvSwitchTimerLists+0xc0>)
 80052f4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80052f6:	4a04      	ldr	r2, [pc, #16]	; (8005308 <prvSwitchTimerLists+0xc4>)
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	6013      	str	r3, [r2, #0]
}
 80052fc:	bf00      	nop
 80052fe:	3718      	adds	r7, #24
 8005300:	46bd      	mov	sp, r7
 8005302:	bd80      	pop	{r7, pc}
 8005304:	20000dd4 	.word	0x20000dd4
 8005308:	20000dd8 	.word	0x20000dd8

0800530c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b082      	sub	sp, #8
 8005310:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005312:	f000 f967 	bl	80055e4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005316:	4b15      	ldr	r3, [pc, #84]	; (800536c <prvCheckForValidListAndQueue+0x60>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d120      	bne.n	8005360 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800531e:	4814      	ldr	r0, [pc, #80]	; (8005370 <prvCheckForValidListAndQueue+0x64>)
 8005320:	f7fd ffe4 	bl	80032ec <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005324:	4813      	ldr	r0, [pc, #76]	; (8005374 <prvCheckForValidListAndQueue+0x68>)
 8005326:	f7fd ffe1 	bl	80032ec <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800532a:	4b13      	ldr	r3, [pc, #76]	; (8005378 <prvCheckForValidListAndQueue+0x6c>)
 800532c:	4a10      	ldr	r2, [pc, #64]	; (8005370 <prvCheckForValidListAndQueue+0x64>)
 800532e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005330:	4b12      	ldr	r3, [pc, #72]	; (800537c <prvCheckForValidListAndQueue+0x70>)
 8005332:	4a10      	ldr	r2, [pc, #64]	; (8005374 <prvCheckForValidListAndQueue+0x68>)
 8005334:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005336:	2300      	movs	r3, #0
 8005338:	9300      	str	r3, [sp, #0]
 800533a:	4b11      	ldr	r3, [pc, #68]	; (8005380 <prvCheckForValidListAndQueue+0x74>)
 800533c:	4a11      	ldr	r2, [pc, #68]	; (8005384 <prvCheckForValidListAndQueue+0x78>)
 800533e:	2110      	movs	r1, #16
 8005340:	200a      	movs	r0, #10
 8005342:	f7fe f8ef 	bl	8003524 <xQueueGenericCreateStatic>
 8005346:	4603      	mov	r3, r0
 8005348:	4a08      	ldr	r2, [pc, #32]	; (800536c <prvCheckForValidListAndQueue+0x60>)
 800534a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800534c:	4b07      	ldr	r3, [pc, #28]	; (800536c <prvCheckForValidListAndQueue+0x60>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d005      	beq.n	8005360 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005354:	4b05      	ldr	r3, [pc, #20]	; (800536c <prvCheckForValidListAndQueue+0x60>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	490b      	ldr	r1, [pc, #44]	; (8005388 <prvCheckForValidListAndQueue+0x7c>)
 800535a:	4618      	mov	r0, r3
 800535c:	f7fe fd42 	bl	8003de4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005360:	f000 f970 	bl	8005644 <vPortExitCritical>
}
 8005364:	bf00      	nop
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}
 800536a:	bf00      	nop
 800536c:	20000ddc 	.word	0x20000ddc
 8005370:	20000dac 	.word	0x20000dac
 8005374:	20000dc0 	.word	0x20000dc0
 8005378:	20000dd4 	.word	0x20000dd4
 800537c:	20000dd8 	.word	0x20000dd8
 8005380:	20000e88 	.word	0x20000e88
 8005384:	20000de8 	.word	0x20000de8
 8005388:	08005e40 	.word	0x08005e40

0800538c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800538c:	b480      	push	{r7}
 800538e:	b085      	sub	sp, #20
 8005390:	af00      	add	r7, sp, #0
 8005392:	60f8      	str	r0, [r7, #12]
 8005394:	60b9      	str	r1, [r7, #8]
 8005396:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	3b04      	subs	r3, #4
 800539c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80053a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	3b04      	subs	r3, #4
 80053aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	f023 0201 	bic.w	r2, r3, #1
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	3b04      	subs	r3, #4
 80053ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80053bc:	4a0c      	ldr	r2, [pc, #48]	; (80053f0 <pxPortInitialiseStack+0x64>)
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	3b14      	subs	r3, #20
 80053c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80053c8:	687a      	ldr	r2, [r7, #4]
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	3b04      	subs	r3, #4
 80053d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	f06f 0202 	mvn.w	r2, #2
 80053da:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	3b20      	subs	r3, #32
 80053e0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80053e2:	68fb      	ldr	r3, [r7, #12]
}
 80053e4:	4618      	mov	r0, r3
 80053e6:	3714      	adds	r7, #20
 80053e8:	46bd      	mov	sp, r7
 80053ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ee:	4770      	bx	lr
 80053f0:	080053f5 	.word	0x080053f5

080053f4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80053f4:	b480      	push	{r7}
 80053f6:	b085      	sub	sp, #20
 80053f8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80053fa:	2300      	movs	r3, #0
 80053fc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80053fe:	4b12      	ldr	r3, [pc, #72]	; (8005448 <prvTaskExitError+0x54>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005406:	d00a      	beq.n	800541e <prvTaskExitError+0x2a>
	__asm volatile
 8005408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800540c:	f383 8811 	msr	BASEPRI, r3
 8005410:	f3bf 8f6f 	isb	sy
 8005414:	f3bf 8f4f 	dsb	sy
 8005418:	60fb      	str	r3, [r7, #12]
}
 800541a:	bf00      	nop
 800541c:	e7fe      	b.n	800541c <prvTaskExitError+0x28>
	__asm volatile
 800541e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005422:	f383 8811 	msr	BASEPRI, r3
 8005426:	f3bf 8f6f 	isb	sy
 800542a:	f3bf 8f4f 	dsb	sy
 800542e:	60bb      	str	r3, [r7, #8]
}
 8005430:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005432:	bf00      	nop
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d0fc      	beq.n	8005434 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800543a:	bf00      	nop
 800543c:	bf00      	nop
 800543e:	3714      	adds	r7, #20
 8005440:	46bd      	mov	sp, r7
 8005442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005446:	4770      	bx	lr
 8005448:	2000000c 	.word	0x2000000c
 800544c:	00000000 	.word	0x00000000

08005450 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005450:	4b07      	ldr	r3, [pc, #28]	; (8005470 <pxCurrentTCBConst2>)
 8005452:	6819      	ldr	r1, [r3, #0]
 8005454:	6808      	ldr	r0, [r1, #0]
 8005456:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800545a:	f380 8809 	msr	PSP, r0
 800545e:	f3bf 8f6f 	isb	sy
 8005462:	f04f 0000 	mov.w	r0, #0
 8005466:	f380 8811 	msr	BASEPRI, r0
 800546a:	4770      	bx	lr
 800546c:	f3af 8000 	nop.w

08005470 <pxCurrentTCBConst2>:
 8005470:	200008ac 	.word	0x200008ac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005474:	bf00      	nop
 8005476:	bf00      	nop

08005478 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005478:	4808      	ldr	r0, [pc, #32]	; (800549c <prvPortStartFirstTask+0x24>)
 800547a:	6800      	ldr	r0, [r0, #0]
 800547c:	6800      	ldr	r0, [r0, #0]
 800547e:	f380 8808 	msr	MSP, r0
 8005482:	f04f 0000 	mov.w	r0, #0
 8005486:	f380 8814 	msr	CONTROL, r0
 800548a:	b662      	cpsie	i
 800548c:	b661      	cpsie	f
 800548e:	f3bf 8f4f 	dsb	sy
 8005492:	f3bf 8f6f 	isb	sy
 8005496:	df00      	svc	0
 8005498:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800549a:	bf00      	nop
 800549c:	e000ed08 	.word	0xe000ed08

080054a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b086      	sub	sp, #24
 80054a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80054a6:	4b46      	ldr	r3, [pc, #280]	; (80055c0 <xPortStartScheduler+0x120>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a46      	ldr	r2, [pc, #280]	; (80055c4 <xPortStartScheduler+0x124>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d10a      	bne.n	80054c6 <xPortStartScheduler+0x26>
	__asm volatile
 80054b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054b4:	f383 8811 	msr	BASEPRI, r3
 80054b8:	f3bf 8f6f 	isb	sy
 80054bc:	f3bf 8f4f 	dsb	sy
 80054c0:	613b      	str	r3, [r7, #16]
}
 80054c2:	bf00      	nop
 80054c4:	e7fe      	b.n	80054c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80054c6:	4b3e      	ldr	r3, [pc, #248]	; (80055c0 <xPortStartScheduler+0x120>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a3f      	ldr	r2, [pc, #252]	; (80055c8 <xPortStartScheduler+0x128>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d10a      	bne.n	80054e6 <xPortStartScheduler+0x46>
	__asm volatile
 80054d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054d4:	f383 8811 	msr	BASEPRI, r3
 80054d8:	f3bf 8f6f 	isb	sy
 80054dc:	f3bf 8f4f 	dsb	sy
 80054e0:	60fb      	str	r3, [r7, #12]
}
 80054e2:	bf00      	nop
 80054e4:	e7fe      	b.n	80054e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80054e6:	4b39      	ldr	r3, [pc, #228]	; (80055cc <xPortStartScheduler+0x12c>)
 80054e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	781b      	ldrb	r3, [r3, #0]
 80054ee:	b2db      	uxtb	r3, r3
 80054f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	22ff      	movs	r2, #255	; 0xff
 80054f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	781b      	ldrb	r3, [r3, #0]
 80054fc:	b2db      	uxtb	r3, r3
 80054fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005500:	78fb      	ldrb	r3, [r7, #3]
 8005502:	b2db      	uxtb	r3, r3
 8005504:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005508:	b2da      	uxtb	r2, r3
 800550a:	4b31      	ldr	r3, [pc, #196]	; (80055d0 <xPortStartScheduler+0x130>)
 800550c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800550e:	4b31      	ldr	r3, [pc, #196]	; (80055d4 <xPortStartScheduler+0x134>)
 8005510:	2207      	movs	r2, #7
 8005512:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005514:	e009      	b.n	800552a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005516:	4b2f      	ldr	r3, [pc, #188]	; (80055d4 <xPortStartScheduler+0x134>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	3b01      	subs	r3, #1
 800551c:	4a2d      	ldr	r2, [pc, #180]	; (80055d4 <xPortStartScheduler+0x134>)
 800551e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005520:	78fb      	ldrb	r3, [r7, #3]
 8005522:	b2db      	uxtb	r3, r3
 8005524:	005b      	lsls	r3, r3, #1
 8005526:	b2db      	uxtb	r3, r3
 8005528:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800552a:	78fb      	ldrb	r3, [r7, #3]
 800552c:	b2db      	uxtb	r3, r3
 800552e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005532:	2b80      	cmp	r3, #128	; 0x80
 8005534:	d0ef      	beq.n	8005516 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005536:	4b27      	ldr	r3, [pc, #156]	; (80055d4 <xPortStartScheduler+0x134>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f1c3 0307 	rsb	r3, r3, #7
 800553e:	2b04      	cmp	r3, #4
 8005540:	d00a      	beq.n	8005558 <xPortStartScheduler+0xb8>
	__asm volatile
 8005542:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005546:	f383 8811 	msr	BASEPRI, r3
 800554a:	f3bf 8f6f 	isb	sy
 800554e:	f3bf 8f4f 	dsb	sy
 8005552:	60bb      	str	r3, [r7, #8]
}
 8005554:	bf00      	nop
 8005556:	e7fe      	b.n	8005556 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005558:	4b1e      	ldr	r3, [pc, #120]	; (80055d4 <xPortStartScheduler+0x134>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	021b      	lsls	r3, r3, #8
 800555e:	4a1d      	ldr	r2, [pc, #116]	; (80055d4 <xPortStartScheduler+0x134>)
 8005560:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005562:	4b1c      	ldr	r3, [pc, #112]	; (80055d4 <xPortStartScheduler+0x134>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800556a:	4a1a      	ldr	r2, [pc, #104]	; (80055d4 <xPortStartScheduler+0x134>)
 800556c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	b2da      	uxtb	r2, r3
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005576:	4b18      	ldr	r3, [pc, #96]	; (80055d8 <xPortStartScheduler+0x138>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a17      	ldr	r2, [pc, #92]	; (80055d8 <xPortStartScheduler+0x138>)
 800557c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005580:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005582:	4b15      	ldr	r3, [pc, #84]	; (80055d8 <xPortStartScheduler+0x138>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a14      	ldr	r2, [pc, #80]	; (80055d8 <xPortStartScheduler+0x138>)
 8005588:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800558c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800558e:	f000 f8dd 	bl	800574c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005592:	4b12      	ldr	r3, [pc, #72]	; (80055dc <xPortStartScheduler+0x13c>)
 8005594:	2200      	movs	r2, #0
 8005596:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005598:	f000 f8fc 	bl	8005794 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800559c:	4b10      	ldr	r3, [pc, #64]	; (80055e0 <xPortStartScheduler+0x140>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a0f      	ldr	r2, [pc, #60]	; (80055e0 <xPortStartScheduler+0x140>)
 80055a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80055a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80055a8:	f7ff ff66 	bl	8005478 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80055ac:	f7ff f84a 	bl	8004644 <vTaskSwitchContext>
	prvTaskExitError();
 80055b0:	f7ff ff20 	bl	80053f4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80055b4:	2300      	movs	r3, #0
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	3718      	adds	r7, #24
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd80      	pop	{r7, pc}
 80055be:	bf00      	nop
 80055c0:	e000ed00 	.word	0xe000ed00
 80055c4:	410fc271 	.word	0x410fc271
 80055c8:	410fc270 	.word	0x410fc270
 80055cc:	e000e400 	.word	0xe000e400
 80055d0:	20000ed8 	.word	0x20000ed8
 80055d4:	20000edc 	.word	0x20000edc
 80055d8:	e000ed20 	.word	0xe000ed20
 80055dc:	2000000c 	.word	0x2000000c
 80055e0:	e000ef34 	.word	0xe000ef34

080055e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80055e4:	b480      	push	{r7}
 80055e6:	b083      	sub	sp, #12
 80055e8:	af00      	add	r7, sp, #0
	__asm volatile
 80055ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ee:	f383 8811 	msr	BASEPRI, r3
 80055f2:	f3bf 8f6f 	isb	sy
 80055f6:	f3bf 8f4f 	dsb	sy
 80055fa:	607b      	str	r3, [r7, #4]
}
 80055fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80055fe:	4b0f      	ldr	r3, [pc, #60]	; (800563c <vPortEnterCritical+0x58>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	3301      	adds	r3, #1
 8005604:	4a0d      	ldr	r2, [pc, #52]	; (800563c <vPortEnterCritical+0x58>)
 8005606:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005608:	4b0c      	ldr	r3, [pc, #48]	; (800563c <vPortEnterCritical+0x58>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	2b01      	cmp	r3, #1
 800560e:	d10f      	bne.n	8005630 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005610:	4b0b      	ldr	r3, [pc, #44]	; (8005640 <vPortEnterCritical+0x5c>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	b2db      	uxtb	r3, r3
 8005616:	2b00      	cmp	r3, #0
 8005618:	d00a      	beq.n	8005630 <vPortEnterCritical+0x4c>
	__asm volatile
 800561a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800561e:	f383 8811 	msr	BASEPRI, r3
 8005622:	f3bf 8f6f 	isb	sy
 8005626:	f3bf 8f4f 	dsb	sy
 800562a:	603b      	str	r3, [r7, #0]
}
 800562c:	bf00      	nop
 800562e:	e7fe      	b.n	800562e <vPortEnterCritical+0x4a>
	}
}
 8005630:	bf00      	nop
 8005632:	370c      	adds	r7, #12
 8005634:	46bd      	mov	sp, r7
 8005636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563a:	4770      	bx	lr
 800563c:	2000000c 	.word	0x2000000c
 8005640:	e000ed04 	.word	0xe000ed04

08005644 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005644:	b480      	push	{r7}
 8005646:	b083      	sub	sp, #12
 8005648:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800564a:	4b12      	ldr	r3, [pc, #72]	; (8005694 <vPortExitCritical+0x50>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d10a      	bne.n	8005668 <vPortExitCritical+0x24>
	__asm volatile
 8005652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005656:	f383 8811 	msr	BASEPRI, r3
 800565a:	f3bf 8f6f 	isb	sy
 800565e:	f3bf 8f4f 	dsb	sy
 8005662:	607b      	str	r3, [r7, #4]
}
 8005664:	bf00      	nop
 8005666:	e7fe      	b.n	8005666 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005668:	4b0a      	ldr	r3, [pc, #40]	; (8005694 <vPortExitCritical+0x50>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	3b01      	subs	r3, #1
 800566e:	4a09      	ldr	r2, [pc, #36]	; (8005694 <vPortExitCritical+0x50>)
 8005670:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005672:	4b08      	ldr	r3, [pc, #32]	; (8005694 <vPortExitCritical+0x50>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d105      	bne.n	8005686 <vPortExitCritical+0x42>
 800567a:	2300      	movs	r3, #0
 800567c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	f383 8811 	msr	BASEPRI, r3
}
 8005684:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005686:	bf00      	nop
 8005688:	370c      	adds	r7, #12
 800568a:	46bd      	mov	sp, r7
 800568c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005690:	4770      	bx	lr
 8005692:	bf00      	nop
 8005694:	2000000c 	.word	0x2000000c
	...

080056a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80056a0:	f3ef 8009 	mrs	r0, PSP
 80056a4:	f3bf 8f6f 	isb	sy
 80056a8:	4b15      	ldr	r3, [pc, #84]	; (8005700 <pxCurrentTCBConst>)
 80056aa:	681a      	ldr	r2, [r3, #0]
 80056ac:	f01e 0f10 	tst.w	lr, #16
 80056b0:	bf08      	it	eq
 80056b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80056b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056ba:	6010      	str	r0, [r2, #0]
 80056bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80056c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80056c4:	f380 8811 	msr	BASEPRI, r0
 80056c8:	f3bf 8f4f 	dsb	sy
 80056cc:	f3bf 8f6f 	isb	sy
 80056d0:	f7fe ffb8 	bl	8004644 <vTaskSwitchContext>
 80056d4:	f04f 0000 	mov.w	r0, #0
 80056d8:	f380 8811 	msr	BASEPRI, r0
 80056dc:	bc09      	pop	{r0, r3}
 80056de:	6819      	ldr	r1, [r3, #0]
 80056e0:	6808      	ldr	r0, [r1, #0]
 80056e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056e6:	f01e 0f10 	tst.w	lr, #16
 80056ea:	bf08      	it	eq
 80056ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80056f0:	f380 8809 	msr	PSP, r0
 80056f4:	f3bf 8f6f 	isb	sy
 80056f8:	4770      	bx	lr
 80056fa:	bf00      	nop
 80056fc:	f3af 8000 	nop.w

08005700 <pxCurrentTCBConst>:
 8005700:	200008ac 	.word	0x200008ac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005704:	bf00      	nop
 8005706:	bf00      	nop

08005708 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b082      	sub	sp, #8
 800570c:	af00      	add	r7, sp, #0
	__asm volatile
 800570e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005712:	f383 8811 	msr	BASEPRI, r3
 8005716:	f3bf 8f6f 	isb	sy
 800571a:	f3bf 8f4f 	dsb	sy
 800571e:	607b      	str	r3, [r7, #4]
}
 8005720:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005722:	f7fe fed5 	bl	80044d0 <xTaskIncrementTick>
 8005726:	4603      	mov	r3, r0
 8005728:	2b00      	cmp	r3, #0
 800572a:	d003      	beq.n	8005734 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800572c:	4b06      	ldr	r3, [pc, #24]	; (8005748 <xPortSysTickHandler+0x40>)
 800572e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005732:	601a      	str	r2, [r3, #0]
 8005734:	2300      	movs	r3, #0
 8005736:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	f383 8811 	msr	BASEPRI, r3
}
 800573e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005740:	bf00      	nop
 8005742:	3708      	adds	r7, #8
 8005744:	46bd      	mov	sp, r7
 8005746:	bd80      	pop	{r7, pc}
 8005748:	e000ed04 	.word	0xe000ed04

0800574c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800574c:	b480      	push	{r7}
 800574e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005750:	4b0b      	ldr	r3, [pc, #44]	; (8005780 <vPortSetupTimerInterrupt+0x34>)
 8005752:	2200      	movs	r2, #0
 8005754:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005756:	4b0b      	ldr	r3, [pc, #44]	; (8005784 <vPortSetupTimerInterrupt+0x38>)
 8005758:	2200      	movs	r2, #0
 800575a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800575c:	4b0a      	ldr	r3, [pc, #40]	; (8005788 <vPortSetupTimerInterrupt+0x3c>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a0a      	ldr	r2, [pc, #40]	; (800578c <vPortSetupTimerInterrupt+0x40>)
 8005762:	fba2 2303 	umull	r2, r3, r2, r3
 8005766:	099b      	lsrs	r3, r3, #6
 8005768:	4a09      	ldr	r2, [pc, #36]	; (8005790 <vPortSetupTimerInterrupt+0x44>)
 800576a:	3b01      	subs	r3, #1
 800576c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800576e:	4b04      	ldr	r3, [pc, #16]	; (8005780 <vPortSetupTimerInterrupt+0x34>)
 8005770:	2207      	movs	r2, #7
 8005772:	601a      	str	r2, [r3, #0]
}
 8005774:	bf00      	nop
 8005776:	46bd      	mov	sp, r7
 8005778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577c:	4770      	bx	lr
 800577e:	bf00      	nop
 8005780:	e000e010 	.word	0xe000e010
 8005784:	e000e018 	.word	0xe000e018
 8005788:	20000000 	.word	0x20000000
 800578c:	10624dd3 	.word	0x10624dd3
 8005790:	e000e014 	.word	0xe000e014

08005794 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005794:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80057a4 <vPortEnableVFP+0x10>
 8005798:	6801      	ldr	r1, [r0, #0]
 800579a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800579e:	6001      	str	r1, [r0, #0]
 80057a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80057a2:	bf00      	nop
 80057a4:	e000ed88 	.word	0xe000ed88

080057a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80057a8:	b480      	push	{r7}
 80057aa:	b085      	sub	sp, #20
 80057ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80057ae:	f3ef 8305 	mrs	r3, IPSR
 80057b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2b0f      	cmp	r3, #15
 80057b8:	d914      	bls.n	80057e4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80057ba:	4a17      	ldr	r2, [pc, #92]	; (8005818 <vPortValidateInterruptPriority+0x70>)
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	4413      	add	r3, r2
 80057c0:	781b      	ldrb	r3, [r3, #0]
 80057c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80057c4:	4b15      	ldr	r3, [pc, #84]	; (800581c <vPortValidateInterruptPriority+0x74>)
 80057c6:	781b      	ldrb	r3, [r3, #0]
 80057c8:	7afa      	ldrb	r2, [r7, #11]
 80057ca:	429a      	cmp	r2, r3
 80057cc:	d20a      	bcs.n	80057e4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80057ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057d2:	f383 8811 	msr	BASEPRI, r3
 80057d6:	f3bf 8f6f 	isb	sy
 80057da:	f3bf 8f4f 	dsb	sy
 80057de:	607b      	str	r3, [r7, #4]
}
 80057e0:	bf00      	nop
 80057e2:	e7fe      	b.n	80057e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80057e4:	4b0e      	ldr	r3, [pc, #56]	; (8005820 <vPortValidateInterruptPriority+0x78>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80057ec:	4b0d      	ldr	r3, [pc, #52]	; (8005824 <vPortValidateInterruptPriority+0x7c>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	429a      	cmp	r2, r3
 80057f2:	d90a      	bls.n	800580a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80057f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057f8:	f383 8811 	msr	BASEPRI, r3
 80057fc:	f3bf 8f6f 	isb	sy
 8005800:	f3bf 8f4f 	dsb	sy
 8005804:	603b      	str	r3, [r7, #0]
}
 8005806:	bf00      	nop
 8005808:	e7fe      	b.n	8005808 <vPortValidateInterruptPriority+0x60>
	}
 800580a:	bf00      	nop
 800580c:	3714      	adds	r7, #20
 800580e:	46bd      	mov	sp, r7
 8005810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005814:	4770      	bx	lr
 8005816:	bf00      	nop
 8005818:	e000e3f0 	.word	0xe000e3f0
 800581c:	20000ed8 	.word	0x20000ed8
 8005820:	e000ed0c 	.word	0xe000ed0c
 8005824:	20000edc 	.word	0x20000edc

08005828 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b08a      	sub	sp, #40	; 0x28
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005830:	2300      	movs	r3, #0
 8005832:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005834:	f7fe fd90 	bl	8004358 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005838:	4b5b      	ldr	r3, [pc, #364]	; (80059a8 <pvPortMalloc+0x180>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d101      	bne.n	8005844 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005840:	f000 f920 	bl	8005a84 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005844:	4b59      	ldr	r3, [pc, #356]	; (80059ac <pvPortMalloc+0x184>)
 8005846:	681a      	ldr	r2, [r3, #0]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	4013      	ands	r3, r2
 800584c:	2b00      	cmp	r3, #0
 800584e:	f040 8093 	bne.w	8005978 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d01d      	beq.n	8005894 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005858:	2208      	movs	r2, #8
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	4413      	add	r3, r2
 800585e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	f003 0307 	and.w	r3, r3, #7
 8005866:	2b00      	cmp	r3, #0
 8005868:	d014      	beq.n	8005894 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	f023 0307 	bic.w	r3, r3, #7
 8005870:	3308      	adds	r3, #8
 8005872:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	f003 0307 	and.w	r3, r3, #7
 800587a:	2b00      	cmp	r3, #0
 800587c:	d00a      	beq.n	8005894 <pvPortMalloc+0x6c>
	__asm volatile
 800587e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005882:	f383 8811 	msr	BASEPRI, r3
 8005886:	f3bf 8f6f 	isb	sy
 800588a:	f3bf 8f4f 	dsb	sy
 800588e:	617b      	str	r3, [r7, #20]
}
 8005890:	bf00      	nop
 8005892:	e7fe      	b.n	8005892 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d06e      	beq.n	8005978 <pvPortMalloc+0x150>
 800589a:	4b45      	ldr	r3, [pc, #276]	; (80059b0 <pvPortMalloc+0x188>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	687a      	ldr	r2, [r7, #4]
 80058a0:	429a      	cmp	r2, r3
 80058a2:	d869      	bhi.n	8005978 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80058a4:	4b43      	ldr	r3, [pc, #268]	; (80059b4 <pvPortMalloc+0x18c>)
 80058a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80058a8:	4b42      	ldr	r3, [pc, #264]	; (80059b4 <pvPortMalloc+0x18c>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80058ae:	e004      	b.n	80058ba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80058b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80058b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80058ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	687a      	ldr	r2, [r7, #4]
 80058c0:	429a      	cmp	r2, r3
 80058c2:	d903      	bls.n	80058cc <pvPortMalloc+0xa4>
 80058c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d1f1      	bne.n	80058b0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80058cc:	4b36      	ldr	r3, [pc, #216]	; (80059a8 <pvPortMalloc+0x180>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058d2:	429a      	cmp	r2, r3
 80058d4:	d050      	beq.n	8005978 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80058d6:	6a3b      	ldr	r3, [r7, #32]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	2208      	movs	r2, #8
 80058dc:	4413      	add	r3, r2
 80058de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80058e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e2:	681a      	ldr	r2, [r3, #0]
 80058e4:	6a3b      	ldr	r3, [r7, #32]
 80058e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80058e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ea:	685a      	ldr	r2, [r3, #4]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	1ad2      	subs	r2, r2, r3
 80058f0:	2308      	movs	r3, #8
 80058f2:	005b      	lsls	r3, r3, #1
 80058f4:	429a      	cmp	r2, r3
 80058f6:	d91f      	bls.n	8005938 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80058f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	4413      	add	r3, r2
 80058fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005900:	69bb      	ldr	r3, [r7, #24]
 8005902:	f003 0307 	and.w	r3, r3, #7
 8005906:	2b00      	cmp	r3, #0
 8005908:	d00a      	beq.n	8005920 <pvPortMalloc+0xf8>
	__asm volatile
 800590a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800590e:	f383 8811 	msr	BASEPRI, r3
 8005912:	f3bf 8f6f 	isb	sy
 8005916:	f3bf 8f4f 	dsb	sy
 800591a:	613b      	str	r3, [r7, #16]
}
 800591c:	bf00      	nop
 800591e:	e7fe      	b.n	800591e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005922:	685a      	ldr	r2, [r3, #4]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	1ad2      	subs	r2, r2, r3
 8005928:	69bb      	ldr	r3, [r7, #24]
 800592a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800592c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800592e:	687a      	ldr	r2, [r7, #4]
 8005930:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005932:	69b8      	ldr	r0, [r7, #24]
 8005934:	f000 f908 	bl	8005b48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005938:	4b1d      	ldr	r3, [pc, #116]	; (80059b0 <pvPortMalloc+0x188>)
 800593a:	681a      	ldr	r2, [r3, #0]
 800593c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	1ad3      	subs	r3, r2, r3
 8005942:	4a1b      	ldr	r2, [pc, #108]	; (80059b0 <pvPortMalloc+0x188>)
 8005944:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005946:	4b1a      	ldr	r3, [pc, #104]	; (80059b0 <pvPortMalloc+0x188>)
 8005948:	681a      	ldr	r2, [r3, #0]
 800594a:	4b1b      	ldr	r3, [pc, #108]	; (80059b8 <pvPortMalloc+0x190>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	429a      	cmp	r2, r3
 8005950:	d203      	bcs.n	800595a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005952:	4b17      	ldr	r3, [pc, #92]	; (80059b0 <pvPortMalloc+0x188>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a18      	ldr	r2, [pc, #96]	; (80059b8 <pvPortMalloc+0x190>)
 8005958:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800595a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800595c:	685a      	ldr	r2, [r3, #4]
 800595e:	4b13      	ldr	r3, [pc, #76]	; (80059ac <pvPortMalloc+0x184>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	431a      	orrs	r2, r3
 8005964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005966:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800596a:	2200      	movs	r2, #0
 800596c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800596e:	4b13      	ldr	r3, [pc, #76]	; (80059bc <pvPortMalloc+0x194>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	3301      	adds	r3, #1
 8005974:	4a11      	ldr	r2, [pc, #68]	; (80059bc <pvPortMalloc+0x194>)
 8005976:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005978:	f7fe fcfc 	bl	8004374 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800597c:	69fb      	ldr	r3, [r7, #28]
 800597e:	f003 0307 	and.w	r3, r3, #7
 8005982:	2b00      	cmp	r3, #0
 8005984:	d00a      	beq.n	800599c <pvPortMalloc+0x174>
	__asm volatile
 8005986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800598a:	f383 8811 	msr	BASEPRI, r3
 800598e:	f3bf 8f6f 	isb	sy
 8005992:	f3bf 8f4f 	dsb	sy
 8005996:	60fb      	str	r3, [r7, #12]
}
 8005998:	bf00      	nop
 800599a:	e7fe      	b.n	800599a <pvPortMalloc+0x172>
	return pvReturn;
 800599c:	69fb      	ldr	r3, [r7, #28]
}
 800599e:	4618      	mov	r0, r3
 80059a0:	3728      	adds	r7, #40	; 0x28
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd80      	pop	{r7, pc}
 80059a6:	bf00      	nop
 80059a8:	20004ae8 	.word	0x20004ae8
 80059ac:	20004afc 	.word	0x20004afc
 80059b0:	20004aec 	.word	0x20004aec
 80059b4:	20004ae0 	.word	0x20004ae0
 80059b8:	20004af0 	.word	0x20004af0
 80059bc:	20004af4 	.word	0x20004af4

080059c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b086      	sub	sp, #24
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d04d      	beq.n	8005a6e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80059d2:	2308      	movs	r3, #8
 80059d4:	425b      	negs	r3, r3
 80059d6:	697a      	ldr	r2, [r7, #20]
 80059d8:	4413      	add	r3, r2
 80059da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80059dc:	697b      	ldr	r3, [r7, #20]
 80059de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	685a      	ldr	r2, [r3, #4]
 80059e4:	4b24      	ldr	r3, [pc, #144]	; (8005a78 <vPortFree+0xb8>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4013      	ands	r3, r2
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d10a      	bne.n	8005a04 <vPortFree+0x44>
	__asm volatile
 80059ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059f2:	f383 8811 	msr	BASEPRI, r3
 80059f6:	f3bf 8f6f 	isb	sy
 80059fa:	f3bf 8f4f 	dsb	sy
 80059fe:	60fb      	str	r3, [r7, #12]
}
 8005a00:	bf00      	nop
 8005a02:	e7fe      	b.n	8005a02 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005a04:	693b      	ldr	r3, [r7, #16]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d00a      	beq.n	8005a22 <vPortFree+0x62>
	__asm volatile
 8005a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a10:	f383 8811 	msr	BASEPRI, r3
 8005a14:	f3bf 8f6f 	isb	sy
 8005a18:	f3bf 8f4f 	dsb	sy
 8005a1c:	60bb      	str	r3, [r7, #8]
}
 8005a1e:	bf00      	nop
 8005a20:	e7fe      	b.n	8005a20 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	685a      	ldr	r2, [r3, #4]
 8005a26:	4b14      	ldr	r3, [pc, #80]	; (8005a78 <vPortFree+0xb8>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4013      	ands	r3, r2
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d01e      	beq.n	8005a6e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005a30:	693b      	ldr	r3, [r7, #16]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d11a      	bne.n	8005a6e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005a38:	693b      	ldr	r3, [r7, #16]
 8005a3a:	685a      	ldr	r2, [r3, #4]
 8005a3c:	4b0e      	ldr	r3, [pc, #56]	; (8005a78 <vPortFree+0xb8>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	43db      	mvns	r3, r3
 8005a42:	401a      	ands	r2, r3
 8005a44:	693b      	ldr	r3, [r7, #16]
 8005a46:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005a48:	f7fe fc86 	bl	8004358 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	685a      	ldr	r2, [r3, #4]
 8005a50:	4b0a      	ldr	r3, [pc, #40]	; (8005a7c <vPortFree+0xbc>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4413      	add	r3, r2
 8005a56:	4a09      	ldr	r2, [pc, #36]	; (8005a7c <vPortFree+0xbc>)
 8005a58:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005a5a:	6938      	ldr	r0, [r7, #16]
 8005a5c:	f000 f874 	bl	8005b48 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005a60:	4b07      	ldr	r3, [pc, #28]	; (8005a80 <vPortFree+0xc0>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	3301      	adds	r3, #1
 8005a66:	4a06      	ldr	r2, [pc, #24]	; (8005a80 <vPortFree+0xc0>)
 8005a68:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005a6a:	f7fe fc83 	bl	8004374 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005a6e:	bf00      	nop
 8005a70:	3718      	adds	r7, #24
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}
 8005a76:	bf00      	nop
 8005a78:	20004afc 	.word	0x20004afc
 8005a7c:	20004aec 	.word	0x20004aec
 8005a80:	20004af8 	.word	0x20004af8

08005a84 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005a84:	b480      	push	{r7}
 8005a86:	b085      	sub	sp, #20
 8005a88:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005a8a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005a8e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005a90:	4b27      	ldr	r3, [pc, #156]	; (8005b30 <prvHeapInit+0xac>)
 8005a92:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	f003 0307 	and.w	r3, r3, #7
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d00c      	beq.n	8005ab8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	3307      	adds	r3, #7
 8005aa2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	f023 0307 	bic.w	r3, r3, #7
 8005aaa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005aac:	68ba      	ldr	r2, [r7, #8]
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	1ad3      	subs	r3, r2, r3
 8005ab2:	4a1f      	ldr	r2, [pc, #124]	; (8005b30 <prvHeapInit+0xac>)
 8005ab4:	4413      	add	r3, r2
 8005ab6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005abc:	4a1d      	ldr	r2, [pc, #116]	; (8005b34 <prvHeapInit+0xb0>)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005ac2:	4b1c      	ldr	r3, [pc, #112]	; (8005b34 <prvHeapInit+0xb0>)
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	68ba      	ldr	r2, [r7, #8]
 8005acc:	4413      	add	r3, r2
 8005ace:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005ad0:	2208      	movs	r2, #8
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	1a9b      	subs	r3, r3, r2
 8005ad6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f023 0307 	bic.w	r3, r3, #7
 8005ade:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	4a15      	ldr	r2, [pc, #84]	; (8005b38 <prvHeapInit+0xb4>)
 8005ae4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005ae6:	4b14      	ldr	r3, [pc, #80]	; (8005b38 <prvHeapInit+0xb4>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	2200      	movs	r2, #0
 8005aec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005aee:	4b12      	ldr	r3, [pc, #72]	; (8005b38 <prvHeapInit+0xb4>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	2200      	movs	r2, #0
 8005af4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	68fa      	ldr	r2, [r7, #12]
 8005afe:	1ad2      	subs	r2, r2, r3
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005b04:	4b0c      	ldr	r3, [pc, #48]	; (8005b38 <prvHeapInit+0xb4>)
 8005b06:	681a      	ldr	r2, [r3, #0]
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	4a0a      	ldr	r2, [pc, #40]	; (8005b3c <prvHeapInit+0xb8>)
 8005b12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	4a09      	ldr	r2, [pc, #36]	; (8005b40 <prvHeapInit+0xbc>)
 8005b1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005b1c:	4b09      	ldr	r3, [pc, #36]	; (8005b44 <prvHeapInit+0xc0>)
 8005b1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005b22:	601a      	str	r2, [r3, #0]
}
 8005b24:	bf00      	nop
 8005b26:	3714      	adds	r7, #20
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2e:	4770      	bx	lr
 8005b30:	20000ee0 	.word	0x20000ee0
 8005b34:	20004ae0 	.word	0x20004ae0
 8005b38:	20004ae8 	.word	0x20004ae8
 8005b3c:	20004af0 	.word	0x20004af0
 8005b40:	20004aec 	.word	0x20004aec
 8005b44:	20004afc 	.word	0x20004afc

08005b48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b085      	sub	sp, #20
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005b50:	4b28      	ldr	r3, [pc, #160]	; (8005bf4 <prvInsertBlockIntoFreeList+0xac>)
 8005b52:	60fb      	str	r3, [r7, #12]
 8005b54:	e002      	b.n	8005b5c <prvInsertBlockIntoFreeList+0x14>
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	60fb      	str	r3, [r7, #12]
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	687a      	ldr	r2, [r7, #4]
 8005b62:	429a      	cmp	r2, r3
 8005b64:	d8f7      	bhi.n	8005b56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	685b      	ldr	r3, [r3, #4]
 8005b6e:	68ba      	ldr	r2, [r7, #8]
 8005b70:	4413      	add	r3, r2
 8005b72:	687a      	ldr	r2, [r7, #4]
 8005b74:	429a      	cmp	r2, r3
 8005b76:	d108      	bne.n	8005b8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	685a      	ldr	r2, [r3, #4]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	441a      	add	r2, r3
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	68ba      	ldr	r2, [r7, #8]
 8005b94:	441a      	add	r2, r3
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	429a      	cmp	r2, r3
 8005b9c:	d118      	bne.n	8005bd0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681a      	ldr	r2, [r3, #0]
 8005ba2:	4b15      	ldr	r3, [pc, #84]	; (8005bf8 <prvInsertBlockIntoFreeList+0xb0>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	429a      	cmp	r2, r3
 8005ba8:	d00d      	beq.n	8005bc6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	685a      	ldr	r2, [r3, #4]
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	685b      	ldr	r3, [r3, #4]
 8005bb4:	441a      	add	r2, r3
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	681a      	ldr	r2, [r3, #0]
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	601a      	str	r2, [r3, #0]
 8005bc4:	e008      	b.n	8005bd8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005bc6:	4b0c      	ldr	r3, [pc, #48]	; (8005bf8 <prvInsertBlockIntoFreeList+0xb0>)
 8005bc8:	681a      	ldr	r2, [r3, #0]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	601a      	str	r2, [r3, #0]
 8005bce:	e003      	b.n	8005bd8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681a      	ldr	r2, [r3, #0]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005bd8:	68fa      	ldr	r2, [r7, #12]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	429a      	cmp	r2, r3
 8005bde:	d002      	beq.n	8005be6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	687a      	ldr	r2, [r7, #4]
 8005be4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005be6:	bf00      	nop
 8005be8:	3714      	adds	r7, #20
 8005bea:	46bd      	mov	sp, r7
 8005bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf0:	4770      	bx	lr
 8005bf2:	bf00      	nop
 8005bf4:	20004ae0 	.word	0x20004ae0
 8005bf8:	20004ae8 	.word	0x20004ae8

08005bfc <memset>:
 8005bfc:	4402      	add	r2, r0
 8005bfe:	4603      	mov	r3, r0
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d100      	bne.n	8005c06 <memset+0xa>
 8005c04:	4770      	bx	lr
 8005c06:	f803 1b01 	strb.w	r1, [r3], #1
 8005c0a:	e7f9      	b.n	8005c00 <memset+0x4>

08005c0c <_reclaim_reent>:
 8005c0c:	4b29      	ldr	r3, [pc, #164]	; (8005cb4 <_reclaim_reent+0xa8>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4283      	cmp	r3, r0
 8005c12:	b570      	push	{r4, r5, r6, lr}
 8005c14:	4604      	mov	r4, r0
 8005c16:	d04b      	beq.n	8005cb0 <_reclaim_reent+0xa4>
 8005c18:	69c3      	ldr	r3, [r0, #28]
 8005c1a:	b143      	cbz	r3, 8005c2e <_reclaim_reent+0x22>
 8005c1c:	68db      	ldr	r3, [r3, #12]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d144      	bne.n	8005cac <_reclaim_reent+0xa0>
 8005c22:	69e3      	ldr	r3, [r4, #28]
 8005c24:	6819      	ldr	r1, [r3, #0]
 8005c26:	b111      	cbz	r1, 8005c2e <_reclaim_reent+0x22>
 8005c28:	4620      	mov	r0, r4
 8005c2a:	f000 f879 	bl	8005d20 <_free_r>
 8005c2e:	6961      	ldr	r1, [r4, #20]
 8005c30:	b111      	cbz	r1, 8005c38 <_reclaim_reent+0x2c>
 8005c32:	4620      	mov	r0, r4
 8005c34:	f000 f874 	bl	8005d20 <_free_r>
 8005c38:	69e1      	ldr	r1, [r4, #28]
 8005c3a:	b111      	cbz	r1, 8005c42 <_reclaim_reent+0x36>
 8005c3c:	4620      	mov	r0, r4
 8005c3e:	f000 f86f 	bl	8005d20 <_free_r>
 8005c42:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005c44:	b111      	cbz	r1, 8005c4c <_reclaim_reent+0x40>
 8005c46:	4620      	mov	r0, r4
 8005c48:	f000 f86a 	bl	8005d20 <_free_r>
 8005c4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005c4e:	b111      	cbz	r1, 8005c56 <_reclaim_reent+0x4a>
 8005c50:	4620      	mov	r0, r4
 8005c52:	f000 f865 	bl	8005d20 <_free_r>
 8005c56:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005c58:	b111      	cbz	r1, 8005c60 <_reclaim_reent+0x54>
 8005c5a:	4620      	mov	r0, r4
 8005c5c:	f000 f860 	bl	8005d20 <_free_r>
 8005c60:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005c62:	b111      	cbz	r1, 8005c6a <_reclaim_reent+0x5e>
 8005c64:	4620      	mov	r0, r4
 8005c66:	f000 f85b 	bl	8005d20 <_free_r>
 8005c6a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8005c6c:	b111      	cbz	r1, 8005c74 <_reclaim_reent+0x68>
 8005c6e:	4620      	mov	r0, r4
 8005c70:	f000 f856 	bl	8005d20 <_free_r>
 8005c74:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005c76:	b111      	cbz	r1, 8005c7e <_reclaim_reent+0x72>
 8005c78:	4620      	mov	r0, r4
 8005c7a:	f000 f851 	bl	8005d20 <_free_r>
 8005c7e:	6a23      	ldr	r3, [r4, #32]
 8005c80:	b1b3      	cbz	r3, 8005cb0 <_reclaim_reent+0xa4>
 8005c82:	4620      	mov	r0, r4
 8005c84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005c88:	4718      	bx	r3
 8005c8a:	5949      	ldr	r1, [r1, r5]
 8005c8c:	b941      	cbnz	r1, 8005ca0 <_reclaim_reent+0x94>
 8005c8e:	3504      	adds	r5, #4
 8005c90:	69e3      	ldr	r3, [r4, #28]
 8005c92:	2d80      	cmp	r5, #128	; 0x80
 8005c94:	68d9      	ldr	r1, [r3, #12]
 8005c96:	d1f8      	bne.n	8005c8a <_reclaim_reent+0x7e>
 8005c98:	4620      	mov	r0, r4
 8005c9a:	f000 f841 	bl	8005d20 <_free_r>
 8005c9e:	e7c0      	b.n	8005c22 <_reclaim_reent+0x16>
 8005ca0:	680e      	ldr	r6, [r1, #0]
 8005ca2:	4620      	mov	r0, r4
 8005ca4:	f000 f83c 	bl	8005d20 <_free_r>
 8005ca8:	4631      	mov	r1, r6
 8005caa:	e7ef      	b.n	8005c8c <_reclaim_reent+0x80>
 8005cac:	2500      	movs	r5, #0
 8005cae:	e7ef      	b.n	8005c90 <_reclaim_reent+0x84>
 8005cb0:	bd70      	pop	{r4, r5, r6, pc}
 8005cb2:	bf00      	nop
 8005cb4:	2000005c 	.word	0x2000005c

08005cb8 <__libc_init_array>:
 8005cb8:	b570      	push	{r4, r5, r6, lr}
 8005cba:	4d0d      	ldr	r5, [pc, #52]	; (8005cf0 <__libc_init_array+0x38>)
 8005cbc:	4c0d      	ldr	r4, [pc, #52]	; (8005cf4 <__libc_init_array+0x3c>)
 8005cbe:	1b64      	subs	r4, r4, r5
 8005cc0:	10a4      	asrs	r4, r4, #2
 8005cc2:	2600      	movs	r6, #0
 8005cc4:	42a6      	cmp	r6, r4
 8005cc6:	d109      	bne.n	8005cdc <__libc_init_array+0x24>
 8005cc8:	4d0b      	ldr	r5, [pc, #44]	; (8005cf8 <__libc_init_array+0x40>)
 8005cca:	4c0c      	ldr	r4, [pc, #48]	; (8005cfc <__libc_init_array+0x44>)
 8005ccc:	f000 f880 	bl	8005dd0 <_init>
 8005cd0:	1b64      	subs	r4, r4, r5
 8005cd2:	10a4      	asrs	r4, r4, #2
 8005cd4:	2600      	movs	r6, #0
 8005cd6:	42a6      	cmp	r6, r4
 8005cd8:	d105      	bne.n	8005ce6 <__libc_init_array+0x2e>
 8005cda:	bd70      	pop	{r4, r5, r6, pc}
 8005cdc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ce0:	4798      	blx	r3
 8005ce2:	3601      	adds	r6, #1
 8005ce4:	e7ee      	b.n	8005cc4 <__libc_init_array+0xc>
 8005ce6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cea:	4798      	blx	r3
 8005cec:	3601      	adds	r6, #1
 8005cee:	e7f2      	b.n	8005cd6 <__libc_init_array+0x1e>
 8005cf0:	08005e8c 	.word	0x08005e8c
 8005cf4:	08005e8c 	.word	0x08005e8c
 8005cf8:	08005e8c 	.word	0x08005e8c
 8005cfc:	08005e90 	.word	0x08005e90

08005d00 <__retarget_lock_acquire_recursive>:
 8005d00:	4770      	bx	lr

08005d02 <__retarget_lock_release_recursive>:
 8005d02:	4770      	bx	lr

08005d04 <memcpy>:
 8005d04:	440a      	add	r2, r1
 8005d06:	4291      	cmp	r1, r2
 8005d08:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005d0c:	d100      	bne.n	8005d10 <memcpy+0xc>
 8005d0e:	4770      	bx	lr
 8005d10:	b510      	push	{r4, lr}
 8005d12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005d16:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005d1a:	4291      	cmp	r1, r2
 8005d1c:	d1f9      	bne.n	8005d12 <memcpy+0xe>
 8005d1e:	bd10      	pop	{r4, pc}

08005d20 <_free_r>:
 8005d20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005d22:	2900      	cmp	r1, #0
 8005d24:	d044      	beq.n	8005db0 <_free_r+0x90>
 8005d26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d2a:	9001      	str	r0, [sp, #4]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	f1a1 0404 	sub.w	r4, r1, #4
 8005d32:	bfb8      	it	lt
 8005d34:	18e4      	addlt	r4, r4, r3
 8005d36:	f000 f83f 	bl	8005db8 <__malloc_lock>
 8005d3a:	4a1e      	ldr	r2, [pc, #120]	; (8005db4 <_free_r+0x94>)
 8005d3c:	9801      	ldr	r0, [sp, #4]
 8005d3e:	6813      	ldr	r3, [r2, #0]
 8005d40:	b933      	cbnz	r3, 8005d50 <_free_r+0x30>
 8005d42:	6063      	str	r3, [r4, #4]
 8005d44:	6014      	str	r4, [r2, #0]
 8005d46:	b003      	add	sp, #12
 8005d48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005d4c:	f000 b83a 	b.w	8005dc4 <__malloc_unlock>
 8005d50:	42a3      	cmp	r3, r4
 8005d52:	d908      	bls.n	8005d66 <_free_r+0x46>
 8005d54:	6825      	ldr	r5, [r4, #0]
 8005d56:	1961      	adds	r1, r4, r5
 8005d58:	428b      	cmp	r3, r1
 8005d5a:	bf01      	itttt	eq
 8005d5c:	6819      	ldreq	r1, [r3, #0]
 8005d5e:	685b      	ldreq	r3, [r3, #4]
 8005d60:	1949      	addeq	r1, r1, r5
 8005d62:	6021      	streq	r1, [r4, #0]
 8005d64:	e7ed      	b.n	8005d42 <_free_r+0x22>
 8005d66:	461a      	mov	r2, r3
 8005d68:	685b      	ldr	r3, [r3, #4]
 8005d6a:	b10b      	cbz	r3, 8005d70 <_free_r+0x50>
 8005d6c:	42a3      	cmp	r3, r4
 8005d6e:	d9fa      	bls.n	8005d66 <_free_r+0x46>
 8005d70:	6811      	ldr	r1, [r2, #0]
 8005d72:	1855      	adds	r5, r2, r1
 8005d74:	42a5      	cmp	r5, r4
 8005d76:	d10b      	bne.n	8005d90 <_free_r+0x70>
 8005d78:	6824      	ldr	r4, [r4, #0]
 8005d7a:	4421      	add	r1, r4
 8005d7c:	1854      	adds	r4, r2, r1
 8005d7e:	42a3      	cmp	r3, r4
 8005d80:	6011      	str	r1, [r2, #0]
 8005d82:	d1e0      	bne.n	8005d46 <_free_r+0x26>
 8005d84:	681c      	ldr	r4, [r3, #0]
 8005d86:	685b      	ldr	r3, [r3, #4]
 8005d88:	6053      	str	r3, [r2, #4]
 8005d8a:	440c      	add	r4, r1
 8005d8c:	6014      	str	r4, [r2, #0]
 8005d8e:	e7da      	b.n	8005d46 <_free_r+0x26>
 8005d90:	d902      	bls.n	8005d98 <_free_r+0x78>
 8005d92:	230c      	movs	r3, #12
 8005d94:	6003      	str	r3, [r0, #0]
 8005d96:	e7d6      	b.n	8005d46 <_free_r+0x26>
 8005d98:	6825      	ldr	r5, [r4, #0]
 8005d9a:	1961      	adds	r1, r4, r5
 8005d9c:	428b      	cmp	r3, r1
 8005d9e:	bf04      	itt	eq
 8005da0:	6819      	ldreq	r1, [r3, #0]
 8005da2:	685b      	ldreq	r3, [r3, #4]
 8005da4:	6063      	str	r3, [r4, #4]
 8005da6:	bf04      	itt	eq
 8005da8:	1949      	addeq	r1, r1, r5
 8005daa:	6021      	streq	r1, [r4, #0]
 8005dac:	6054      	str	r4, [r2, #4]
 8005dae:	e7ca      	b.n	8005d46 <_free_r+0x26>
 8005db0:	b003      	add	sp, #12
 8005db2:	bd30      	pop	{r4, r5, pc}
 8005db4:	20004c3c 	.word	0x20004c3c

08005db8 <__malloc_lock>:
 8005db8:	4801      	ldr	r0, [pc, #4]	; (8005dc0 <__malloc_lock+0x8>)
 8005dba:	f7ff bfa1 	b.w	8005d00 <__retarget_lock_acquire_recursive>
 8005dbe:	bf00      	nop
 8005dc0:	20004c38 	.word	0x20004c38

08005dc4 <__malloc_unlock>:
 8005dc4:	4801      	ldr	r0, [pc, #4]	; (8005dcc <__malloc_unlock+0x8>)
 8005dc6:	f7ff bf9c 	b.w	8005d02 <__retarget_lock_release_recursive>
 8005dca:	bf00      	nop
 8005dcc:	20004c38 	.word	0x20004c38

08005dd0 <_init>:
 8005dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dd2:	bf00      	nop
 8005dd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dd6:	bc08      	pop	{r3}
 8005dd8:	469e      	mov	lr, r3
 8005dda:	4770      	bx	lr

08005ddc <_fini>:
 8005ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dde:	bf00      	nop
 8005de0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005de2:	bc08      	pop	{r3}
 8005de4:	469e      	mov	lr, r3
 8005de6:	4770      	bx	lr
